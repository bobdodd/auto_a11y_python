"""
Auto-generated issue descriptions from ISSUE_CATALOG_BY_TOUCHPOINT.md
DO NOT EDIT THIS FILE DIRECTLY - Edit ISSUE_CATALOG_BY_TOUCHPOINT.md and regenerate
Generated with all 287 issues from the catalog
"""

from enum import Enum
from typing import Dict, Any, List


class ImpactScale(Enum):
    """Impact scale for accessibility issues"""
    HIGH = "High"
    MEDIUM = "Medium"  
    LOW = "Low"
    INFO = "Info"


def get_detailed_issue_description(issue_code: str, metadata: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    Get detailed description for an issue code with contextual metadata
    
    Args:
        issue_code: The issue code (e.g., 'headings_ErrEmptyHeading')
        metadata: Additional context about the specific issue instance
        
    Returns:
        Dictionary with detailed description fields
    """
    
    if metadata is None:
        metadata = {}
    
    # Extract the error type from the issue code
    # Handle AI_ prefixed codes specially
    if issue_code.startswith('AI_'):
        error_type = issue_code  # Use full code for AI issues
        category = 'AI'
    elif '_' in issue_code:
        # Find the actual error code (starts with Err, Warn, Info, Disco, or AI)
        parts = issue_code.split('_')
        error_type = issue_code  # Default to full code
        category = 'unknown'
        
        for i, part in enumerate(parts):
            if part.startswith(('Err', 'Warn', 'Info', 'Disco')):
                # Found the error code, join from here to end
                error_type = '_'.join(parts[i:])
                # Everything before is the category
                category = '_'.join(parts[:i]) if i > 0 else 'unknown'
                break
    else:
        category = 'unknown'
        error_type = issue_code
    
    # Generated descriptions from template
    descriptions = {        'AI_ErrAccordionWithoutARIA': {
            'title': "Accordion element \"{element_text}\" lacks proper ARIA markup",
            'what': "Accordion element \"{element_text}\" lacks proper ARIA markup",
            'why': "Without aria-expanded and proper roles, users cannot determine if sections are expanded or collapsed",
            'who': "Screen reader users, keyboard users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2', '1.3.1'],
            'remediation': "Add button role to headers, aria-expanded to indicate state, and aria-controls to link headers to panels"
        },
        'AI_ErrAmbiguousLinkText': {
            'title': "Link text \"{element_text}\" is ambiguous without surrounding context",
            'what': "Link text \"{element_text}\" is ambiguous without surrounding context",
            'why': "Screen reader users navigating by links won\'t understand the link\'s purpose",
            'who': "Screen reader users navigating out of context",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.4'],
            'remediation': "Use descriptive link text that makes sense without context, or add aria-label"
        },
        'AI_ErrCarouselWithoutARIA': {
            'title': "Carousel/slider \"{element_text}\" lacks proper ARIA markup and controls",
            'what': "Carousel/slider \"{element_text}\" lacks proper ARIA markup and controls",
            'why': "Without proper ARIA and controls, users cannot understand or control the carousel\'s behavior",
            'who': "Screen reader users, keyboard users, users with motor impairments",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2', '2.2.2'],
            'remediation': "Add role=\"region\", aria-label, aria-live for updates, and accessible previous/next controls"
        },
        'AI_ErrClickableWithoutKeyboard': {
            'title': "Element with onclick handler is not keyboard accessible",
            'what': "Element with onclick handler is not keyboard accessible",
            'why': "Keyboard users cannot activate this control",
            'who': "Keyboard users, users who cannot use a mouse",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1'],
            'remediation': "Add tabindex=\"0\" and implement onkeypress/onkeydown handlers for Enter and Space keys"
        },
        'AI_ErrDialogWithoutARIA': {
            'title': "Element appears to be a dialog/modal but lacks proper ARIA markup",
            'what': "{element_tag} element \"{element_text}\" appears to be a dialog/modal but lacks proper ARIA markup",
            'why': "Without proper ARIA attributes, screen readers cannot announce the dialog\'s purpose, state, or provide proper navigation",
            'who': "Screen reader users, keyboard users who need focus management",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2', '2.4.3'],
            'remediation': "Add role=\"dialog\", aria-modal=\"true\", aria-label or aria-labelledby, and implement focus trap"
        },
        'AI_ErrDropdownWithoutARIA': {
            'title': "Dropdown menu \"{element_text}\" lacks proper ARIA markup",
            'what': "Dropdown menu \"{element_text}\" lacks proper ARIA markup",
            'why': "Without aria-expanded, aria-haspopup, and proper roles, users cannot understand the dropdown\'s state or navigate it properly",
            'who': "Screen reader users, keyboard users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2', '1.3.1'],
            'remediation': "Add aria-haspopup=\"true\", aria-expanded state, and role=\"menu\" with role=\"menuitem\" for options"
        },
        'AI_ErrHeadingLevelMismatch': {
            'title': "Heading level {current_level} doesn\'t match visual hierarchy (should be level {suggested_level})",
            'what': "Heading level {current_level} doesn\'t match visual hierarchy (should be level {suggested_level})",
            'why': "Incorrect heading levels create confusing document structure for screen reader users",
            'who': "Screen reader users, users who navigate by headings",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Adjust heading level to match the visual hierarchy of the page"
        },
        'AI_ErrInteractiveElementIssue': {
            'title': "Interactive {element_tag} element \"{element_text}\" has accessibility issues",
            'what': "Interactive {element_tag} element \"{element_text}\" has accessibility issues",
            'why': "Interactive elements without proper semantic markup or keyboard support create barriers for assistive technology users",
            'who': "Keyboard users, screen reader users, voice control users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2'],
            'remediation': "Use semantic HTML elements or add appropriate ARIA roles and keyboard support"
        },
        'AI_ErrLinkWithoutText': {
            'title': "Link element has no accessible text",
            'what': "Link element has no accessible text",
            'why': "Screen readers announce this as \"link\" without any context",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.4', '4.1.2'],
            'remediation': "Add link text, aria-label, or aria-labelledby attribute"
        },
        'AI_ErrMenuWithoutARIA': {
            'title': "Navigation menu lacks proper ARIA markup",
            'what': "Navigation menu lacks proper ARIA markup",
            'why': "Screen readers won\'t recognize this as a navigation menu",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add role=\"navigation\" to container and appropriate ARIA attributes for menu items"
        },
        'AI_ErrMissingFocusIndicator': {
            'title': "Interactive element lacks visible focus indicator",
            'what': "Interactive element lacks visible focus indicator",
            'why': "Users can\'t see which element has keyboard focus",
            'who': "Keyboard users, users with attention or memory issues",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Add CSS :focus styles with visible outline, border, or background change"
        },
        'AI_ErrMissingInteractiveRole': {
            'title': "Interactive {element_tag} element lacks appropriate ARIA role",
            'what': "Interactive {element_tag} element lacks appropriate ARIA role",
            'why': "Screen readers won\'t announce this as an interactive control",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add appropriate ARIA role (button, link, checkbox, etc.) to the element"
        },
        'AI_ErrModalFocusTrap': {
            'title': "Modal/dialog \"{element_text}\" does not properly trap focus",
            'what': "Modal/dialog \"{element_text}\" does not properly trap focus",
            'why': "Without focus trapping, keyboard users can navigate outside the modal while it\'s open, causing confusion",
            'who': "Keyboard users, screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.2', '2.4.3'],
            'remediation': "Implement focus trap to keep focus within modal while open, and return focus to trigger element on close"
        },
        'AI_ErrNonSemanticButton': {
            'title': "Clickable {element_tag} element \"{element_text}\" is not a semantic button",
            'what': "Clickable {element_tag} element \"{element_text}\" is not a semantic button",
            'why': "Non-semantic buttons are not keyboard accessible and invisible to screen readers",
            'who': "Keyboard users, screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2'],
            'remediation': "Replace {element_tag} with <button> element or add role=\"button\" and tabindex=\"0\""
        },
        'AI_ErrReadingOrderMismatch': {
            'title': "Visual reading order doesn\'t match DOM order - content may be read out of sequence",
            'what': "Visual reading order doesn\'t match DOM order - content may be read out of sequence",
            'why': "Screen readers follow DOM order, which may not match the visual layout, causing confusion",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.2', '2.4.3'],
            'remediation': "Reorder DOM elements to match the visual reading flow or use CSS flexbox/grid with proper order"
        },
        'AI_ErrSkippedHeading': {
            'title': "Heading level skipped from h{current_level} to h{next_level}",
            'what': "Heading level skipped from h{current_level} to h{next_level}",
            'why': "Skipped heading levels break the logical document structure and make navigation difficult",
            'who': "Screen reader users, users who navigate by headings",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Use sequential heading levels without skipping (h1, h2, h3, not h1, h3)"
        },
        'AI_ErrTabsWithoutARIA': {
            'title': "Tab interface \"{element_text}\" lacks proper ARIA markup",
            'what': "Tab interface \"{element_text}\" lacks proper ARIA markup",
            'why': "Without role=\"tablist\", role=\"tab\", and aria-selected attributes, screen readers cannot convey tab relationships and states",
            'who': "Screen reader users, keyboard users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2', '1.3.1'],
            'remediation': "Add role=\"tablist\" to container, role=\"tab\" to tabs, role=\"tabpanel\" to panels, and manage aria-selected states"
        },
        'AI_ErrToggleWithoutState': {
            'title': "Toggle button doesn\'t indicate its state (expanded/collapsed)",
            'what': "Toggle button doesn\'t indicate its state (expanded/collapsed)",
            'why': "Users don\'t know the current state of the control",
            'who': "Screen reader users, cognitive disability users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-expanded=\"true/false\" and update it when state changes"
        },
        'AI_ErrVisualHeadingNotMarked': {
            'title': "Text \"{visual_text}\" appears visually as a heading but is not marked up with proper heading tags",
            'what': "Text \"{visual_text}\" appears visually as a heading but is not marked up with proper heading tags",
            'why': "Screen reader users won\'t recognize this text as a heading, breaking navigation and document structure",
            'who': "Screen reader users, users who navigate by headings",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.1', '2.4.6'],
            'remediation': "Use appropriate HTML heading tags (h1-h6) for text that serves as headings"
        },
        'AI_InfoVisualCue': {
            'title': "Information conveyed only through visual cues (color, position, size)",
            'what': "Information conveyed only through visual cues (color, position, size)",
            'why': "Users who can\'t perceive visual cues miss important information",
            'who': "Blind users, colorblind users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.3', '1.4.1'],
            'remediation': "Provide text alternatives or additional cues beyond just visual ones"
        },
        'AI_WarnMixedLanguage': {
            'title': "Mixed language content detected without proper language declarations",
            'what': "Mixed language content detected without proper language declarations",
            'why': "Screen readers may pronounce text incorrectly without language declarations",
            'who': "Screen reader users who speak multiple languages",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.2'],
            'remediation': "Add lang attributes to elements containing different languages"
        },
        'AI_WarnModalMissingLabel': {
            'title': "Modal dialog lacks accessible name or description",
            'what': "Modal dialog lacks accessible name or description",
            'why': "Screen readers won\'t announce what the dialog is for",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-label or aria-labelledby to the dialog element"
        },
        'AI_WarnModalWithoutFocusTrap': {
            'title': "Modal dialog doesn\'t trap focus within the dialog",
            'what': "Modal dialog doesn\'t trap focus within the dialog",
            'why': "Keyboard users can tab out of the modal into the page behind it",
            'who': "Keyboard users, screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.2', '2.4.3'],
            'remediation': "Implement focus trap that keeps tab navigation within the modal"
        },
        'WarnProblematicAnimation': {
            'title': "Animation detected that may cause accessibility issues",
            'what': "Animation detected that may cause accessibility issues",
            'why': "Animations can trigger seizures or make content difficult to read",
            'who': "Users with vestibular disorders, photosensitive epilepsy, or cognitive disabilities",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.2.2', '2.3.1'],
            'remediation': "Provide pause/stop controls and respect prefers-reduced-motion preference"
        },
        'DiscoFontFound': {
            'title': "Font detected in use on the page for accessibility review",
            'what': "Font '{fontName}' is used at {sizeCount} {sizeCount_singular_size} on this page: {fontSizes_list}",
            'why': "Tracking font usage helps identify typography choices that may affect readability. While not inherently an accessibility issue, certain fonts can be harder to read for users with dyslexia, low vision, or reading disabilities. This discovery item documents which fonts are in use and at what sizes so they can be evaluated for legibility, character distinction, and overall readability as part of a comprehensive accessibility review.",
            'who': "This information helps accessibility auditors and developers understand the typography landscape of the page, particularly relevant for users with dyslexia who benefit from clear sans-serif fonts, users with low vision who need good character distinction, and users with reading disabilities who benefit from consistent, readable typefaces",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "No action required - this is informational only. For accessibility best practices, consider using fonts with clear character distinction (avoiding ambiguous characters like I/l/1), adequate spacing between letters, and good readability at various sizes. Popular accessible fonts include Arial, Verdana, Tahoma, and specialized dyslexia-friendly fonts like OpenDyslexic. Document your font choices and test readability with actual users when possible."
        },
        'DiscoFormOnPage': {
            'title': "Form detected (signature: {formSignature}){searchContext_title} - requires comprehensive manual testing",
            'what': "A form has been detected on this page with {fieldCount} field{fieldCount_plural} ({fieldTypes_summary}). The form submits to '{formAction}' using {formMethod} method. {searchContext_description} Form signature {formSignature} allows tracking this same form across different pages.",
            'why': "Forms are critical interactive components that require comprehensive manual accessibility testing beyond what automated tools can verify. Every form must be tested with keyboard navigation (tab order, enter/space activation, escape to cancel), screen readers (field labels announced correctly, error messages associated with fields, required fields indicated), and various input methods. Forms with poor accessibility create significant barriers - unlabeled fields leave users guessing what to enter, poor error handling prevents users from completing tasks, and keyboard traps can make forms completely unusable. Search forms are especially important as they provide a critical navigation mechanism - users rely on them to find content quickly, and screen reader users often navigate directly to search landmarks. The form signature allows auditors to recognize when the same form appears on multiple pages, ensuring consistent testing and remediation across the site.",
            'who': "Screen reader users who need properly labeled form controls and error associations, keyboard-only users who must navigate and submit forms without a mouse, users with motor disabilities who need adequate time limits and clear focus indicators, users with cognitive disabilities who need clear instructions and helpful error messages, voice control users who need properly exposed form control names, mobile users who need forms that work with assistive technologies on touch devices, and screen reader users who use landmark navigation to jump directly to search forms",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.3.1', '2.1.1', '2.4.3', '3.2.2', '3.3.1', '3.3.2', '3.3.3', '3.3.4', '4.1.2'],
            'remediation': "Manually test this form with keyboard navigation (ensure all fields are reachable via Tab, form can be submitted with Enter, and there are no keyboard traps), screen reader (verify each field has a clear label or aria-label, required fields are indicated, error messages are associated with fields via aria-describedby, and fieldset/legend are used for radio button groups), test error validation (submit invalid data and verify error messages are clear, specific, and programmatically associated with fields), test with form pre-filled (ensure autocomplete attributes are used appropriately), verify timeout warnings for any time limits, and confirm the form works across different devices and assistive technologies. {searchContext_remediation}"
        },
        'DiscoFoundInlineSvg': {
            'title': "Inline SVG element detected that requires manual review to determine appropriate accessibility implementation based on its purpose and complexity",
            'what': "Inline SVG element detected that requires manual review to determine appropriate accessibility implementation based on its purpose and complexity",
            'why': "SVG elements serve diverse purposes from simple icons to complex interactive visualizations, each requiring different accessibility approaches. A decorative border needs different treatment than a data chart, which differs from an interactive map or scientific simulation. Automated tools cannot determine SVG purpose, whether it\'s decorative or informative, static or interactive, or if existing accessibility features adequately support user needs.",
            'who': "Blind and low vision users using screen readers who need text alternatives for graphics or keyboard access to interactive elements, users with motor disabilities who require keyboard navigation for interactive SVG controls, users with cognitive disabilities who benefit from clear labeling and predictable interaction patterns, and users of various assistive technologies that may interpret SVG content differently",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.1.1'],
            'remediation': "Evaluate the SVG\'s purpose and complexity - for simple images add <title> with aria-labelledby or role=\"img\" with aria-label, for decorative graphics use aria-hidden=\"true\", for data visualizations provide <title> and <desc> plus consider adjacent detailed text alternatives, for interactive content ensure all controls are keyboard accessible with proper ARIA labels and focus management, for complex simulations provide instructions and state changes announcements, and test with screen readers to verify the experience matches visual functionality"
        },
        'DiscoFoundJS': {
            'title': "JavaScript detected on page",
            'what': "JavaScript detected on page",
            'why': "Functionality should work without JavaScript",
            'who': "Users with JavaScript disabled",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Ensure progressive enhancement"
        },
        'DiscoNavFound': {
            'title': "Navigation region detected (signature: {navSignature}) - requires manual accessibility review",
            'what': "A navigation region has been detected on this page with {linkCount} link{linkCount_plural}. {navLabel_description} Navigation signature {navSignature} allows tracking this same navigation across different pages.",
            'why': "Navigation regions are critical wayfinding tools that must be keyboard accessible, properly labeled, and work with screen readers. Each navigation area needs verification that links are organized logically, focus order is correct, current page indication is provided (aria-current=\"page\"), and the navigation can be easily understood and operated by all users. Multiple navigation regions must be distinguishable via unique accessible names. The navigation signature allows auditors to recognize when the same navigation structure appears on multiple pages, ensuring consistent testing and remediation across the site.",
            'who': "Screen reader users who navigate by landmarks and need clear labels to distinguish navigation regions, keyboard users who must efficiently tab through navigation links, users with motor disabilities who need consistent and predictable navigation patterns, users with cognitive disabilities who benefit from clear, well-organized navigation structures",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '2.4.3', '4.1.2'],
            'remediation': "Verify navigation has a clear accessible name (aria-label or aria-labelledby) if multiple nav regions exist. Test keyboard navigation through all links (Tab order should be logical). Ensure current page is indicated with aria-current=\"page\". Verify focus indicators are visible. Test with screen reader to confirm navigation is announced correctly and links are understandable out of context."
        },
        'DiscoAsideFound': {
            'title': "Complementary region detected (signature: {asideSignature}) - requires manual accessibility review",
            'what': "A complementary region (<aside> or role=\"complementary\") has been detected on this page. {asideLabel_description} Signature {asideSignature} allows tracking this same region across different pages.",
            'why': "Complementary regions provide supporting content related to the main content. They must be properly labeled when multiple exist, contain relevant supplementary information, and be distinguishable from main content for screen reader users who navigate by landmarks. The signature allows auditors to recognize when the same complementary content appears on multiple pages.",
            'who': "Screen reader users who navigate by landmarks to find supporting content, users with cognitive disabilities who benefit from clear content organization and separation of main vs. supplementary information",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Verify the aside contains truly complementary content (related to but separate from main content). If multiple complementary regions exist on the page, ensure each has a unique accessible name using aria-label or aria-labelledby. Test with screen reader to confirm the region is announced correctly and its purpose is clear."
        },
        'DiscoSectionFound': {
            'title': "Section region detected (signature: {sectionSignature}) - requires manual accessibility review",
            'what': "A section region has been detected on this page. {sectionLabel_description} Signature {sectionSignature} allows tracking this same section across different pages.",
            'why': "Section elements with accessible names become region landmarks. They must have meaningful, unique labels to help screen reader users navigate between distinct areas of content. Sections without accessible names are not landmarks and won't appear in landmark navigation. The signature allows auditors to recognize when the same section structure appears on multiple pages.",
            'who': "Screen reader users who navigate by landmarks to jump between major page sections, users with cognitive disabilities who benefit from clearly labeled and organized content regions",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Verify each section has a descriptive, unique accessible name (aria-label or aria-labelledby) that clearly identifies its purpose. Ensure the label is concise and meaningful. If the section doesn't represent a significant region of content, consider if it should be a landmark at all. Test with screen reader to confirm the region is announced with its label."
        },
        'DiscoHeaderFound': {
            'title': "Banner region detected (signature: {headerSignature}) - requires manual accessibility review",
            'what': "A banner landmark (<header> at top level or role=\"banner\") has been detected on this page. {headerLabel_description} Signature {headerSignature} allows tracking this same banner across different pages.",
            'why': "Banner landmarks identify the main header of the page, typically containing site logo, main navigation, and site-wide utilities. There should be only one banner per page. It must be properly labeled if the site identity isn't obvious, and should not be nested inside other landmarks. The signature allows auditors to recognize when the same banner appears on multiple pages.",
            'who': "Screen reader users who navigate by landmarks to quickly access site-wide navigation and branding, keyboard users who use landmarks for efficient page navigation, users with cognitive disabilities who rely on consistent banner placement for orientation",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Verify there is only one banner landmark per page. Ensure the banner contains site-level content (logo, main nav, site utilities) rather than page-specific content. If multiple headers exist, ensure only the site-level one is a banner. Test with screen reader to confirm banner is announced correctly."
        },
        'DiscoFooterFound': {
            'title': "Contentinfo region detected (signature: {footerSignature}) - requires manual accessibility review",
            'what': "A contentinfo landmark (<footer> at top level or role=\"contentinfo\") has been detected on this page. {footerLabel_description} Signature {footerSignature} allows tracking this same footer across different pages.",
            'why': "Contentinfo landmarks identify site-wide footer information such as copyright, privacy policy, and contact links. There should be only one contentinfo per page. It must contain site-level information rather than page-specific footers, and should not be nested inside other landmarks. The signature allows auditors to recognize when the same footer appears on multiple pages.",
            'who': "Screen reader users who navigate by landmarks to quickly access site-wide footer information and legal links, keyboard users who use landmarks for efficient page navigation, users with cognitive disabilities who rely on consistent footer placement for finding important site information",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Verify there is only one contentinfo landmark per page. Ensure the footer contains site-level information (copyright, privacy, contact) rather than article-specific or section-specific footers. If multiple footers exist, ensure only the site-level one is contentinfo. Test with screen reader to confirm contentinfo is announced correctly."
        },
        'DiscoSearchFound': {
            'title': "Search region detected (signature: {searchSignature}) - requires manual accessibility review",
            'what': "A search landmark (<search> or role=\"search\") has been detected on this page. {searchLabel_description} Signature {searchSignature} allows tracking this same search region across different pages.",
            'why': "Search landmarks identify search functionality on the page. They help screen reader users quickly locate search features. The search region must have a clear accessible name if multiple search regions exist, contain appropriate search form controls, and be easily discoverable through landmark navigation. The signature allows auditors to recognize when the same search region appears on multiple pages.",
            'who': "Screen reader users who navigate by landmarks to quickly find search functionality, keyboard users who use landmarks for efficient page navigation, users with cognitive disabilities who benefit from clearly marked search areas",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Verify the search region contains actual search functionality (typically a form with input and submit button). If multiple search regions exist, ensure each has a unique accessible name using aria-label or aria-labelledby. Ensure search form controls are properly labeled and keyboard accessible. Test with screen reader to confirm search region is announced correctly and search controls are accessible."
        },
        'DiscoFoundSvgImage': {
            'title': "SVG element with role=\"img\" detected that requires manual review to verify appropriate text alternatives are provided",
            'what': "SVG element with role=\"img\" detected that requires manual review to verify appropriate text alternatives are provided",
            'why': "SVG elements with role=\"img\" are explicitly marked as images and treated as a single graphic by assistive technologies, requiring appropriate text alternatives. While the role=\"img\" indicates developer awareness of accessibility needs, manual review is needed to verify that any aria-label, aria-labelledby, or internal <title> elements adequately describe the image\'s content or function, and that the description is appropriate for the SVG\'s context and purpose.",
            'who': "Blind and low vision users using screen readers who depend on text alternatives to understand image content, users with cognitive disabilities who benefit from clear, concise descriptions of visual information, keyboard users who may encounter the SVG in their navigation flow, and users of assistive technologies that treat role=\"img\" SVGs as atomic image elements",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.1.1'],
            'remediation': "Verify the SVG with role=\"img\" has appropriate accessible names through aria-label or aria-labelledby attributes, ensure any <title> or <desc> elements inside the SVG are properly referenced if used for labeling, confirm decorative SVGs are hidden with aria-hidden=\"true\" rather than given role=\"img\", check that the text alternative accurately describes the SVG\'s meaning in context, and test with screen readers to ensure the image is announced with meaningful information"
        },
        'DiscoHeadingWithID': {
            'title': "Heading element has an ID attribute that may be used for in-page navigation",
            'what': "Heading element has an ID attribute that may be used for in-page navigation",
            'why': "Headings with IDs are often link targets for navigation, requiring verification that they work correctly and provide meaningful navigation points.",
            'who': "All users who use in-page navigation links, screen reader users who navigate by headings, keyboard users who follow fragment links.",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.3.1'],
            'remediation': "Verify the heading ID is referenced by navigation links, ensure the ID is descriptive and stable, check that the heading text provides clear navigation context."
        },
        'DiscoPDFLinksFound': {
            'title': "Links to PDF documents detected on page",
            'what': "Links to PDF documents detected on page",
            'why': "PDF documents often have accessibility issues and may not be accessible to all users",
            'who': "Screen reader users, users with disabilities who have difficulty with PDF formats",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.1.1', '1.3.1', '2.1.1', '2.4.1'],
            'remediation': "Ensure PDFs are accessible (tagged, structured, with text content) or provide HTML alternatives"
        },
        'DiscoStyleAttrOnElements': {
            'title': "Inline styles detected",
            'what': "Inline styles detected",
            'why': "May affect responsive design and user customization",
            'who': "Users with custom stylesheets",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Consider moving to CSS classes"
        },
        'DiscoStyleElementOnPage': {
            'title': "Style element found in page",
            'what': "Style element found in page",
            'why': "Embedded styles harder to override",
            'who': "Users needing custom styles",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Consider external stylesheets"
        },
        'DiscoResponsiveBreakpoints': {
            'title': "Responsive breakpoints detected on page",
            'what': "Page defines {breakpointCount} responsive breakpoint{breakpointCount_plural} in CSS media queries: {breakpoints}. Breakpoints range from {minBreakpoint}px to {maxBreakpoint}px.",
            'why': "Responsive breakpoints indicate that the page layout changes at different viewport widths. This is important for accessibility testing because interactive elements, navigation menus, and content visibility may change at different breakpoints. Some accessibility issues (such as content obscuring, focus order, or touch target sizes) may only appear at specific viewport widths. Testing at multiple breakpoints ensures that keyboard navigation, screen reader landmarks, and interactive controls work correctly across all responsive layouts. Mobile-specific layouts often have collapsible menus, different navigation patterns, or alternative content presentation that requires separate accessibility verification.",
            'who': "Mobile device users who view pages at small viewport widths, tablet users at medium breakpoints, users who zoom content which changes the effective viewport, users with screen readers who need consistent landmark navigation across breakpoints, keyboard users who need predictable focus order at all viewport sizes, and touch device users who need adequate target sizes in mobile layouts",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.4.10', '2.4.3'],
            'remediation': "Test accessibility at each defined breakpoint. Verify that keyboard navigation order remains logical, all interactive elements remain accessible, focus indicators are visible, landmark regions are properly labeled, touch targets meet minimum size requirements (44x44px), and content that appears/disappears at different breakpoints doesn't create keyboard traps or break screen reader navigation. Use browser developer tools or page.setViewport() to test at: {breakpoints}px. Pay special attention to navigation menus that collapse into hamburger menus, content that reflows vertically, and any interactive elements that change position or visibility."
        },
        'ErrAltOnElementThatDoesntTakeIt': {
            'title': "Alt attribute placed on HTML elements that don\'t support it (such as div, span, p, or other non-image elements), making the alternative text inaccessible to assistive technologies",
            'what': "Alt attribute placed on HTML elements that don\'t support it (such as div, span, p, or other non-image elements), making the alternative text inaccessible to assistive technologies",
            'why': "The alt attribute is only valid on specific elements (<img>, <area>, <input type=\"image\">) and is ignored when placed on other elements. Screen readers will not announce this misplaced alt text, meaning any important information it contains is completely lost to users who rely on assistive technologies. This often occurs when developers attempt to add accessibility features but use incorrect techniques.",
            'who': "Blind and low vision users using screen readers who cannot access the alternative text content placed in invalid locations, users with cognitive disabilities who may be missing explanatory text, keyboard users who may not receive important contextual information, and users of assistive technologies that rely on proper semantic HTML markup",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.1.1'],
            'remediation': "Remove alt attributes from non-supporting elements and use appropriate alternatives - for background images in CSS use role=\"img\" with aria-label, for clickable elements use aria-label or visually hidden text, for decorative elements ensure they\'re properly hidden with aria-hidden=\"true\", and verify that actual <img> elements are used for content images that need alternative text"
        },
        'ErrAltTooLong': {
            'title': "Alt text exceeds 150 characters without proper structure, making it difficult for screen reader users to process",
            'what': "Alt text exceeds 150 characters without proper structure, making it difficult for screen reader users to process",
            'why': "This fails WCAG 5.2.4 Accessibility Supported because even though the page technically meets WCAG success criteria by providing alt text, it does not work properly with assistive technology (screen readers). Screen readers read alt text as a continuous unstructured string without the ability to navigate, skim, or use reading commands that work with properly structured HTML. Long alt text removes screen reader users' ability to use headings navigation, paragraph jumps, list navigation, and other assistive technology features that sighted users take for granted when reading long descriptions. The content may be technically present but is not accessibility-supported because it cannot be effectively used with the user's assistive technology.",
            'who': "Screen reader users who must listen to lengthy unstructured descriptions without visual scanning or paragraph breaks, users with cognitive disabilities who struggle with processing long blocks of text without structure, users with attention difficulties who need clear information hierarchy, users with memory challenges who cannot retain long unbroken text passages",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['5.2.4'],
            'remediation': "Limit alt text to 150 characters maximum for concise descriptions. For complex images requiring longer descriptions, use proper structured alternatives: use longdesc attribute or aria-describedby pointing to structured HTML content with headings, paragraphs, lists, and emphasis. Provide detailed descriptions in adjacent visible text content with proper semantic markup. Consider using figure/figcaption for images with captions. Never use alt text as a substitute for properly structured documentation - alt text should be brief, with complex details provided through accessible structured content."
        },
        'ErrAriaLabelMayNotBeFoundByVoiceControl': {
            'title': "aria-label doesn\'t match visible text",
            'what': "aria-label doesn\'t match visible text",
            'why': "Voice control users can\'t activate element",
            'who': "Voice control users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3'],
            'remediation': "Ensure aria-label includes visible text"
        },
        'ErrAutoStartTimers': {
            'title': "Timer starts automatically without user control to pause or stop",
            'what': "Timer starts automatically without user control to pause or stop",
            'why': "Auto-starting timers can create stress and barriers for users who need more time to complete tasks or read content.",
            'who': "Users with cognitive disabilities, users with reading disabilities, users with motor impairments who need more time, screen reader users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.2.2'],
            'remediation': "Provide controls to pause, stop, or extend time limits, avoid auto-starting timers unless essential, allow users to control timing of content updates."
        },
        'ErrBannerLandmarkAccessibleNameIsBlank': {
            'title': "Banner landmark has blank accessible name",
            'what': "Banner landmark has blank accessible name",
            'why': "Multiple banners need labels to distinguish them",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add aria-label or aria-labelledby"
        },
        'ErrBannerLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Banner landmark has both aria-label and aria-labelledby",
            'what': "Banner landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrBannerLandmarkMayNotBeChildOfAnotherLandmark': {
            'title': "Banner landmark nested inside another landmark",
            'what': "Banner landmark nested inside another landmark",
            'why': "Invalid nesting breaks page structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move banner to top level"
        },
        'ErrButtonOutlineNoneNoBoxShadow': {
            'title': "Button has outline:none without box-shadow, relying only on color",
            'what': "Button removes focus outline without providing a box-shadow alternative, relying solely on color change which fails WCAG 1.4.1 Use of Color",
            'why': "Relying solely on color change for focus indication fails WCAG 1.4.1 Use of Color. Users with color blindness (affecting 8% of males), low vision, or monochrome displays cannot perceive focus state. A structural indicator like box-shadow or outline is required to provide a non-color visual cue that wraps the element.",
            'who': "Users with color blindness, users with low vision, users on monochrome displays, keyboard navigation users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.1'],
            'remediation': "Add a box-shadow focus indicator (e.g., box-shadow: 0 0 0 3px rgba(0,102,204,0.5)) or use an outline with outline-offset of at least 2px. Do not rely on color change alone. Best practice: button:focus { outline: 2px solid #0066cc; outline-offset: 2px; }"
        },
        'ErrButtonFocusContrastFail': {
            'title': "Button focus outline has insufficient contrast",
            'what': "Button focus outline has less than 3:1 contrast ratio against the button's current background color",
            'why': "Focus indicators must have at least 3:1 contrast ratio against adjacent colors per WCAG 1.4.11 Non-text Contrast. Without sufficient contrast, keyboard users cannot see which button has focus, making the interface unusable for keyboard navigation. This is especially problematic for users with low vision or in bright lighting conditions.",
            'who': "Users with low vision, users with color vision deficiencies, keyboard navigation users, users in bright lighting conditions",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Choose an outline color with at least 3:1 contrast against the button background. Test against all button states (default, hover, active, disabled). Consider using a high-contrast color like dark blue (#0066cc) on light buttons or white (#ffffff) on dark buttons. Use contrast checking tools to verify compliance."
        },
        'ErrButtonOutlineWidthInsufficient': {
            'title': "Button focus outline is too thin (less than 2px)",
            'what': "Button focus outline has outline-width less than 2px, making it too thin to be clearly visible",
            'why': "Focus indicators must be thick enough to be clearly visible to keyboard users. Outlines thinner than 2px can be difficult or impossible to see, especially for users with low vision or on high-resolution displays. WCAG 2.4.11 Focus Appearance (Level AAA) requires focus indicators to be at least 2 CSS pixels thick around the entire perimeter of the component.",
            'who': "Keyboard navigation users, users with low vision, users on high-DPI displays, users with cognitive disabilities",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '2.4.11'],
            'remediation': "Set outline-width to at least 2px (e.g., outline: 2px solid #0066cc). For better visibility, consider 3px width. Test on various screen sizes and resolutions to ensure visibility. Example: button:focus { outline: 3px solid #0066cc; outline-offset: 2px; }"
        },
        'ErrButtonOutlineOffsetInsufficient': {
            'title': "Button focus outline-offset is too small (less than 2px)",
            'what': "Button focus outline has outline-offset less than 2px, causing the outline to be lost within or too close to the button element",
            'why': "When outline-offset is 0px or negative, the focus outline can overlap the button's border or background, making it difficult to distinguish from the button itself. On buttons with matching or similar colors between the outline and button background/border, the outline becomes invisible or barely perceptible. The outline can blend into colored buttons, defeating its purpose as a focus indicator. A minimum 2px offset ensures clear visual separation between the button and its focus indicator.",
            'who': "Keyboard navigation users, users with low vision, users with cognitive disabilities who rely on clear visual cues",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Set outline-offset to at least 2px (e.g., outline-offset: 2px) to create clear space between the button and its focus indicator. This ensures the outline is visible regardless of button styling. Example: button:focus { outline: 2px solid #0066cc; outline-offset: 2px; }"
        },
        'ErrButtonFocusObscured': {
            'title': "Button focus indicator is obscured by other elements",
            'what': "Button focus indicator is partially or fully hidden behind other elements due to z-index stacking context issues",
            'why': "If the focus indicator is hidden behind other elements, keyboard users cannot see which button has focus. This completely breaks keyboard navigation and makes the interface unusable for non-mouse users. Common causes include sticky headers, overlays, or improperly managed z-index values in complex layouts.",
            'who': "Keyboard navigation users, screen magnifier users, users with motor disabilities, power users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Review z-index values and stacking contexts throughout your layout. Ensure focused buttons have appropriate z-index to keep focus indicators visible above other content. Use CSS isolation property or adjust parent stacking contexts if needed. Test with actual keyboard navigation (Tab key) to verify visibility. Consider: button:focus { position: relative; z-index: 1; }"
        },
        'WarnButtonOutlineNoneWithBoxShadow': {
            'title': "Button uses box-shadow instead of outline for focus",
            'what': "Button uses outline:none with box-shadow for focus indication, which may not provide clear indication on all sides of the button",
            'why': "While box-shadow provides a focus indicator, it may not be visible on all sides of the button depending on shadow direction, spread, and blur. A clear outline on all four sides is preferred for maximum clarity. Box-shadow can also be harder to see in certain contexts, such as on patterned backgrounds or with certain button shapes.",
            'who': "Keyboard navigation users, users with low vision, users with cognitive disabilities",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7'],
            'remediation': "Replace box-shadow with outline and outline-offset for clearer focus indication. Example: button:focus { outline: 2px solid #0066cc; outline-offset: 2px; box-shadow: none; }. If you must use box-shadow, ensure it has no blur and surrounds the entire element: box-shadow: 0 0 0 3px #0066cc;"
        },
        'WarnButtonDefaultFocus': {
            'title': "Button uses browser default focus outline",
            'what': "Button relies on browser default focus outline which may not meet contrast requirements on all backgrounds and varies across browsers",
            'why': "Browser default outlines (typically thin blue or dotted lines) often fail to meet 3:1 contrast requirements depending on the background. Different browsers use different default styles, leading to inconsistent and potentially inaccessible experiences. In Chrome, the default is a thin blue outline; in Firefox, it's a dotted outline; in Safari, it's a blue glow. None are guaranteed to meet WCAG standards.",
            'who': "Keyboard navigation users, users with low vision, users on different browsers and operating systems",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7'],
            'remediation': "Define explicit focus styles with outline and outline-offset that meet 3:1 contrast ratio against your button's background. Example: button:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Test across different browsers and backgrounds. Consider using :focus-visible to only show focus for keyboard users."
        },
        'WarnButtonFocusGradientBackground': {
            'title': "Button with gradient background has focus outline - contrast cannot be verified",
            'what': "Button with CSS gradient background has a focus outline, but contrast cannot be automatically calculated against the varying gradient colors",
            'why': "CSS gradients have varying colors across the button, making it impossible to programmatically verify that the focus outline meets 3:1 contrast against all parts of the gradient. The outline may meet contrast at some points but fail at others. Gradients can transition from light to dark, potentially making parts of the outline invisible.",
            'who': "Keyboard navigation users, users with low vision, users with color vision deficiencies",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Manually verify focus outline has at least 3:1 contrast against the lightest AND darkest colors in the gradient using a tool like WebAIM Contrast Checker. Consider using a solid background color instead, or add outline-offset to separate the outline from the gradient. Alternative: use a multi-color outline or add an inner shadow for better visibility."
        },
        'WarnButtonFocusImageBackground': {
            'title': "Button with image background has focus outline - contrast cannot be verified",
            'what': "Button with background-image has a focus outline, but contrast cannot be automatically verified against the varying colors and patterns in the image",
            'why': "Background images have varying colors and patterns, making it impossible to programmatically verify focus outline contrast. The outline may be invisible against certain parts of the image, creating unusable focus indicators for keyboard users. This is especially problematic with photographs or complex patterns where contrast can vary dramatically.",
            'who': "Keyboard navigation users, users with low vision, users with color vision deficiencies",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Manually test focus visibility against all parts of the background image with real users. Best solution: avoid background images on focusable buttons. If you must use them, add a semi-transparent overlay (background: linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url(image.jpg)), use large outline-offset (4px+), or add both outline and box-shadow for maximum visibility."
        },
        'WarnButtonFocusParentGradientBackground': {
            'title': "Button outline sits against parent gradient background - contrast cannot be verified",
            'what': "Button has positive outline-offset causing the focus outline to sit outside the button against a parent/container with gradient background. Contrast cannot be automatically verified against varying gradient colors.",
            'why': "Since outline-offset is positive (>0), the focus outline is rendered outside the button's boundary and sits against the parent container's background. When the parent has a CSS gradient, the outline contrast varies across different parts of the gradient, making it impossible to programmatically verify that the outline meets 3:1 contrast against all gradient colors. The outline may be visible against some gradient colors but invisible against others.",
            'who': "Keyboard navigation users, users with low vision, users with color vision deficiencies",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Manually verify focus outline has at least 3:1 contrast against BOTH the lightest AND darkest colors in the parent's gradient using WebAIM Contrast Checker. Options: 1) Use solid parent background color, 2) Set outline-offset to 0 so outline sits on button border instead of parent, 3) Use a contrasting outline color that works against full gradient range (e.g., white outline on dark-to-medium gradient), 4) Add box-shadow in addition to outline for better visibility."
        },
        'WarnButtonFocusParentImageBackground': {
            'title': "Button outline sits against parent image background - contrast cannot be verified",
            'what': "Button has positive outline-offset causing the focus outline to sit outside the button against a parent/container with background image. Contrast cannot be automatically verified against the varying colors and patterns in the image.",
            'why': "Since outline-offset is positive (>0), the focus outline is rendered outside the button's boundary and sits against the parent container's background. When the parent has a background image with varying colors and patterns, it's impossible to programmatically verify that the outline maintains sufficient contrast across all parts of the image. The outline may be completely invisible against certain image areas, creating an unusable focus indicator.",
            'who': "Keyboard navigation users, users with low vision, users with color vision deficiencies",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Manually test focus visibility against all parts of the parent's background image. Best solutions: 1) Avoid background images on containers with focusable elements, 2) Set outline-offset to 0 so outline sits on button border, 3) Add solid-color overlay to parent (background: linear-gradient(rgba(0,0,0,0.7), rgba(0,0,0,0.7)), url(image.jpg)), 4) Use high-contrast outline color (white or black) that works against most image colors, 5) Add both outline and box-shadow for redundancy."
        },
        'WarnButtonFocusZIndexFloating': {
            'title': "Button has z-index and may float over varying backgrounds - contrast cannot be verified",
            'what': "Button or its outline uses z-index positioning, causing it to float above the normal document flow. The element may overlap different backgrounds depending on viewport and scroll position, making automatic contrast verification impossible.",
            'why': "Elements with z-index create a new stacking context and can float over any content on the page. The focus outline may sit against different backgrounds depending on where the button is positioned, what's scrolled beneath it, or what content dynamically appears below it. Since the background can vary, we cannot programmatically verify that the outline maintains 3:1 contrast in all scenarios. Modal dialogs, sticky headers, dropdown menus, and tooltips commonly use z-index.",
            'who': "Keyboard navigation users, users with low vision, users with color vision deficiencies",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Manually test focus visibility in all contexts where the button can appear: 1) Test against different page backgrounds the button may float over, 2) Use high-contrast outline colors (white with black shadow, or vice versa) that work against both light and dark backgrounds, 3) Consider using both outline AND box-shadow for redundancy: button:focus { outline: 2px solid white; box-shadow: 0 0 0 4px black; }, 4) For modal dialogs, ensure semi-transparent backdrop provides consistent background, 5) Test at different scroll positions and viewport sizes."
        },
        'WarnButtonFocusParentZIndexFloating': {
            'title': "Button outline sits outside button against parent with z-index - contrast cannot be verified",
            'what': "Button has positive outline-offset causing the focus outline to sit outside the button against a parent container that uses z-index positioning. The parent may float over varying backgrounds, making automatic contrast verification impossible.",
            'why': "Since outline-offset is positive (>0), the outline sits outside the button against the parent's background. When the parent has z-index, it creates a stacking context and may float over any page content. The parent's background may appear over different underlying content depending on scroll position, viewport size, or dynamic content changes. This makes it impossible to programmatically determine what the outline actually contrasts against in all scenarios.",
            'who': "Keyboard navigation users, users with low vision, users with color vision deficiencies",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Manually test focus visibility in all contexts: 1) Test button focus at different scroll positions and viewport sizes, 2) If parent is a modal/dialog, ensure it has an opaque background or semi-transparent backdrop, 3) Set outline-offset to 0 so outline sits on button border instead of parent, 4) Use high-contrast outline that works against both the parent background AND any content the parent may float over, 5) Consider: button:focus { outline: 3px solid white; box-shadow: 0 0 0 5px black; outline-offset: 0; }"
        },
        'WarnButtonFocusOutlineExceedsParent': {
            'title': "Button focus outline extends beyond parent container - cannot verify contrast outside parent bounds",
            'what': "Button has a focus outline with outline-offset and outline-width values that, when combined, cause the outline to extend beyond the boundaries of its parent container. Since the outline sits against the parent's background, but extends past the parent's edges, we cannot determine what background the extended portion of the outline sits against.",
            'why': "When outline-offset is positive, the outline sits outside the button against the parent container's background. The total extent of the outline is outline-offset + outline-width. If this total exceeds the distance from the button edge to the parent edge on any side, the outline extends past the parent boundary into whatever content lies beyond. The outline may sit against varying backgrounds outside the parent (page background, sibling elements, grandparent containers, etc.), making automatic contrast verification impossible. CSS outline-offset has no maximum limit, so extremely large values (e.g., outline-offset: 50px) can easily exceed typical parent padding and margins.",
            'who': "Keyboard navigation users, users with low vision, users with color vision deficiencies who need sufficient contrast between focus indicators and backgrounds",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Manually test the focus outline visibility against all backgrounds it may appear against outside the parent container. Solutions: 1) Reduce outline-offset and/or outline-width so outline stays within parent bounds (ensure parent has sufficient padding), 2) Increase parent padding to contain the full outline extent, 3) Set outline-offset to 0 and use box-shadow for spacing: button:focus { outline: 3px solid blue; outline-offset: 0; box-shadow: 0 0 0 2px white; }, 4) Use a high-contrast outline color (e.g., white with black box-shadow or vice versa) that works against any background: button:focus { outline: 2px solid white; box-shadow: 0 0 0 4px black; }"
        },
        'ErrButtonTextLowContrast': {
            'title': "Button text has insufficient color contrast with button background",
            'what': "Button text has insufficient color contrast with button background",
            'why': "Users with low vision, color blindness, or viewing the page in bright sunlight may not be able to read button labels if contrast is insufficient. This prevents users from understanding button purpose and can make critical functions inaccessible. Buttons are action triggers, so being unable to read them can prevent task completion.",
            'who': "Users with low vision, color blindness, age-related vision changes, and anyone viewing content in poor lighting conditions or on low-quality displays",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3'],
            'remediation': "Ensure button text has at least 4.5:1 contrast ratio with the button background for normal text, or 3:1 for large text (18pt or 14pt bold). For Level AAA compliance, use 7:1 for normal text. Test in different states (hover, focus, active) as contrast requirements apply to all states. Avoid using color alone to indicate button state."
        },
        'ErrButtonClipPathWithOutline': {
            'title': "Button with non-rectangular clip-path uses outline for focus indicator - outline draws rectangular box not following clipped shape",
            'what': "Button uses CSS clip-path to create a non-rectangular shape (circle, polygon, custom path) and relies on outline for focus indication, but outline always draws a rectangular box that doesn't follow the clipped button shape, creating visual confusion",
            'why': "CSS outline property always draws a rectangular box following the element's bounding box, completely ignoring clip-path shapes. When a button is clipped to a circle, triangle, or custom shape, the focus outline still appears as a rectangle around where the button would be without clipping. This creates a disconnected, confusing visual where the outline doesn't match the actual button shape users see and interact with. The mismatch between perceived button shape and focus indicator shape makes it harder for keyboard users to understand what element has focus, especially when multiple clipped elements are nearby. The rectangular outline may also overlap adjacent content unexpectedly since it extends beyond the clipped visible shape.",
            'who': "Keyboard navigation users who rely on focus indicators to track their position, users with attention difficulties who need clear visual feedback about interactive element boundaries, users with low vision who may see only the outline or only the button shape but not both clearly, users with cognitive disabilities who are confused by visual mismatches between element shape and focus indicator shape, and designers trying to create modern custom-shaped buttons while maintaining accessibility",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "For buttons with clip-path, use box-shadow instead of outline for focus indicators. Box-shadow respects clip-path and will follow the custom shape. Example: button:focus { outline: none; box-shadow: 0 0 0 3px #0066cc; }. For complex shapes, consider using drop-shadow filter which also respects clipping: button:focus { filter: drop-shadow(0 0 3px #0066cc); }. Ensure the shadow has sufficient thickness (at least 2-3px) and contrast (at least 3:1) against adjacent colors. Test keyboard navigation to verify the focus indicator clearly identifies the button's actual interactive area. Alternative: add a visible border within the button shape using inset box-shadow or a pseudo-element."
        },
        'ErrButtonSingleSideBoxShadow': {
            'title': "Button uses outline:none with box-shadow that only appears on one side (directional shadow with offset)",
            'what': "Button removes the default outline (outline:none) and provides a box-shadow for focus indication, but the shadow has directional offset (non-zero x or y values), causing it to appear only on one or two sides of the button rather than surrounding it completely",
            'why': "Focus indicators must be clearly perceivable on all sides of an element to properly communicate which element has focus. A shadow that only appears on the bottom or right side of a button can be easily missed, especially by users who are only looking at part of the button, have zoomed in, or have reduced peripheral vision. The shadow may appear to be a drop shadow effect rather than a focus indicator, causing confusion about which element actually has keyboard focus. Users may not realize the button is focused if the shadow falls in an area they're not looking at or if adjacent elements make the single-sided shadow blend in with general page styling.",
            'who': "Keyboard users who need clear focus indication to track their position on the page, users with low vision or using magnification who may only see part of the button, users with attention difficulties who need unambiguous focus indicators, users with cognitive disabilities who might interpret directional shadows as decorative styling rather than focus indication, and users with reduced peripheral vision who may miss single-sided indicators",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Modify the box-shadow to have zero offset and surround the entire button: button:focus { box-shadow: 0 0 0 3px #0066cc; }. The box-shadow syntax (0 0 0 3px) means: 0 horizontal offset, 0 vertical offset, 0 blur radius, 3px spread radius - creating a solid border-like effect on all sides. Better yet, use outline with outline-offset instead: button:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. If you need the shadow for aesthetic reasons, combine both: keep the directional shadow for style but add a zero-offset shadow or outline specifically for accessibility. Ensure the focus indicator has at least 3:1 contrast ratio against adjacent colors."
        },
        'ErrButtonNoVisibleFocusRelyingOnColorOnly': {
            'title': "Button has no visible focus indicator (outline or box-shadow) and relies only on color change",
            'what': "Button removes the focus outline (outline:none) and provides no box-shadow alternative, relying solely on color change for focus indication which violates WCAG 1.4.1 Use of Color",
            'why': "Relying solely on color change for focus indication fails WCAG 1.4.1 Use of Color and 2.4.7 Focus Visible. Users with color blindness (affecting 8% of males), low vision, or monochrome displays cannot perceive focus state. A structural indicator like box-shadow or outline is required to provide a non-color visual cue that clearly identifies the focused element. Without a structural focus indicator, keyboard users cannot reliably determine which element has focus, making keyboard navigation unusable.",
            'who': "Users with color blindness, users with low vision, users on monochrome displays, keyboard navigation users, users with reduced contrast perception",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.1'],
            'remediation': "Add a box-shadow focus indicator (e.g., box-shadow: 0 0 0 3px rgba(0,102,204,0.5)) or use an outline with outline-offset of at least 2px. Do not rely on color change alone. Best practice: button:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. The focus indicator must be perceivable independent of color."
        },
        'ErrButtonNoVisibleFocus': {
            'title': "Button has no visible focus indicator at all",
            'what': "Button removes the focus outline (outline:none) and provides no alternative focus indicator (no box-shadow, no outline, no color change)",
            'why': "Buttons must have a clearly visible focus indicator per WCAG 2.4.7 Focus Visible. Without any focus indicator, keyboard users cannot determine which button has focus, making keyboard navigation completely unusable. This is a critical accessibility failure that prevents users who rely on keyboards or assistive technologies from using the interface. The focus indicator is essential for users to understand where they are on the page and what element will be activated if they press Enter or Space.",
            'who': "Keyboard navigation users, screen reader users, users with motor disabilities who cannot use a mouse, users with low vision, switch device users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Add a clear focus indicator using outline and outline-offset (recommended) or box-shadow. Best practice: button:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Alternative using box-shadow: button:focus { box-shadow: 0 0 0 3px #0066cc; }. Ensure the indicator has at least 3:1 contrast against adjacent colors per WCAG 1.4.11."
        },
        'ErrButtonTransparentOutline': {
            'title': "Button focus outline uses semi-transparent color (alpha < 0.5) which cannot guarantee sufficient visibility",
            'what': "Button focus outline uses a color with semi-transparent alpha channel (opacity less than 0.5 in rgba or hsla), making it impossible to guarantee the outline meets WCAG 3:1 contrast requirement against all possible background colors",
            'why': "Semi-transparent outlines change appearance depending on what's behind them. An outline might look fine against one background but become nearly invisible against others. With alpha less than 0.5, even a bright blue outline can become too faint to see against certain backgrounds. Automated testing cannot verify contrast with transparent colors because the final rendered color depends on the entire stack of background colors and images beneath the element. This means the focus indicator may work in testing but fail for users when the button appears over different backgrounds, in overlays, or when page content changes. Accessibility requires confidence that focus indicators work in all contexts, which transparent colors cannot provide.",
            'who': "Keyboard users who rely on focus indicators to track navigation position, users with low vision who need high-contrast focus indicators, users with color vision deficiencies who might not perceive subtle transparent indicators, users viewing content in bright environments where low-opacity indicators wash out, and quality assurance teams who cannot reliably test transparent focus indicators across all scenarios",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Use fully opaque colors (alpha = 1.0) for focus outlines to ensure consistent visibility: button:focus { outline: 2px solid rgb(0, 102, 204); } or button:focus { outline: 2px solid #0066cc; }. Choose outline colors with at least 3:1 contrast against your button backgrounds and adjacent colors. If you must use transparency for aesthetic reasons, ensure alpha is at least 0.8 and manually verify contrast in all contexts where the button appears. Better approach: use solid colors that have been tested and verified to meet contrast requirements. For complex layouts, consider using a two-color outline (outline plus box-shadow in contrasting colors) to ensure visibility against varying backgrounds."
        },
        'ErrColorStyleDefinedExplicitlyInElement': {
            'title': "Color-related styles defined inline on element using style attribute",
            'what': "Element uses inline style attribute to define color-related CSS properties (color, background-color, border-color, etc.) directly on the HTML element rather than in a stylesheet",
            'why': "Inline color styles cannot be easily overridden by user stylesheets or browser extensions that people with disabilities rely on to customize content for their needs. Users with low vision often use high contrast modes, custom color schemes, or forced colors mode (Windows High Contrast) to make content readable - inline styles can block these essential adaptations. Inline styles also make it harder to maintain consistent color schemes across a website, increasing the risk of contrast failures and color accessibility issues. When colors are scattered throughout HTML rather than centralized in CSS, fixing contrast problems or updating brand colors becomes error-prone and time-consuming.",
            'who': "Users with low vision who need custom color schemes or high contrast modes, users with color blindness who use browser extensions to adjust colors, users with photosensitivity who need to reduce bright colors, users with cognitive disabilities who benefit from consistent color patterns, and users of Windows High Contrast Mode who need system colors to be respected",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8', '1.4.3'],
            'remediation': "Move all color-related inline styles to CSS classes in external stylesheets. Create semantic class names that reflect the element's purpose (e.g., class=\"primary-button\", class=\"warning-message\") rather than its appearance. Define colors centrally in CSS variables or preprocessor variables for easy maintenance and updates. Ensure all color definitions meet WCAG contrast requirements (4.5:1 for normal text, 3:1 for large text). Never use style=\"color:...\" or style=\"background-color:...\" except for user-generated content where you have no control. Test your site with Windows High Contrast Mode and forced colors mode to ensure colors can be properly overridden when needed."
        },
        'ErrColorStyleDefinedExplicitlyInStyleTag': {
            'title': "Color-related styles defined in embedded <style> tag rather than external stylesheet",
            'what': "Page includes color-related CSS properties (color, background-color, border-color, etc.) defined within <style> tags in the HTML document rather than in external linked stylesheets",
            'why': "While not as problematic as inline styles, embedded <style> blocks make color management more difficult and create inconsistency across multi-page websites. Colors defined in embedded styles cannot be cached by browsers, forcing users to download color definitions repeatedly on every page. This particularly affects users on slow connections or limited data plans. Embedded color styles also make it harder to implement site-wide color updates or fix contrast issues systematically. When colors are scattered across multiple HTML files rather than centralized in a single stylesheet, maintaining WCAG contrast compliance becomes error-prone. Users relying on browser extensions or custom stylesheets to override colors may find embedded styles harder to override than external stylesheets due to specificity issues and loading order.",
            'who': "Users with low vision who need consistent, customizable color schemes across all pages, users with limited bandwidth who suffer from repeated downloads of uncached styles, users with color blindness or photosensitivity using browser extensions to modify colors, users with cognitive disabilities who benefit from consistent visual presentation across all pages, developers maintaining color contrast compliance across large websites, and users of assistive technology that reads or modifies page styles",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8', '1.4.3'],
            'remediation': "Move all color definitions from <style> tags to external CSS files loaded via <link rel=\"stylesheet\"> elements. Create a centralized color system using CSS custom properties (variables) for consistency and easy updates. Group related color definitions in external files that can be cached and reused across pages. Keep <style> tags only for critical above-the-fold CSS if you're optimizing initial render time. Ensure all color combinations in your external stylesheets meet WCAG contrast requirements (4.5:1 for normal text, 3:1 for large text and UI components). Use CSS preprocessor variables (Sass/Less) or CSS custom properties to define colors once and reference them throughout your stylesheets. Test color contrast systematically using tools that can scan entire stylesheets rather than manually checking each embedded style block."
        },
        'ErrTextContrast': {
            'title': "Text has insufficient color contrast ratio against its background",
            'what': "Text color does not have sufficient contrast ratio with its background color, failing WCAG requirements: normal text needs 4.5:1 ratio, large text (18pt+ or 14pt+ bold) needs 3:1 ratio",
            'why': "Insufficient color contrast makes text difficult or impossible to read for users with low vision, color blindness, or age-related vision changes. Even users with normal vision struggle with low contrast text in bright sunlight, on low-quality displays, or when fatigued. Text that passes visual inspection for designers with good vision and ideal viewing conditions often fails for a significant portion of the population - approximately 8% of men and 0.5% of women have some form of color blindness, and the majority of people over 60 have reduced contrast sensitivity. Low contrast text causes eye strain, headaches, and cognitive fatigue as users struggle to discern letterforms. In some cases, text becomes completely illegible, preventing access to essential information or functionality.",
            'who': "Users with low vision who need strong contrast to distinguish text from background, users with color blindness (particularly red-green color blindness affecting 8% of men) who cannot distinguish certain color combinations, older users with age-related contrast sensitivity loss, users viewing content in bright sunlight or poor lighting conditions, users with cognitive disabilities who experience reading fatigue from low contrast, users on low-quality displays with poor color reproduction, and users experiencing temporary vision changes from medication or eye conditions",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3', '1.4.6'],
            'remediation': "Increase the contrast ratio between text and background colors to meet WCAG requirements: 4.5:1 minimum for normal-sized text (under 18pt or under 14pt bold), 3:1 minimum for large text (18pt+ or 14pt+ bold). For Level AAA compliance (recommended), use 7:1 for normal text and 4.5:1 for large text. Use contrast checking tools like WebAIM Contrast Checker or browser DevTools to verify ratios. When darkening text, ensure you also check against hover, focus, and active states. Test with real users who have low vision if possible. Consider using slightly heavier font weights to improve readability at minimum contrast ratios. Never rely solely on color to convey information - always supplement with text, patterns, or icons. Avoid light gray text on white backgrounds (a common design trend that often fails contrast requirements). Document your approved color combinations in a design system to prevent future contrast violations."
        },
        'ErrColorRelatedStyleDefinedExplicitlyInElement': {
            'title': "Color-related styles defined inline on element using style attribute",
            'what': "Element uses inline style attribute to define color-related CSS properties (color, background-color, border-color, etc.) directly on the HTML element rather than in a stylesheet",
            'why': "Inline color styles cannot be easily overridden by user stylesheets or browser extensions that people with disabilities rely on to customize content for their needs. Users with low vision often use high contrast modes, custom color schemes, or forced colors mode (Windows High Contrast) to make content readable - inline styles can block these essential adaptations. Inline styles also make it harder to maintain consistent color schemes across a website, increasing the risk of contrast failures and color accessibility issues. When colors are scattered throughout HTML rather than centralized in CSS, fixing contrast problems or updating brand colors becomes error-prone and time-consuming.",
            'who': "Users with low vision who need custom color schemes or high contrast modes, users with color blindness who use browser extensions to adjust colors, users with photosensitivity who need to reduce bright colors, users with cognitive disabilities who benefit from consistent color patterns, and users of Windows High Contrast Mode who need system colors to be respected",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8', '1.4.3'],
            'remediation': "Move all color-related inline styles to CSS classes in external stylesheets. Create semantic class names that reflect the element's purpose (e.g., class=\"primary-button\", class=\"warning-message\") rather than its appearance. Define colors centrally in CSS variables or preprocessor variables for easy maintenance and updates. Ensure all color definitions meet WCAG contrast requirements (4.5:1 for normal text, 3:1 for large text). Never use style=\"color:...\" or style=\"background-color:...\" except for user-generated content where you have no control. Test your site with Windows High Contrast Mode and forced colors mode to ensure colors can be properly overridden when needed."
        },
        'ErrColorRelatedStyleDefinedExplicitlyInStyleTag': {
            'title': "Color-related styles defined in embedded <style> tag rather than external stylesheet",
            'what': "Page includes color-related CSS properties (color, background-color, border-color, etc.) defined within <style> tags in the HTML document rather than in external linked stylesheets",
            'why': "While not as problematic as inline styles, embedded <style> blocks make color management more difficult and create inconsistency across multi-page websites. Colors defined in embedded styles cannot be cached by browsers, forcing users to download color definitions repeatedly on every page. This particularly affects users on slow connections or limited data plans. Embedded color styles also make it harder to implement site-wide color updates or fix contrast issues systematically. When colors are scattered across multiple HTML files rather than centralized in a single stylesheet, maintaining WCAG contrast compliance becomes error-prone. Users relying on browser extensions or custom stylesheets to override colors may find embedded styles harder to override than external stylesheets due to specificity issues and loading order.",
            'who': "Users with low vision who need consistent, customizable color schemes across all pages, users with limited bandwidth who suffer from repeated downloads of uncached styles, users with color blindness or photosensitivity using browser extensions to modify colors, users with cognitive disabilities who benefit from consistent visual presentation across all pages, developers maintaining color contrast compliance across large websites, and users of assistive technology that reads or modifies page styles",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8', '1.4.3'],
            'remediation': "Move all color definitions from <style> tags to external CSS files loaded via <link rel=\"stylesheet\"> elements. Create a centralized color system using CSS custom properties (variables) for consistency and easy updates. Group related color definitions in external files that can be cached and reused across pages. Keep <style> tags only for critical above-the-fold CSS if you're optimizing initial render time. Ensure all color combinations in your external stylesheets meet WCAG contrast requirements (4.5:1 for normal text, 3:1 for large text and UI components). Use CSS preprocessor variables (Sass/Less) or CSS custom properties to define colors once and reference them throughout your stylesheets. Test color contrast systematically using tools that can scan entire stylesheets rather than manually checking each embedded style block."
        },
        'ErrComplementaryLandmarkAccessibleNameIsBlank': {
            'title': "Complementary landmark has blank accessible name",
            'what': "Complementary landmark has blank accessible name",
            'why': "Empty labels provide no information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label text"
        },
        'ErrComplementaryLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Complementary landmark has both aria-label and aria-labelledby",
            'what': "Complementary landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods may cause confusion",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrComplementaryLandmarkMayNotBeChildOfAnotherLandmark': {
            'title': "Complementary landmark is nested inside another landmark",
            'what': "Complementary landmark is nested inside another landmark",
            'why': "Invalid nesting breaks landmark structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move complementary landmark outside of other landmarks"
        },
        'ErrCompletelyEmptyNavLandmark': {
            'title': "Navigation landmark contains no content",
            'what': "Navigation landmark contains no content",
            'why': "Empty navigation serves no purpose",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Add navigation content or remove empty landmark"
        },
        'ErrContentInfoLandmarkAccessibleNameIsBlank': {
            'title': "Contentinfo landmark has blank accessible name",
            'what': "Contentinfo landmark has blank accessible name",
            'why': "Blank labels provide no information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label text"
        },
        'ErrContentInfoLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Contentinfo landmark has both aria-label and aria-labelledby",
            'what': "Contentinfo landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrContentObscuring': {
            'title': "Dialog/overlay obscures interactive content",
            'what': "Dialog or overlay at {dialogXpath} obscures {obscuredCount} interactive element(s) at {breakpoint}px viewport width, preventing users from accessing them",
            'why': "When content is covered by other elements, users cannot access or interact with it, creating complete barriers to functionality. The dialog is positioned over interactive elements that users need to access. This issue is viewport-specific and may only appear at certain screen sizes.",
            'who': "All users at this viewport size, particularly keyboard users who cannot use mouse to work around layout issues, screen reader users who may not know content is obscured, mobile users with limited screen space.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3', '2.1.2'],
            'remediation': "Fix z-index and positioning issues to prevent the dialog from covering interactive content at the {breakpoint}px viewport width. Ensure modals and overlays don\'t cover content inappropriately. Use responsive CSS to adjust dialog positioning at different breakpoints. Consider repositioning the dialog, making it dismissible, or redesigning the layout for this screen size. Test that all content remains accessible when the dialog is visible across all responsive breakpoints."
        },
        'ErrContentinfoLandmarkMayNotBeChildOfAnotherLandmark': {
            'title': "Contentinfo landmark is nested inside another landmark",
            'what': "Contentinfo landmark is nested inside another landmark",
            'why': "Invalid nesting breaks landmark structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move contentinfo to top level"
        },
        'ErrDivMapMissingAttributes': {
            'title': "Map container div is missing required accessibility attributes",
            'what': "Map container div is missing required accessibility attributes",
            'why': "Maps without proper accessibility attributes are completely inaccessible to screen reader users who cannot perceive the visual information.",
            'who': "Blind and low vision users, users who rely on screen readers to understand map content and functionality.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Add appropriate ARIA labels and descriptions, provide text alternatives for map information, ensure all map controls are keyboard accessible."
        },
        'ErrDuplicateLabelForBannerLandmark': {
            'title': "Multiple banner landmarks have the same label",
            'what': "Multiple banner landmarks have the same label",
            'why': "Users cannot distinguish between different banners",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Only one banner should typically exist per page"
        },
        'ErrDuplicateLabelForComplementaryLandmark': {
            'title': "Multiple complementary landmarks have the same label",
            'what': "Multiple complementary landmarks have the same label",
            'why': "Users cannot distinguish between different complementary sections",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each complementary landmark"
        },
        'ErrDuplicateLabelForContentinfoLandmark': {
            'title': "Multiple contentinfo landmarks have the same label",
            'what': "Multiple contentinfo landmarks have the same label",
            'why': "Users cannot distinguish between different footer areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Typically only one contentinfo should exist per page"
        },
        'ErrDuplicateLabelForFormLandmark': {
            'title': "Multiple form landmarks have the same label",
            'what': "Multiple form landmarks have the same label",
            'why': "Users cannot distinguish between different forms",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each form"
        },
        'ErrDuplicateLabelForNavLandmark': {
            'title': "Multiple navigation landmarks have the same label",
            'what': "Multiple navigation landmarks have the same label",
            'why': "Users cannot distinguish between different navigation areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels like \"Main navigation\" and \"Footer navigation\""
        },
        'ErrDuplicateLabelForRegionLandmark': {
            'title': "Multiple region landmarks have the same label",
            'what': "Multiple region landmarks have the same label",
            'why': "Users cannot distinguish between different regions",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each region"
        },
        'ErrDuplicateLabelForSearchLandmark': {
            'title': "Multiple search landmarks have the same label",
            'what': "Multiple search landmarks have the same label",
            'why': "Users cannot distinguish between different search areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each search landmark"
        },
        'ErrDuplicateLandmarkWithoutName': {
            'title': "Found {totalCount} {role} landmarks - this one lacks unique accessible name",
            'what': "Found {totalCount} <{element}> elements with role=\"{role}\" on this page, but this instance lacks a unique accessible name to distinguish it from the others",
            'why': "When multiple {role} landmarks exist without unique names, screen reader users cannot distinguish between them. Screen readers announce landmarks by type and name - without unique names, users hear the same announcement for each {role} landmark, making it impossible to know which one leads where.",
            'who': "Screen reader users who navigate by landmarks (a common navigation strategy), keyboard users who use landmark navigation shortcuts.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add unique aria-label attributes to each {role} landmark to distinguish them. For example, if you have multiple navigation landmarks, use aria-label=\"Main navigation\" for one and aria-label=\"Footer navigation\" for another. The labels should describe the purpose or location of each landmark so users can quickly identify which one they want."
        },
        'ErrDuplicateNavNames': {
            'title': "Multiple navigation elements have identical accessible names",
            'what': "Multiple navigation elements have identical accessible names",
            'why': "Users cannot distinguish between different navigation areas when they have the same name, causing confusion about page structure.",
            'who': "Screen reader users navigating by landmarks, users with cognitive disabilities who rely on clear labeling.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Provide unique accessible names for each navigation element using aria-label or aria-labelledby."
        },
        'WarnElementLangEmpty': {
            'title': "Element has empty lang attribute",
            'what': "Element has empty lang attribute preventing proper language identification for content sections",
            'why': "Empty lang on elements provides no language change information. Screen readers cannot adjust pronunciation rules for content in different languages.",
            'who': "Screen reader users, multilingual users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.2'],
            'remediation': "Add valid language code (e.g., lang=\"fr\" for French) or remove empty lang attribute"
        },
        'ErrElementNotContainedInALandmark': {
            'title': "Content exists outside of any landmark",
            'what': "Content exists outside of any landmark",
            'why': "Content may be missed when navigating by landmarks",
            'who': "Screen reader users using landmark navigation",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure all content is within appropriate landmarks"
        },
        'ErrElementPrimaryLangNotRecognized': {
            'title': "Element has unrecognized language code",
            'what': "Element has unrecognized language code",
            'why': "Language changes won\'t be announced properly",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1', '3.1.2'],
            'remediation': "Use valid language codes"
        },
        'ErrElementRegionQualifierNotRecognized': {
            'title': "Element lang attribute has unrecognized region qualifier",
            'what': "Element lang attribute has unrecognized region qualifier",
            'why': "Invalid region codes may affect pronunciation",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.2'],
            'remediation': "Use valid ISO 3166-1 region codes"
        },
        'ErrEmptyAriaLabelOnField': {
            'title': "Form field has empty aria-label attribute",
            'what': "Form field has empty aria-label attribute",
            'why': "Empty labels provide no information about the field",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Add descriptive text to aria-label or use visible label"
        },
        'ErrEmptyAriaLabelledByOnField': {
            'title': "Form field has empty aria-labelledby attribute",
            'what': "Form field has empty aria-labelledby attribute",
            'why': "Empty labelledby provides no field description",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Reference valid element IDs or use direct labeling"
        },
        'ErrEmptyHeading': {
            'title': "Heading element contains only whitespace or special characters: \"{text}\"",
            'what': "Heading element contains only whitespace or special characters: \"{text}\"",
            'why': "This heading contains only \"{text}\" which provides no meaningful content. Empty headings disrupt document structure and navigation. Screen reader users rely on headings to understand page organization and navigate efficiently using heading shortcuts. An empty heading creates a navigation point with no information, confusing users about the page structure.",
            'who': "Screen reader users who navigate by headings and find a heading containing only \"{text}\", users with cognitive disabilities who rely on clear structure to understand content organization, and users of assistive technologies that generate page outlines",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.6'],
            'remediation': "Either replace \"{text}\" with meaningful text content that describes the section, or remove the empty heading element entirely if it serves no structural purpose. Never use headings for visual spacing - use CSS margin/padding instead."
        },
        'ErrNoH1OnPage': {
            'title': "Page is missing an h1 element to identify the main topic",
            'what': "This page does not contain any h1 (heading level 1) elements to identify its main topic or purpose",
            'why': "The h1 heading serves as the primary identifier of a page's content and purpose, functioning like a document title. Screen reader users often navigate to the first heading to quickly understand what the page is about. Without an h1, users must listen to or scan more content to determine if they're on the correct page. Search engines also rely heavily on h1 elements to understand page content and context. A missing h1 creates ambiguity about the page's main topic and disrupts the logical document outline structure that assistive technologies present to users.",
            'who': "Screen reader users who navigate by headings to quickly understand page content, users with cognitive disabilities who rely on clear hierarchical structure to comprehend information organization, SEO systems that use h1 to understand page topics, users of browser extensions that generate page outlines, and keyboard users who jump between headings for efficient navigation",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add a single h1 element near the top of the page that clearly describes the page's main topic or purpose. The h1 should be the first heading in the document and should accurately reflect the page content (e.g., 'Contact Us', 'Product Name - Features', 'Annual Report 2024'). Ensure the h1 contains meaningful text, not just decorative content or company logos. If your site uses a consistent site name/logo at the top of every page, the h1 should describe the specific page, not repeat the site name."
        },
        'ErrMultipleH1HeadingsOnPage': {
            'title': "Multiple h1 elements found on page - only one h1 should exist per page",
            'what': "This page contains {count} h1 (heading level 1) elements, but best practice is to have exactly one h1 per page that identifies the main topic",
            'why': "While HTML5 technically allows multiple h1 elements (one per sectioning element like article or section), screen reader users and SEO systems expect a single h1 that identifies the primary page topic. Multiple h1 elements create ambiguity about which heading represents the main content, making it harder for users to quickly understand page structure and purpose. Screen readers that generate page outlines may present confusing hierarchies with multiple top-level entries. Search engines may have difficulty determining the primary topic, potentially affecting page ranking and search result display.",
            'who': "Screen reader users who navigate by headings and expect one clear main topic identifier, users with cognitive disabilities who benefit from unambiguous content hierarchy, SEO systems that prioritize the main h1 for understanding page content, users of assistive technologies that generate document outlines expecting a single primary heading, and users with attention difficulties who need clear single-topic focus",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Restructure your heading hierarchy to have exactly one h1 element that identifies the main page topic. Demote additional h1 elements to h2 or appropriate lower levels based on their relationship to the main h1 and other content. If you have multiple articles or sections on the page, use h2 for their titles instead of h1. The single h1 should appear near the top of the page and clearly describe what the entire page is about. For blog posts or articles, the article title should be the h1. For product pages, the product name should be the h1."
        },
        'ErrHeadingsDontStartWithH1': {
            'title': "First heading on page is not h1 - found {firstHeadingLevel} instead",
            'what': "The first heading element on this page is an {firstHeadingLevel}, but heading structure should always start with h1 to establish a proper document outline hierarchy",
            'why': "Starting with a heading level other than h1 creates a broken document outline with missing hierarchy levels. Screen readers announce heading levels to help users understand content relationships - when the first heading is h2 or h3, users wonder what the h1 was and whether they missed important content. This breaks the logical flow that users expect, where h1 represents the main topic, h2 represents major sections, h3 represents subsections, and so on. Some assistive technologies generate visual outlines or tables of contents from heading structure, and missing the h1 creates confusion about the page's primary focus.",
            'who': "Screen reader users who navigate by heading levels and expect a logical hierarchy starting with h1, users with cognitive disabilities who rely on clear content structure to understand information relationships, assistive technology users whose tools generate page outlines with visual indentation based on heading levels, SEO systems that expect h1 to identify the main page topic, and keyboard navigation users who jump between heading levels",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add an h1 element before all other headings that clearly identifies the main topic or purpose of the page. Change the current first heading ({firstHeadingLevel}) to an appropriate lower level based on its relationship to the new h1. Review all heading levels on the page to ensure they follow a logical sequential order: h1 for the main topic, h2 for major sections, h3 for subsections under h2, etc. Never skip heading levels (like going from h1 to h3), though you can move back up levels (like h3 to h2) when starting a new major section."
        },
        'ErrHeadingLevelsSkipped': {
            'title': "Heading levels skip from {fromLevel} to {toLevel} - heading hierarchy must be sequential",
            'what': "Page heading structure jumps from {fromLevel} to {toLevel}, skipping intermediate levels. Proper document structure requires sequential heading levels (h1, h2, h3, etc.) to represent content hierarchy accurately",
            'why': "Skipping heading levels breaks the logical document outline and creates confusion about content relationships and hierarchy. When you skip from h1 to h3, users wonder what happened to the h2 level - is there missing content or did the relationship get miscommunicated? Screen readers announce heading levels numerically, so skipping levels sounds like an error or missing content. Users who navigate by specific heading levels (like \"next h2\") will miss sections that use the wrong level. Assistive technologies that generate visual outlines with indentation based on heading levels will show incorrect or confusing indentation, making it impossible to understand content structure at a glance.",
            'who': "Screen reader users who navigate by heading levels and rely on sequential numbering to understand content hierarchy, users with cognitive disabilities who need consistent structural patterns to comprehend information relationships, assistive technology users whose tools generate table of contents or outlines based on heading structure, users navigating via keyboard shortcuts to specific heading levels who will miss incorrectly-leveled sections, and users with learning disabilities who benefit from predictable hierarchical patterns",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Restructure your heading hierarchy to use sequential levels without skipping. Each heading level should be one level deeper than its parent (h1 to h2, h2 to h3, etc.). You can move back up multiple levels (h4 to h2 is fine when starting a new major section), but never skip levels when going deeper. Review the content structure: h1 should identify the main page topic, h2 should mark major sections within that topic, h3 should mark subsections within each h2, and so on. Don't choose heading levels based on desired font size - use CSS to style headings to any size while maintaining proper semantic levels. The heading levels must reflect the actual content hierarchy, not visual preferences."
        },
        'ErrEmptyLabel': {
            'title': "Label element exists but contains no text",
            'what': "Label element exists but contains no text",
            'why': "Empty labels provide no information about the associated form control, making forms impossible to complete correctly.",
            'who': "Screen reader users who cannot identify form fields, users with cognitive disabilities who need clear labels.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Add descriptive text to all label elements that clearly identifies the purpose of the associated form control."
        },
        'ErrHtmlLangEmpty': {
            'title': "HTML element has a lang attribute present but with no value (lang=\"\"), preventing screen readers from determining the page language",
            'what': "HTML element has a lang attribute present but with no value (lang=\"\"), preventing screen readers from determining the page language",
            'why': "An empty lang attribute is worse than no lang attribute because it explicitly tells assistive technologies there\'s no language specified, potentially causing screen readers to use incorrect pronunciation rules or fail to switch language synthesizers. This can make content completely unintelligible when read aloud.",
            'who': "Blind and low vision users using screen readers who need proper language identification for correct pronunciation, multilingual users who rely on automatic language switching in assistive technologies, users with dyslexia using reading tools that depend on language settings, and users of translation services",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Add a valid language code to the lang attribute (e.g., lang=\"en\" for English, lang=\"es\" for Spanish, lang=\"fr\" for French). Use the correct ISO 639-1 two-letter code or ISO 639-2 three-letter code. For the HTML element, always specify the primary document language. If the language is truly unknown, remove the lang attribute entirely rather than leaving it empty."
        },
        'ErrEmptyList': {
            'title': "List element (ul, ol, dl) contains no list items",
            'what': "List element (ul, ol, dl) contains no list items",
            'why': "Empty lists create confusion about document structure and may indicate missing content or markup errors.",
            'who': "Screen reader users who encounter empty list announcements, all users missing potentially important content.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Remove empty list elements or populate them with appropriate list items, ensure lists are only used for actual list content."
        },
        'ErrEmptyPageTitle': {
            'title': "Page title element is empty",
            'what': "The page has a <title> element but it contains no text",
            'why': "The page title is the first thing screen reader users hear when a page loads. An empty title provides no information about what page they're on - it's like opening a book with a blank cover. The title appears in browser tabs, bookmarks, search results, and browser history. An empty title means users see \"Untitled\" or nothing at all, making it impossible to distinguish this page from others or understand its purpose. This is especially problematic when users have multiple tabs open or are trying to return to a page from their history.",
            'who': "Screen reader users who rely on titles for immediate page identification, users with cognitive disabilities who need clear page identification, users managing multiple browser tabs, users with memory issues using browser history, and all users when bookmarking or sharing pages",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.2'],
            'remediation': "Add descriptive text to the <title> element. A good page title should be: (1) Unique - different from other pages on your site, (2) Descriptive - clearly identifies the page content, (3) Concise - ideally 20-60 characters, (4) Front-loaded - most important info first, (5) Contextual - includes site name for orientation. Use the pattern \"Page Topic - Section - Site Name\" or \"Specific Content - Site Name\". Examples: \"Shopping Cart - Acme Store\", \"Privacy Policy - Company Name\", \"Product Name - Category - Store\". Avoid generic titles like \"Home\", \"Page\", or \"Untitled\"."
        },
        'ErrEmptyTitleAttr': {
            'title': "Empty title attribute",
            'what': "Empty title attribute",
            'why': "Empty titles provide no information and add unnecessary markup",
            'who': "Users expecting tooltip information",
            'impact': ImpactScale.LOW.value,
            'wcag': ['4.1.2'],
            'remediation': "Remove empty title attributes or provide meaningful descriptive text"
        },
        'ErrEmptyXmlLangAttr': {
            'title': "xml:lang attribute is empty",
            'what': "xml:lang attribute is empty",
            'why': "Empty xml:lang provides no language information",
            'who': "Screen reader users using XML/XHTML parsers",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Add valid language code to xml:lang attribute"
        },
        'ErrFakeListImplementation': {
            'title': "Visual list created without proper list markup",
            'what': "Element contains {itemCount} list-like items using {pattern}, but does not use proper <ul>/<ol> and <li> markup",
            'why': "Fake lists don\'t convey proper structure to assistive technologies, preventing users from understanding relationships between items. Screen readers cannot announce the number of items, allow list navigation, or provide context about the list structure.",
            'who': "Screen reader users who cannot navigate lists properly, users who rely on structural navigation, keyboard users who cannot jump between list items.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Replace the visual list simulation with proper semantic HTML list markup. Use <ul> or <ol> elements with <li> children for each list item. Remove the {pattern} and let the browser handle list presentation through proper HTML semantics and CSS styling."
        },
        'ErrFielLabelledBySomethingNotALabel': {
            'title': "Field is labeled by an element that is not a proper label",
            'what': "Field is labeled by an element that is not a proper label",
            'why': "Non-label elements may not provide appropriate semantic relationships",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Use proper <label> elements or appropriate ARIA labeling"
        },
        'ErrFieldAriaRefDoesNotExist': {
            'title': "aria-labelledby references non-existent element ID \'{found}\'",
            'what': "aria-labelledby references non-existent element ID \'{found}\'",
            'why': "The aria-labelledby attribute references \'{found}\' but no element with id=\"{found}\" exists on the page. This broken reference means the field has no accessible label for screen readers.",
            'who': "Screen reader users who receive no label for this field",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Either create an element with id=\"{found}\" to serve as the label, fix the ID reference to point to an existing element, or use a different labeling method like a <label> element"
        },
        'ErrFieldLabelledUsinAriaLabel': {
            'title': "Field labeled using aria-label instead of visible label",
            'what': "Field labeled using aria-label instead of visible label",
            'why': "Visible labels benefit all users, not just screen reader users",
            'who': "Users with cognitive disabilities, all users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.3.2'],
            'remediation': "Use visible <label> elements instead of aria-label when possible"
        },
        'ErrFieldReferenceDoesNotExist': {
            'title': "Label for attribute references non-existent field",
            'what': "Label for attribute references non-existent field",
            'why': "Label is not associated with any form field",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Fix the for/id relationship"
        },
        'ErrFormAriaLabelledByIsBlank': {
            'title': "Form aria-labelledby references blank or empty element",
            'what': "Form aria-labelledby references blank or empty element",
            'why': "No accessible name is provided",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Reference element with actual text content"
        },
        'ErrFormAriaLabelledByReferenceDIsHidden': {
            'title': "Form aria-labelledby references hidden element",
            'what': "Form aria-labelledby references hidden element",
            'why': "Hidden elements may not provide accessible names",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Reference visible elements only"
        },
        'ErrFormAriaLabelledByReferenceDoesNotExist': {
            'title': "Form aria-labelledby references non-existent element",
            'what': "Form aria-labelledby references non-existent element",
            'why': "Broken reference provides no accessible name",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Fix ID reference or use different labeling method"
        },
        'ErrFormAriaLabelledByReferenceDoesNotReferenceAHeading': {
            'title': "Form aria-labelledby doesn\'t reference a heading element",
            'what': "Form aria-labelledby doesn\'t reference a heading element",
            'why': "Best practice is to reference headings for form landmarks",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Reference a heading element when possible"
        },
        'ErrFormEmptyHasNoChildNodes': {
            'title': "Form element is completely empty with no child nodes",
            'what': "Form element is completely empty with no child nodes",
            'why': "Empty forms serve no purpose and confuse assistive technology users",
            'who': "Screen reader users, keyboard users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Remove empty form elements or add appropriate form controls"
        },
        'ErrFormEmptyHasNoInteractiveElements': {
            'title': "Form has content but no interactive elements",
            'what': "Form has content but no interactive elements",
            'why': "Forms without inputs cannot be used for their intended purpose",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Add appropriate input fields, buttons, or other form controls"
        },
        'ErrFormLandmarkAccessibleNameIsBlank': {
            'title': "Form landmark has blank accessible name",
            'what': "Form landmark has blank accessible name",
            'why': "Forms need clear identification",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label describing form purpose"
        },
        'ErrFormLandmarkMustHaveAccessibleName': {
            'title': "Form element missing accessible name required to become a landmark",
            'what': "A <form> element or element with role=\"form\" lacks an accessible name via aria-label or aria-labelledby. Without an accessible name, <form> elements do not create form landmarks, making them harder for screen reader users to discover and navigate. Elements with explicit role=\"form\" always create landmarks and absolutely require accessible names.",
            'why': "Form landmarks are critical navigation points that allow screen reader users to quickly jump between different forms on a page using landmark navigation commands. A <form> element only becomes a landmark when it has an accessible name - without one, it remains a generic container that screen readers cannot easily locate. When a page has multiple forms (like a search form, newsletter signup, and contact form), users need these named landmarks to efficiently navigate to the form they want without tabbing through every field. Elements with explicit role=\"form\" create landmarks regardless of accessible name presence, but an unnamed form landmark announces as just \"form\" with no identifying information, forcing users to explore its contents to determine its purpose.",
            'who': "Screen reader users who rely on landmark navigation to efficiently move between page regions and locate forms, users with motor disabilities who use voice control and need to target forms by name, users with cognitive disabilities who benefit from clear form identification and predictable navigation structure, mobile screen reader users who need quick access to forms without exploring entire pages, and power users who navigate by landmarks to skip repetitive content and go directly to specific forms",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.3.2', '5.2.4'],
            'remediation': "Add aria-label with a descriptive name to the form element (e.g., <form aria-label=\"Newsletter signup\">), or use aria-labelledby to reference a visible heading that describes the form's purpose (e.g., <form aria-labelledby=\"contact-heading\"> with <h2 id=\"contact-heading\">Contact Us</h2>). Prefer aria-labelledby when there is a visible heading that describes the form, as this benefits all users. Use aria-label for secondary forms like search that may not have dedicated headings. Ensure each accessible name clearly distinguishes the form's purpose when multiple forms exist on the page."
        },
        'ErrFormLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Form landmark has both aria-label and aria-labelledby",
            'what': "Form landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrFormUsesAriaLabelInsteadOfVisibleElement': {
            'title': "Form uses aria-label instead of visible heading or label",
            'what': "Form uses aria-label instead of visible heading or label",
            'why': "Visible labels benefit all users",
            'who': "All users, especially those with cognitive disabilities",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3', '3.3.2'],
            'remediation': "Use visible heading with aria-labelledby"
        },
        'ErrFormUsesTitleAttribute': {
            'title': "Form uses title attribute for labeling",
            'what': "Form uses title attribute for labeling",
            'why': "Title attributes are not reliably accessible",
            'who': "Screen reader users, mobile users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use aria-label or aria-labelledby instead"
        },
        'ErrFoundAriaLevelButNoRoleAppliedAtAll': {
            'title': "aria-level attribute without role=\"heading\"",
            'what': "aria-level attribute without role=\"heading\"",
            'why': "aria-level only works with heading role",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Add role=\"heading\" or use native heading element"
        },
        'ErrFoundAriaLevelButRoleIsNotHeading': {
            'title': "aria-level on element without heading role",
            'what': "aria-level on element without heading role",
            'why': "aria-level requires heading role to work",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Add role=\"heading\" or remove aria-level"
        },
        'ErrHeaderMissingScope': {
            'title': "Table header (th) element missing scope attribute",
            'what': "Table header (th) element missing scope attribute",
            'why': "Without scope attributes, screen readers cannot properly associate headers with data cells, making tables difficult to understand.",
            'who': "Screen reader users navigating complex tables, users who rely on proper table semantics for comprehension.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add scope=\"col\" for column headers and scope=\"row\" for row headers to all th elements."
        },
        'ErrHreflangAttrEmpty': {
            'title': "hreflang attribute is empty on link",
            'what': "hreflang attribute is empty on link",
            'why': "Empty hreflang provides no language information for the linked resource",
            'who': "Screen reader users, search engines",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Add valid language code or remove empty hreflang attribute"
        },
        'ErrHreflangNotOnLink': {
            'title': "hreflang attribute on non-link element",
            'what': "hreflang attribute on non-link element",
            'why': "hreflang only works on links",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Move hreflang to anchor elements only"
        },
        'ErrIframeWithNoTitleAttr': {
            'title': "Iframe element is missing the required title attribute",
            'what': "Iframe element is missing the required title attribute",
            'why': "Iframes embed external content like videos, maps, or forms within your page. Without a title attribute, screen reader users hear only \"iframe\" with no indication of what content it contains. This is like having a door with no label - users don\'t know what\'s behind it. They must enter the iframe and explore its content to understand its purpose, which is time-consuming and may be confusing if the iframe content lacks context. For pages with multiple iframes, users cannot distinguish between them or decide which ones are worth exploring.",
            'who': "Screen reader users who need to understand what each iframe contains before deciding whether to interact with it, keyboard users navigating through iframes who need context about embedded content, users with cognitive disabilities who need clear labeling of all page regions, and users on slow connections who may experience delays loading iframe content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add a title attribute to every iframe that concisely describes its content or purpose (e.g., title=\"YouTube video: Product demonstration\", title=\"Google Maps: Office location\", title=\"Payment form\"). The title should be unique if there are multiple iframes. Keep it brief but descriptive enough that users understand what the iframe contains without having to enter it. For decorative iframes (rare), you can use title=\"\" and add tabindex=\"-1\" to remove it from tab order."
        },
        'ErrImageAltContainsHTML': {
            'title': "Image\'s alternative text contains HTML markup tags",
            'what': "Image\'s alternative text contains HTML markup tags",
            'why': "HTML in alt text is not parsed, so screen readers will read the HTML markup as literal characters. Users will hear angle brackets announced as \"less than\" or \"greater than\" and tag names spelled out, creating a confusing experience. For example, alt=\"<b>Team Photo</b>\" would be read as \"less than b greater than Team Photo less than slash b greater than\".",
            'who': "Blind and low vision users using screen readers who will hear nonsense characters and words interspersed with the actual alt text, making it difficult or impossible to understand the image content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Remove all HTML markup from alt attributes and use only plain text. If formatting or structure is important to convey, describe it in words rather than using markup (e.g., instead of \"<em>Important</em>\" use \"Important, emphasized\")."
        },
        'ErrImageWithEmptyAlt': {
            'title': "Image alt attribute contains only whitespace characters (spaces, tabs, line breaks), providing no accessible name",
            'what': "Image alt attribute contains only whitespace characters (spaces, tabs, line breaks), providing no accessible name",
            'why': "Whitespace-only alt attributes fail to provide any accessible name for the image, causing screen readers to announce unhelpful fallback information like the image filename or \"unlabeled graphic\". Unlike properly empty alt=\"\" which signals decorative content, whitespace alt text creates ambiguity - users cannot determine if they\'re missing important information or if the image is decorative.",
            'who': "Blind and low vision users relying on screen readers who cannot determine the image\'s purpose or content, users with cognitive disabilities who depend on clear labeling to understand page content, and users of voice control software who cannot reference images without accessible names",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.1.1'],
            'remediation': "Determine the image\'s purpose and apply appropriate alt text - for informative images add descriptive alternative text that conveys the same information, for decorative images use alt=\"\" (no spaces) to properly mark them as decorative, for functional images describe the action or destination not the appearance, and remove any whitespace-only alt attributes that serve as ineffective placeholders"
        },
        'ErrImageWithImgFileExtensionAlt': {
            'title': "Alt text contains image filename with file extension (e",
            'what': "Alt text contains image filename with file extension (e.g., \"photo.jpg\", \"IMG_1234.png\", \"banner.gif\"), providing no meaningful description of the image content",
            'why': "Filenames rarely describe image content meaningfully and often contain technical identifiers, underscores, hyphens, or numbers that create a poor listening experience when announced by screen readers. Users hear cryptic strings like \"DSC underscore zero zero four two dot jay peg\" instead of learning what the image actually shows, forcing them to guess at important visual information or miss it entirely.",
            'who': "Blind and low vision users using screen readers who need meaningful descriptions to understand visual content, users with cognitive disabilities who rely on clear, descriptive text to process information, users in low-bandwidth situations where images don\'t load and only alt text is displayed, and search engine users who rely on descriptive alt text for finding relevant content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Replace the filename with descriptive text that conveys the image\'s information or purpose (change alt=\"hero-banner-2.jpg\" to alt=\"Students collaborating in the campus library\"), focus on what the image communicates rather than technical details, ensure the description makes sense when read in context with surrounding content, and avoid including file extensions or technical metadata in alt attributes"
        },
        'ErrImageWithNoAlt': {
            'title': "Images are missing alternative text attributes, preventing assistive technologies from conveying their content or purpose to users",
            'what': "Images are missing alternative text attributes, preventing assistive technologies from conveying their content or purpose to users",
            'why': "Screen readers cannot describe image content to users who are blind or have low vision, creating information barriers that may prevent understanding of essential content, navigation, or task completion. This also affects users with cognitive disabilities who benefit from text alternatives and users on slow connections where images fail to load.",
            'who': "Blind users using screen readers, users with low vision using screen readers with magnification, users with cognitive disabilities who rely on text alternatives, voice control users who need text labels to reference elements, and users on slow internet connections",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Add descriptive alt attributes for informative images (alt=\"Sales chart showing 40% increase\"), use empty alt attributes for decorative images (alt=\"\"), describe the function for interactive images (alt=\"Search\" not alt=\"magnifying glass icon\"), and provide detailed descriptions via aria-describedby for complex images like charts or diagrams."
        },
        'ErrImageWithURLAsAlt': {
            'title': "Alt attribute contains a URL (starting with http://, https://, www",
            'what': "Alt attribute contains a URL (starting with http://, https://, www., or file://) instead of descriptive text about the image content",
            'why': "URLs provide no meaningful information about what an image shows or its purpose on the page. Screen reader users hear lengthy, difficult-to-parse web addresses being spelled out character by character or in chunks like \"h-t-t-p-colon-slash-slash-w-w-w-dot\", creating a frustrating experience that conveys nothing about the actual image content. This often happens when image source URLs are mistakenly copied into alt attributes.",
            'who': "Blind and low vision users using screen readers who need meaningful descriptions instead of technical URLs, users with cognitive disabilities who cannot process or remember long URL strings to understand image content, users in low-bandwidth situations where only alt text displays when images fail to load, and voice control users who cannot effectively reference images labeled with URLs",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Replace the URL with descriptive text that conveys what the image shows or its function (change alt=\"https://example.com/images/team-photo.jpg\" to alt=\"Marketing team at annual conference\"), focus on describing the image content rather than its location or technical details, ensure the description makes sense in the page context, and never use the image\'s web address as its alternative text"
        },
        'ErrImproperTitleAttribute': {
            'title': "Title attribute used in particularly problematic patterns (on non-focusable elements or duplicating visible text)",
            'what': "Title attribute used in particularly problematic patterns: on non-focusable container elements (div, span, p) where users cannot even trigger the tooltip, or redundant titles that duplicate visible text providing no value",
            'why': "Title attributes fundamentally fail WCAG Conformance requirement 5.2.4 as they are inaccessible to screen magnifier users. At high magnification, tooltip content extends off-screen and disappears when mouse moves, making content completely inaccessible. This error flags especially egregious patterns: (1) titles on non-focusable elements where even keyboard users with perfect hover capability cannot access the content, and (2) redundant titles that duplicate visible text, demonstrating fundamental misunderstanding of accessibility",
            'who': "Screen magnifier users at high magnification (tooltip goes off-screen and disappears), mobile and touch screen users (no hover capability), keyboard-only users (cannot trigger tooltips on non-focusable elements), screen reader users (inconsistent announcement), users with motor disabilities (tooltip disappears when mouse moves), users with cognitive disabilities (tooltip disappears too quickly)",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['5.2.4', '3.3.2'],
            'remediation': "Never use title attributes on body elements. For non-focusable containers (div, span, p), remove the title attribute entirely and make the information visible as regular text. For redundant titles that duplicate visible text, simply delete the title attribute. Use visible text, proper <label> elements for form fields, aria-label for interactive elements like icon buttons, or visible helper text with aria-describedby for supplementary information. These patterns should never exist in production code"
        },
        'ErrInappropriateMenuRole': {
            'title': "Menu role used inappropriately for navigation links",
            'what': "Menu role used inappropriately for navigation links",
            'why': "Menu role is for application menus, not navigation. Misuse causes incorrect keyboard behavior and screen reader announcements.",
            'who': "Screen reader users expecting application menu behavior, keyboard users expecting arrow key navigation.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use nav element or role=\"navigation\" for site navigation, reserve role=\"menu\" for actual application menus with proper ARIA patterns."
        },
        'ErrIncorrectHeadingLevel': {
            'title': "Heading level used incorrectly based on visual appearance rather than document structure",
            'what': "Heading level used incorrectly based on visual appearance rather than document structure",
            'why': "Incorrect heading levels break the document outline and make it difficult to understand content hierarchy.",
            'who': "Screen reader users navigating by headings, users who rely on proper document structure.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use heading levels to convey document structure (h1 > h2 > h3), not for visual styling; use CSS for appearance."
        },
        'ErrIncorrectlyFormattedPrimaryLang': {
            'title': "Language code incorrectly formatted",
            'what': "Language code incorrectly formatted",
            'why': "Malformed codes may not work properly",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1'],
            'remediation': "Use correct format: \"en-US\" or \"en\""
        },
        'ErrInfiniteAnimation': {
            'title': "Animation '{animationName}' runs infinitely without pause controls",
            'what': "Animation '{animationName}' runs infinitely without pause controls",
            'why': "Continuous animations can trigger seizures, cause distraction, and make content unusable for many users. This animation is set to repeat indefinitely (animation-iteration-count: infinite).",
            'who': "Users with vestibular disorders, users with ADHD, users with photosensitive epilepsy, users with cognitive disabilities.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.2.2'],
            'remediation': "Provide pause/stop controls for all animations, respect prefers-reduced-motion settings, or limit animation-iteration-count to a finite number. Current CSS:\n{animationCSS}"
        },
        'ErrInsufficientContrast': {
            'title': "Text contrast ratio {ratio}:1 does not meet WCAG requirements (required: {required}:1)",
            'what': "Text contrast ratio {ratio}:1 does not meet WCAG requirements (required: {required}:1)",
            'why': "Insufficient contrast ({ratio}:1) makes text unreadable for users with low vision or in challenging lighting conditions. Text color {fg} on background {bg} does not provide enough distinction.",
            'who': "Users with low vision, users with color blindness, aging users, all users in bright sunlight or glare.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3'],
            'remediation': "Current contrast is {ratio}:1, but at least {required}:1 is required. Adjust foreground color {fg} or background color {bg} to meet requirements. For {fontSize}px text, ensure 4.5:1 for normal text or 3:1 for large text (18pt+)."
        },
        'ErrInvalidAriaLevel': {
            'title': "Invalid aria-level value (not 1-6)",
            'what': "Invalid aria-level value (not 1-6)",
            'why': "Invalid levels break heading hierarchy",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Use aria-level values 1 through 6 only"
        },
        'ErrInvalidLanguageCode': {
            'title': "Language attribute contains invalid code \'{found}\' that doesn\'t conform to ISO 639 standards",
            'what': "Language attribute contains invalid code \'{found}\' that doesn\'t conform to ISO 639 standards",
            'why': "The language code \'{found}\' is not recognized as a valid ISO 639 language code. This prevents assistive technologies from properly processing content, causing screen readers to mispronounce words, use incorrect inflection patterns, or fail to switch language engines. This can make content difficult or impossible to understand when read aloud, especially if the content is in a non-English language but gets read with English pronunciation rules.",
            'who': "Blind and low vision users relying on screen readers for accurate pronunciation, multilingual users who need proper language identification for comprehension, users with reading disabilities using text-to-speech tools, and international users accessing content in multiple languages",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1', '3.1.2'],
            'remediation': "Replace \'{found}\' with a valid ISO 639-1 or ISO 639-2 language code. If \'{found}\' appears to be English, use \"en\". Common corrections: \"english\" → \"en\", \"spanish\" → \"es\", \"french\" → \"fr\", \"deutsch\" → \"de\", \"eng\" → \"en\". For regional variants use BCP 47 format (e.g., \"en-US\", \"en-GB\", \"es-MX\"). Check the official ISO 639 registry for the correct code."
        },
        'ErrInvalidTabindex': {
            'title': "Element has a tabindex attribute with an invalid value (non-numeric or decimal)",
            'what': "Element has a tabindex attribute with an invalid value (non-numeric or decimal)",
            'why': "Invalid tabindex values are ignored by browsers, potentially making interactive elements unreachable by keyboard or creating unpredictable focus behavior. This can completely block keyboard users from accessing functionality. The element might be skipped during tabbing, receive focus unexpectedly, or behave differently across browsers.",
            'who': "Keyboard users who cannot reach or interact with the element, screen reader users who may miss important interactive controls, users with motor disabilities relying on keyboard navigation, and users who cannot use a mouse",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3'],
            'remediation': "Use only valid integer values for tabindex: \"0\" to include in natural tab order, \"-1\" to remove from tab order but allow programmatic focus, or remove the tabindex attribute entirely if the element shouldn\'t be focusable. Never use decimal values (1.5), text (\"first\"), or empty values (tabindex=\"\")."
        },
        'ErrLabelContainsMultipleFields': {
            'title': "Single label contains {count} form fields",
            'what': "Single label contains {count} form fields",
            'why': "A label containing {count} fields creates ambiguity about which field it describes. Screen readers will associate this label with all {count} fields, making it unclear which field is which.",
            'who': "Screen reader users who need clear field identification, users with cognitive disabilities who need simple relationships",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Split the label so each of the {count} fields has its own dedicated label. Use fieldset and legend for grouped fields if they\'re related."
        },
        'ErrLabelMismatchOfAccessibleNameAndLabelText': {
            'title': "Accessible name doesn\'t match visible label",
            'what': "Accessible name doesn\'t match visible label",
            'why': "Confusing for voice control users",
            'who': "Voice control users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3'],
            'remediation': "Make accessible name match visible text"
        },
        'ErrLargeTextContrastAA': {
            'title': "Large text ({fontSize}px) fails WCAG AA contrast: {ratio}:1 (required: 3:1)",
            'what': "Large text fails WCAG AA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This large text ({fontSize}px) with a contrast ratio of {ratio}:1 does not meet WCAG Level AA requirements. Large text (24px+ or 18.66px+ bold) requires a minimum contrast ratio of 3:1 to pass Level AA. The foreground color ({fg}) against background ({bg}) doesn\'t provide enough distinction.",
            'who': "Users with low vision, color blindness, or age-related vision changes who struggle to distinguish text with insufficient contrast, even when the text is larger",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AA requires at least 3:1 for large text ({fontSize}px). To fix, adjust the foreground color from {fg} or the background from {bg}. Consider using #949494 or darker on white background for large text."
        },
        'ErrLargeTextContrastAAA': {
            'title': "Large text ({fontSize}px) fails WCAG AAA contrast: {ratio}:1 (required: 4.5:1)",
            'what': "Large text fails WCAG AAA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This large text ({fontSize}px) with a contrast ratio of {ratio}:1 does not meet WCAG Level AAA enhanced requirements. Large text (24px+ or 18.66px+ bold) requires a minimum contrast ratio of 4.5:1 to pass Level AAA for enhanced accessibility.",
            'who': "Users with moderate visual impairments who benefit from enhanced contrast even for large text, ensuring optimal readability in all conditions",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.6'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AAA requires at least 4.5:1 for large text ({fontSize}px). To fix, adjust colors to achieve higher contrast, such as #767676 or darker on white background for large text at Level AAA."
        },
        'ErrLinkOpensNewWindowNoWarning': {
            'title': "Link opens in new window/tab without warning users",
            'what': "Link opens in new window/tab without warning users",
            'why': "Unexpectedly opening new windows can disorient users, especially those using screen readers or magnification. Users may not realize a new window opened and become confused when the back button doesn\'t work. This is particularly problematic for users with cognitive disabilities or those unfamiliar with browser behaviors.",
            'who': "Screen reader users who may not notice the context change, users with cognitive disabilities who may become disoriented, users with motor disabilities who have difficulty managing multiple windows, and novice computer users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.2.2'],
            'remediation': "Add visible text or an icon indicating the link opens in a new window. Include this information in the accessible name (e.g., \"Annual report (opens in new window)\"). Consider whether opening in a new window is necessary - often it\'s better to open in the same window and let users control this behavior."
        },
        'ErrLinkTextNotDescriptive': {
            'title': "Link text does not adequately describe the link\'s destination or purpose",
            'what': "Link text does not adequately describe the link\'s destination or purpose",
            'why': "Users need to understand where a link will take them before activating it. Vague link text like \"click here\" or \"read more\" provides no information about the destination. Screen reader users often navigate by pulling up a list of all links, where non-descriptive text becomes meaningless out of context.",
            'who': "Screen reader users navigating by links list, users with cognitive disabilities who need clear navigation cues, and users with motor disabilities who need to make informed decisions before activating links",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.4'],
            'remediation': "Write link text that describes the destination or action (e.g., \"Download 2024 annual report\" instead of \"Download\"). Avoid generic phrases. If design constraints require short link text, provide additional context through aria-label or aria-describedby, or ensure surrounding text provides context."
        },
        'ErrLinkAccessibleNameMismatch': {
            'title': "Link\'s accessible name does not start with its visible text",
            'what': "Link has visible text \"{metadata.visibleText}\" but accessible name \"{metadata.accessibleName}\" - the accessible name does not start with the visible text, preventing voice control users from activating it",
            'why': "Voice control users activate links by saying the visible text they see (e.g., \"Click Read more\"). If the accessible name doesn\'t start with the visible text, the voice command fails. WCAG 2.5.3 requires visible text be included in the accessible name (at the start), and 2.4.6 requires labels match user expectations.",
            'who': "Voice control users who cannot activate links, speech input users relying on visible labels, users with motor disabilities who use voice commands, users with cognitive disabilities who need consistency between what they see and what they can say",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.5.3', '2.4.6'],
            'remediation': "Ensure accessible name starts with visible text. If visible text is \"Read more\", aria-label should be \"Read more about Peer Support Groups\" not \"How Peer Support Groups Changed Life\". Alternatively, use visually-hidden text starting with visible text, or place descriptive text before the link in DOM."
        },
        'ErrAnchorTargetTabindex': {
            'title': "In-page link target (element with id referenced by href=#...) needs proper tabindex for accessibility",
            'what': "In-page link (skip link, table of contents link, or fragment identifier) points to a target element that lacks appropriate tabindex, preventing focus management from working properly when the link is activated",
            'why': "When users activate an in-page link (like a skip link or table of contents link), browsers should move both scroll position and keyboard focus to the target element. However, non-interactive elements (like <div>, <span>, <h2>) are not naturally focusable. Without tabindex=\"-1\" on the target, keyboard focus remains at the link while the page scrolls, creating a disconnect between visual position and keyboard position. This is especially problematic for skip links - a user activates \"Skip to main content\" expecting to bypass navigation, but their keyboard focus stays in the navigation, forcing them to tab through everything anyway. The skip link becomes useless. Screen reader users expect focus to move with the visual position, and when it doesn't, they become disoriented about their location on the page.",
            'who': "Keyboard users relying on skip links to bypass repetitive navigation who find the skip link non-functional, screen reader users who expect focus and reading position to move together, users with motor disabilities who use skip links to reduce keystrokes, users navigating table of contents who expect focus to move to the target heading, users with cognitive disabilities who are confused when focus position doesn't match visual position, and developers implementing WCAG 2.4.1 Bypass Blocks",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.1', '2.4.3'],
            'remediation': "Add tabindex=\"-1\" to the target element of in-page links: <h2 id=\"main-content\" tabindex=\"-1\">Main Content</h2>. The tabindex=\"-1\" makes the element programmatically focusable (can receive focus via JavaScript) without adding it to the tab order (won't be reached by Tab key). When the link is activated, the browser will scroll to the target and move keyboard focus there. Implement this for: skip link targets (skip to main content, skip to navigation), table of contents targets (heading IDs), fragment identifier targets in your navigation. Optional but recommended: add focus styling to the target so users can see it received focus: [tabindex=\"-1\"]:focus { outline: 2px solid #0066cc; }. Test by activating the link and pressing Tab - the next tab should continue from the target location, not return to the link."
        },
        'ErrDocumentLinkWrongLanguage': {
            'title': "Link to a downloadable document in a different language than the page language lacks lang attribute or language indication",
            'what': "Link text for a downloadable document (PDF, Word, Excel, etc.) is in a different language than the page's primary language but lacks a lang attribute to properly identify the language change, causing screen readers to mispronounce the link text",
            'why': "When a link contains text in a different language (like a French document title on an English page), screen readers need the lang attribute to switch pronunciation rules and voice synthesizers. Without it, screen readers pronounce foreign language text using the page's default language rules, creating garbled, unintelligible pronunciation. For example, \"Rapport Annuel 2024\" without lang=\"fr\" will be pronounced with English phonetics, making it incomprehensible to users. This prevents users from understanding what document they're downloading, making it impossible to identify whether it's the correct file. The problem is particularly severe for users who are blind and rely entirely on audio to identify document links - they may download the wrong file repeatedly because they cannot understand the mispronounced title.",
            'who': "Screen reader users who cannot understand mispronounced foreign language document titles, blind users who rely on audio to identify documents and make download decisions, multilingual users who need documents in specific languages but cannot identify which language due to mispronunciation, international users accessing content across languages, users with dyslexia who use screen readers and are confused by pronunciation mismatches, and users with reading disabilities who rely on consistent pronunciation patterns",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.2'],
            'remediation': "Add lang attribute to the link or a span containing the foreign language text: <a href=\"rapport.pdf\" lang=\"fr\">Rapport Annuel 2024 <span lang=\"en\">(PDF, 2MB)</span></a>. Use ISO 639-1 language codes (en for English, fr for French, es for Spanish, de for German, etc.). Best practice: include both the document title in its original language with lang attribute AND a translated description in the page language: <a href=\"rapport.pdf\"><span lang=\"fr\">Rapport Annuel 2024</span> <span lang=\"en\">(Annual Report - French, PDF, 2MB)</span></a>. This provides both correct pronunciation and clear understanding of content. Also add file type and size information for all document links to meet WCAG 3.2.5. Test with a screen reader to verify the foreign language text is pronounced correctly."
        },
        'ErrLinkButtonMissingSpaceHandler': {
            'title': "Link is styled to look like a button but lacks Space key handler - keyboard users expect Space key to activate button-like elements",
            'what': "Link has visual styling that makes it appear to be a button (button-like padding, borders, background colors, rounded corners) but only responds to Enter key, not Space key, violating user expectations that button-styled elements activate with Space",
            'why': "There's a fundamental difference in keyboard interaction between links and buttons: links activate with Enter key, buttons activate with both Enter and Space keys. When you style a link to look like a button, users form the mental model that it IS a button and expect Space key to work. Keyboard users, especially those with motor disabilities who find certain key combinations difficult, may rely on Space key for activation and become frustrated or confused when styled-as-button links don't respond. This creates an inconsistency between visual appearance and behavior - a usability failure. Users may think the element is broken when Space doesn't work. Power users who know the difference between links and buttons are constantly forced to remember which button-looking things are real buttons and which are styled links, adding cognitive load.",
            'who': "Keyboard users who expect Space key activation for button-styled elements, users with motor disabilities who find Space easier than Enter, users with cognitive disabilities confused by inconsistency between appearance and behavior, power users frustrated by having to remember which button-like elements are real buttons versus styled links, users with attention difficulties distracted by unexpected behavior, and developers trying to maintain consistent interaction patterns",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.2.4', '2.1.1'],
            'remediation': "Best solution: use actual <button> elements instead of styled links when you want button appearance and behavior. Change <a href=\"#\" class=\"btn\"> to <button type=\"button\">. If you must use a link styled as a button (for navigation purposes), add JavaScript to handle Space key: link.addEventListener('keydown', (e) => { if (e.key === ' ') { e.preventDefault(); link.click(); } }); The preventDefault() stops Space from scrolling the page, and click() activates the link. However, this is a workaround - semantic HTML is better. Consider: is this actually a button (performs action) or a link (navigates)? Use the correct element. If it navigates to another page or section, use <a>. If it performs an action (submit, open modal, toggle), use <button>. Don't mix semantics and visual styling - they should align."
        },
        'ErrLinkColorChangeOnly': {
            'title': "Link focus indicator relies solely on color change without outline, border, box-shadow, or underline",
            'what': "Link indicates keyboard focus by changing only its color (text color or background color) without any accompanying structural or geometric change such as outline, border, box-shadow, underline, or other shape modification",
            'why': "WCAG Success Criterion 1.4.1 (Use of Color) explicitly prohibits using color as the only visual means of conveying information, and focus indication is critical information. Users with color blindness (approximately 8% of men, 0.5% of women), users with low contrast sensitivity, users viewing content on monochrome displays, users in bright sunlight, and users with color vision deficiencies cannot perceive color-only changes. A link that changes from blue to darker blue on focus looks identical to these users. Without perceivable focus indication, keyboard users cannot track their position as they navigate through links, causing them to lose their place, accidentally activate wrong links, or become completely unable to navigate link-heavy pages like navigation menus or article lists.",
            'who': "Users with color blindness (particularly deuteranopia and protanopia affecting 8% of males) who cannot distinguish color changes, users with low vision who may not perceive subtle color shifts, users viewing content on monochrome displays or in high contrast modes where colors are overridden, users in bright outdoor environments where color differences wash out, older users with age-related color discrimination loss, users with Windows High Contrast Mode enabled where author colors are replaced with system colors, and keyboard users who need reliable focus tracking to navigate efficiently",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.1', '2.4.7', '1.4.11'],
            'remediation': "Add a structural change in addition to any color change. Best practices for links: (1) Add or modify underline on focus: a:focus { text-decoration: underline; text-decoration-thickness: 2px; }, (2) Add outline: a:focus { outline: 2px solid #0066cc; outline-offset: 2px; }, (3) Add box-shadow: a:focus { box-shadow: 0 0 0 2px rgba(0,102,204,0.5); }, (4) Combine multiple indicators: a:focus { outline: 2px solid #0066cc; outline-offset: 2px; text-decoration: underline; }. The structural change must be perceivable without color - test by viewing in grayscale mode or using color blindness simulation. Ensure the focus indicator has at least 3:1 contrast ratio against adjacent backgrounds. For links in flowing text, underline changes are particularly effective. For navigation links, outline or box-shadow work well."
        },
        'ErrLinkFocusContrastFail': {
            'title': "Link focus indicator (outline, border, or underline) has contrast ratio < 3:1 against the background",
            'what': "Link focus indicator (outline, border, box-shadow, or underline) uses a color with contrast ratio less than 3:1 against the adjacent background color, failing WCAG 2.4.11 Focus Appearance (Level AA)",
            'why': "WCAG 2.4.11 requires focus indicators to have at least 3:1 contrast ratio to ensure they are perceivable by users with low vision (20/40 visual acuity baseline). Low-contrast focus indicators become invisible or barely visible to users with moderate vision impairments, users viewing content in bright environments, users on low-quality displays, and users with age-related contrast sensitivity loss. For links, which are often the primary navigation mechanism on pages, imperceptible focus indicators make keyboard navigation nearly impossible. Users cannot determine which link has focus, leading to accidental activation of wrong links, inability to navigate menus, confusion about page position, and complete breakdown of keyboard-based workflows. Links appear throughout pages, so focus indicator failures affect navigation, content access, and all interactive experiences.",
            'who': "Users with low vision requiring high-contrast focus indicators, users with moderate visual impairments (20/40 vision) representing the WCAG baseline, older users with age-related contrast sensitivity loss, users with color vision deficiencies who may not perceive low-contrast color differences, users viewing content in bright sunlight or office lighting, users on budget or older displays with poor contrast ratios, users with attention difficulties who need obvious focus indicators, and keyboard navigation users who rely on clear visual feedback",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Measure contrast ratio between your link focus indicator and all adjacent colors using a contrast checker tool. Choose indicator colors with at least 3:1 contrast against backgrounds. For light backgrounds, use dark indicators: a:focus { outline: 2px solid #0066cc; outline-offset: 2px; } or a:focus { text-decoration: underline; text-decoration-color: #0066cc; text-decoration-thickness: 2px; }. For dark backgrounds, use light indicators: a:focus { outline: 2px solid #ffffff; }. For links that appear on varying backgrounds (like navigation over hero images), use high-contrast colors that work in all contexts or implement dynamic focus styles that adapt to background. Consider two-color indicators for maximum visibility: a:focus { outline: 2px solid #0066cc; box-shadow: 0 0 0 4px rgba(255,255,255,0.8); }. Verify contrast for all link locations: navigation, content, footers, buttons. Test with actual users with low vision when possible."
        },
        'ErrLinkImageNoFocusIndicator': {
            'title': "Image link has no visible focus indicator (no outline, border, or box-shadow)",
            'what': "Link containing an image (logo, icon, thumbnail, or img element) has no visible focus indicator when keyboard focused, often due to outline:none or outline:0 removing the default focus styling",
            'why': "Image links are common for logos, social media icons, product thumbnails, gallery images, and icon-based navigation. Without visible focus indicators, keyboard users cannot tell when these image links have focus, making it impossible to know what will activate when pressing Enter. This is particularly problematic for image-heavy interfaces like galleries, product listings, and icon navigation where image links may be the primary or only way to access content. Users may accidentally activate the wrong image link because they couldn't see which one had focus, or may tab past important image links without realizing they were there. The problem is compounded when image links are small (like social media icons) - without clear focus indication, users with low vision or attention difficulties cannot locate the focused element. Image links in navigation are especially critical - if users cannot see focus indicators on logo or menu icons, primary site navigation becomes inaccessible.",
            'who': "Keyboard users who cannot see which image link has focus, users with low vision who need clear focus indicators to locate interactive images, users with attention or cognitive difficulties who cannot track invisible focus, users of screen magnification who zoom in and need focus indicators to find their position, users with motor disabilities who carefully target specific image links and need confirmation of focus, users navigating icon-heavy interfaces where image links are the primary interaction method, and mobile keyboard users on tablets where image links are common",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Add clear focus indicators to image links. For links containing images, add outline: a:has(img):focus { outline: 3px solid #0066cc; outline-offset: 2px; } or a img:focus { outline: 3px solid #0066cc; } (older browser support). Alternatively, use box-shadow which respects image bounds: a:has(img):focus { box-shadow: 0 0 0 3px #0066cc; }. For rounded or circular images (like avatars or social media icons), box-shadow or drop-shadow filter follows the shape: a:focus img { filter: drop-shadow(0 0 3px #0066cc); }. Ensure focus indicators are thick enough (at least 2-3px) to be visible around images and have sufficient contrast (3:1 minimum) against adjacent backgrounds. For transparent or light images on light backgrounds, consider multi-color indicators: a:has(img):focus { outline: 2px solid #0066cc; box-shadow: 0 0 0 4px rgba(255,255,255,0.8); }. Test by tabbing through your site with keyboard only - every image link should have an immediately obvious focus indicator."
        },
        'ErrLinkOutlineWidthInsufficient': {
            'title': "Link focus outline width is less than 2px",
            'what': "Link focus indicator uses CSS outline property but with width less than 2 CSS pixels (e.g., outline: 1px solid #color), failing to meet WCAG 2.4.11 minimum thickness requirements for perceivability",
            'why': "WCAG 2.4.11 requires focus indicators to be at least 2 CSS pixels thick to ensure visibility for users with low vision (20/40 visual acuity), users viewing content at a distance, users on low-resolution displays, and users in suboptimal viewing conditions. A 1px outline is too thin to be reliably perceived, especially for small targets like text links. Thin outlines can disappear against busy backgrounds, appear broken or dashed on certain displays, become invisible when zoomed in (due to sub-pixel rendering), or simply be too subtle for users with moderate visual impairments. Links are often small targets with thin outlines around text, making thickness particularly important. On high-DPI displays, 1px can be rendered as less than 1 physical pixel, making it nearly invisible. The 2px minimum is based on research calibrated to ensure perceivability for the WCAG baseline population (users with 20/40 vision).",
            'who': "Users with low vision who need thicker indicators to perceive them, users with moderate visual impairments (20/40 vision) representing the WCAG baseline, older users with reduced visual acuity, users viewing content on small screens or at a distance, users on low-resolution or standard displays where thin lines are hard to see, users in bright environments where thin indicators wash out, users with reduced contrast sensitivity who need thickness to compensate, users with attention difficulties who need obvious indicators, and users navigating link-dense content who need clear focus tracking",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Set outline-width to at least 2px: a:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. For better visibility, particularly for text links, use 3px: a:focus { outline: 3px solid #0066cc; }. Adding outline-offset: 2px creates visual separation from the text, improving perception. Test by tabbing through links with keyboard only - focus should be immediately obvious without squinting. For links in flowing text, consider combining outline with underline: a:focus { outline: 2px solid #0066cc; outline-offset: 2px; text-decoration: underline; text-decoration-thickness: 2px; }. For navigation links and buttons styled as links, thicker outlines (3-4px) provide even better visibility. Ensure outline color has at least 3:1 contrast against backgrounds. Consider using box-shadow in addition to outline for enhanced visibility: a:focus { outline: 2px solid #0066cc; box-shadow: 0 0 0 4px rgba(0,102,204,0.2); }."
        },
        'WarnColorOnlyLinkWeakIndicator': {
            'title': "Link in flowing text uses only subtle visual indicators (font-weight, bold, or text-shadow) in addition to color - these can be difficult for users to recognize as links",
            'what': "Link within flowing text content relies primarily on color to distinguish it from surrounding text, with only subtle additional indicators like font-weight changes (medium to bold), text-shadow, or slight size differences that may not be sufficient to identify the link without color perception",
            'why': "While technically these links have a non-color indicator (font-weight or text-shadow), these changes are often too subtle to be reliably perceived, especially by users with cognitive disabilities, users with low vision, users scanning quickly through content, or users with attention difficulties. Font-weight changes from regular (400) to bold (700) can be subtle in many fonts, particularly sans-serif fonts with minimal stroke variation. Text-shadow effects are often designed to be subtle and may be imperceptible to users with low vision or on low-quality displays. This creates a situation where links are technically distinguishable without color but practically difficult to identify, falling short of the spirit of WCAG 1.4.1. Users may miss links entirely, not realizing text is clickable, or may have to hover/focus every word to find links. In long articles with many inline links, this makes link discovery tedious and unreliable.",
            'who': "Users with color blindness who need strong non-color indicators to identify links, users with low vision who may not perceive subtle font-weight or shadow changes, users with cognitive disabilities who need obvious link affordances, users scanning content quickly who miss subtle indicators, users with attention difficulties who need clear visual distinctions, older users who may not perceive subtle typographic changes, users on low-quality displays where subtle effects are lost, and users with reading disabilities who need clear link identification to decide whether to follow links",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.1', '2.4.4'],
            'remediation': "For links in flowing text, use underline as the primary non-color indicator: a { text-decoration: underline; text-decoration-thickness: 1px; }. Underline is the universally recognized link affordance and is perceivable regardless of color. You can style underlines to be less intrusive: a { text-decoration: underline; text-decoration-color: rgba(0,102,204,0.5); text-decoration-thickness: 1px; } while still being perceivable. If you must avoid underlines for design reasons, use much stronger non-color indicators: significantly larger text (1.2em or more), substantial font-weight change (regular to extra-bold), visible border/box around link text, or icon before/after link. Better: provide underline on hover/focus to confirm interactivity: a:hover, a:focus { text-decoration: underline; text-decoration-thickness: 2px; }. Test by viewing in grayscale mode - can you easily identify which text is clickable? If not, the non-color indicators are too subtle."
        },
        'WarnLinkDefaultFocus': {
            'title': "Link uses browser default focus styles which vary across browsers and may fail contrast requirements",
            'what': "Link has no custom focus styles defined and relies entirely on browser default focus indicators, which vary significantly across browsers (Chrome, Firefox, Safari, Edge), operating systems (Windows, macOS, iOS, Android), and versions, creating inconsistent accessibility experiences",
            'why': "Browser default focus styles for links are highly inconsistent. Chrome shows a blue outline, Safari shows a blue glow/outline, Firefox shows a dotted outline, and these vary by OS and version. Some default styles fail WCAG contrast requirements against certain background colors (particularly light blue links on white backgrounds), some are too subtle for users with low vision, and some disappear entirely in certain contexts (custom link styles, dark mode, specific color combinations). Relying on defaults means you have no guarantee of accessibility compliance - your links might be accessible in Chrome but fail in Safari, or work on Windows but fail on macOS. Default styles also often conflict with custom link styling (colors, backgrounds, decorations), becoming invisible or creating confusing visual artifacts. You cannot test or verify compliance with defaults because they change based on user environment.",
            'who': "Users with low vision who need consistent, verifiable high-contrast focus indicators across all browsers, keyboard users who need reliable focus indication regardless of browser or platform, users with color vision deficiencies who may not perceive default focus colors in all contexts, quality assurance teams unable to ensure consistent accessibility across browsers, users with custom browser settings that alter default focus styles, international users accessing from various browsers and devices, users on older browsers with outdated default focus styles, and users with Windows High Contrast Mode where defaults may be overridden unpredictably",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Define explicit custom focus styles for all links that you control and can verify: a:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Choose colors with verified 3:1+ contrast against all backgrounds where links appear. For links in text, consider adding underline: a:focus { outline: 2px solid #0066cc; outline-offset: 2px; text-decoration: underline; text-decoration-thickness: 2px; }. Test your custom focus styles across Chrome, Firefox, Safari, and Edge on both Windows and macOS, and test on mobile browsers. Verify focus works with all link types: text links, image links, navigation links, footer links. Ensure focus styles work in Windows High Contrast Mode. Document focus indicator standards in your design system. Use CSS custom properties for consistency: :root { --link-focus-color: #0066cc; --link-focus-width: 2px; } a:focus { outline: var(--link-focus-width) solid var(--link-focus-color); }. Test that your custom styles are clearly visible and don't conflict with link text colors or backgrounds."
        },
        'WarnLinkFocusGradientBackground': {
            'title': "Link has gradient background - focus indicator contrast cannot be automatically verified and requires manual testing",
            'what': "Link appears on or contains a CSS gradient background (linear-gradient, radial-gradient, conic-gradient), making it impossible to automatically verify that the focus indicator meets WCAG 3:1 contrast requirement because background color varies continuously across the gradient",
            'why': "WCAG 2.4.11 requires focus indicators to have 3:1 contrast against adjacent colors, but gradients create an infinite range of adjacent colors. An outline that has sufficient contrast against the lightest part of a gradient may have insufficient contrast against the darkest part, or vice versa. Automated testing tools can only check contrast against a single sampled color, not against the full gradient range, making it impossible to guarantee compliance with automated tests alone. This creates a compliance risk - your focus indicator might pass automated testing but fail for actual users when focus occurs over certain parts of the gradient. Some focus colors will inevitably fail against portions of complex gradients, and you may not discover this until users report issues. Manual verification at multiple gradient points is required but time-consuming and error-prone.",
            'who': "Users with low vision who need high-contrast focus indicators that may be invisible against certain parts of gradient backgrounds, users with color vision deficiencies who cannot distinguish certain color combinations within gradients, accessibility testers who cannot reliably verify compliance with automated tools alone, developers who cannot confidently assert WCAG conformance without extensive manual testing across gradient ranges, quality assurance teams unable to automatically verify focus indicator visibility, and users viewing content in bright environments where low-contrast portions of gradients reduce indicator visibility",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Best solution: avoid placing links on gradient backgrounds, or avoid gradients on elements containing links. Use solid backgrounds that allow reliable contrast verification. If gradients are required for design: (1) manually verify focus indicator contrast against both the lightest AND darkest colors in the gradient using a contrast checker, (2) use multi-color indicators (outline + contrasting box-shadow) to ensure visibility across gradient range: a:focus { outline: 2px solid #0066cc; box-shadow: 0 0 0 4px rgba(255,255,255,0.9); }, (3) increase outline-offset to 3-4px to separate indicator from gradient, (4) use very high contrast colors that work across the full gradient spectrum, (5) apply a semi-opaque overlay on focus to normalize the background: a:focus { background-image: linear-gradient(rgba(255,255,255,0.3), rgba(255,255,255,0.3)), var(--original-gradient); outline: 2px solid #0066cc; }. Test with real users with low vision. Document gradient contrast verification in your accessibility testing procedures."
        },
        'WarnLinkOutlineOffsetTooLarge': {
            'title': "Link has both underline and outline with outline-offset > 1px, creating confusing visual gap that makes it unclear what element has focus",
            'what': "Link uses both text-decoration underline (either default or custom) and outline focus indicator with outline-offset greater than 1 pixel, creating a visual gap between the link text and its focus indicator that makes the relationship unclear",
            'why': "While outline-offset is generally beneficial for focus indicators by creating space between the element and indicator, too much offset on links that also have underlines creates visual confusion. With large outline-offset (2-3px), the outline appears to float far from the link text, making it unclear which element the outline is indicating. This is particularly problematic when multiple links are close together (like in navigation or densely linked content) - the outline might appear to be indicating a nearby link rather than the actual focused link. The underline and outline create competing visual signals with empty space between them, fragmenting the focus indicator. Users may not perceive the outline as belonging to the link, or may think focus is on the space between links. The confusion is amplified when outline-offset causes outlines of adjacent links to overlap or when focused links are near other interactive elements.",
            'who': "Keyboard users who become confused about which link has focus when outline appears detached from text, users with cognitive disabilities who cannot parse complex or ambiguous focus indicators, users with attention difficulties who are distracted by floating outlines, users with low vision using magnification who may see only the outline or only the link text without context, users navigating link-dense content where outline overlap creates confusion, and users with learning disabilities who need clear, unambiguous visual associations between focus indicators and elements",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.7'],
            'remediation': "For links with underlines, use smaller outline-offset or no offset: a:focus { outline: 2px solid #0066cc; outline-offset: 1px; text-decoration: underline; } or a:focus { outline: 2px solid #0066cc; outline-offset: 0; text-decoration: underline; text-decoration-thickness: 2px; }. The 0-1px offset keeps the outline visually connected to the link. Alternatively, rely primarily on underline changes for links in text: a { text-decoration: underline; text-decoration-thickness: 1px; } a:focus { text-decoration-thickness: 3px; outline: none; }. For navigation links without underlines, larger outline-offset works well: nav a:focus { outline: 2px solid #0066cc; outline-offset: 3px; }. If you need both outline and underline, consider removing the underline on focus to avoid dual indicators: a { text-decoration: underline; } a:focus { outline: 2px solid #0066cc; outline-offset: 2px; text-decoration: none; }. Test with actual users to verify the focus indicator is clearly associated with the link."
        },
        'WarnLinkTransparentOutline': {
            'title': "Link focus outline or border uses semi-transparent color (alpha < 0.5) which cannot guarantee sufficient contrast across all backgrounds",
            'what': "Link focus indicator uses a color with semi-transparent alpha channel (opacity less than 0.5 in rgba() or hsla()), making the final rendered color unpredictable and dependent on the background color stack beneath the link",
            'why': "Semi-transparent focus indicators change appearance based on what's behind them - link color, background color, container backgrounds, images, gradients. With alpha less than 0.5, even bright indicator colors become faint and may be imperceptible against certain backgrounds. A bright blue outline at 40% opacity might look acceptable against white background but become nearly invisible against a light blue background, or vice versa. Automated testing cannot verify contrast with transparent colors because final rendered color depends on the entire CSS cascade and background stack. The focus indicator might pass testing in your development environment but fail when links appear over different backgrounds, in navigation overlays, on varying page backgrounds, or when users apply custom stylesheets. Links appear in many contexts throughout sites (navigation, content, footers, sidebars, overlays), each with potentially different backgrounds, making transparent indicators particularly risky.",
            'who': "Users with low vision who need high-contrast focus indicators that transparent colors may not provide reliably, users with color vision deficiencies who cannot perceive subtle transparent indicators, users viewing content in bright environments where low-opacity indicators wash out, accessibility testers unable to verify compliance with transparent indicators across all contexts, developers who cannot guarantee WCAG conformance without testing every link placement, users with custom browser stylesheets that alter backgrounds unpredictably, users in Windows High Contrast Mode where transparency behaves differently, and users with attention difficulties who need strong, obvious focus indicators",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Use fully opaque colors (alpha = 1.0) for link focus indicators: a:focus { outline: 2px solid rgb(0, 102, 204); outline-offset: 2px; } or a:focus { outline: 2px solid #0066cc; }. Choose colors with verified 3:1+ contrast against all backgrounds where links appear (navigation backgrounds, content backgrounds, footer backgrounds). If transparency is desired for aesthetic subtlety, use it for supplementary effects only with an opaque primary indicator: a:focus { outline: 2px solid #0066cc; box-shadow: 0 0 8px rgba(0,102,204,0.3); } - the outline provides accessibility, the shadow provides aesthetic glow. Never rely on transparency alone. Test links in all contexts: in-content links, navigation links, footer links, links over images, links in modals/overlays. If alpha < 1 is required, ensure alpha >= 0.8 and manually verify contrast in every context where links appear. Consider using CSS custom properties to define focus styles centrally and apply consistently across all link types."
        },
        'ErrMainLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Main landmark has both aria-label and aria-labelledby attributes",
            'what': "Main landmark has both aria-label and aria-labelledby attributes",
            'why': "Conflicting labeling methods may cause confusion",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method - either aria-label or aria-labelledby"
        },
        'ErrMainLandmarkHasTabindexOfZeroCanOnlyHaveMinusOneAtMost': {
            'title': "Main landmark has tabindex=\"0\" which is inappropriate",
            'what': "Main landmark has tabindex=\"0\" which is inappropriate",
            'why': "Landmarks should not be in the tab order",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove tabindex or use tabindex=\"-1\" if programmatic focus is needed"
        },
        'ErrMainLandmarkIsHidden': {
            'title': "Main landmark is hidden from view",
            'what': "Main landmark is hidden from view",
            'why': "Hidden main content defeats the purpose of the landmark",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure main landmark is visible or remove if not needed"
        },
        'ErrMainLandmarkMayNotbeChildOfAnotherLandmark': {
            'title': "Main landmark nested inside another landmark",
            'what': "Main landmark nested inside another landmark",
            'why': "Invalid landmark nesting breaks structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move main outside of other landmarks"
        },
        'ErrMapAriaHidden': {
            'title': "Map element hidden from assistive technologies with aria-hidden",
            'what': "Map element hidden from assistive technologies with aria-hidden",
            'why': "Hiding maps completely removes access to important geographic or spatial information for screen reader users.",
            'who': "Blind and low vision users who need text alternatives for map information.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Remove aria-hidden from maps, provide appropriate text alternatives and accessible controls instead."
        },
        'ErrMapMissingTitle': {
            'title': "Map iframe missing title attribute",
            'what': "Map iframe missing title attribute",
            'why': "Without titles, screen reader users don\'t know what the embedded map contains or represents.",
            'who': "Screen reader users who need to understand embedded content purpose.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.1.1'],
            'remediation': "Add descriptive title attribute to map iframes (e.g., title=\"Map showing office location\")."
        },
        'ErrMissingAccessibleName': {
            'title': "Interactive element has no accessible name",
            'what': "Interactive element has no accessible name",
            'why': "Without accessible names, screen reader users cannot identify or interact with controls.",
            'who': "Screen reader users who cannot identify unnamed controls, voice control users who cannot target elements.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-label, aria-labelledby, or visible text labels to all interactive elements."
        },
        'ErrMissingCloseButton': {
            'title': "Modal or dialog missing close button",
            'what': "Modal or dialog missing close button",
            'why': "Without a close button, users can become trapped in modals with no way to return to main content.",
            'who': "Keyboard users who cannot use escape key, screen reader users who need explicit close controls.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.2'],
            'remediation': "Add visible close button to all modals and dialogs, ensure it\'s keyboard accessible and properly labeled."
        },
        'ErrDocumentLinkMissingFileType': {
            'title': "Document link missing file type indication",
            'what': "Link to downloadable document does not indicate the file type in its accessible name",
            'why': "Users need to know they're about to download a file and what type before activating the link. Without this information, users experience unexpected downloads, which is problematic for mobile users with limited data plans and screen reader users who cannot see file icons.",
            'who': "Screen reader users who cannot see file type icons, mobile users managing data usage, users with cognitive disabilities who benefit from explicit warnings, users on metered connections.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.4'],
            'remediation': "Include the file type in the link text (e.g., 'Annual Report (PDF)' or 'Budget Spreadsheet (Excel)'). Alternatively, use aria-label to provide this information (e.g., aria-label='Annual Report PDF document')."
        },
        'WarnMissingDocumentMetadata': {
            'title': "Document link missing file size or metadata",
            'what': "Link to downloadable document does not provide file size or other helpful metadata",
            'why': "Users benefit from knowing file size to make informed download decisions, especially on mobile devices or metered connections. Page count or document length helps users understand time commitment.",
            'who': "Mobile users on limited data plans, users with slow internet connections, users with limited device storage, users with cognitive disabilities who benefit from clear expectations.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.4'],
            'remediation': "Include file size and optionally page count in the link text or nearby (e.g., 'Annual Report (PDF, 3.2 MB, 48 pages)'). This can be in the link text, aria-describedby content, or adjacent text."
        },
        'ErrMissingDocumentType': {
            'title': "HTML document missing DOCTYPE declaration",
            'what': "HTML document is missing the DOCTYPE declaration (<!DOCTYPE html>) at the beginning",
            'why': "Missing DOCTYPE causes browsers to render in 'quirks mode' using outdated parsing rules, leading to unpredictable rendering behavior, CSS inconsistencies, JavaScript issues, and broken assistive technology compatibility.",
            'who': "All users due to unpredictable rendering behavior, assistive technology users whose tools may not parse correctly, screen reader users experiencing navigation issues, keyboard users with incorrect focus indicators.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.1'],
            'remediation': "Add <!DOCTYPE html> as the very first line of every HTML document, before the <html> tag. Ensure no characters (including spaces or byte-order marks) appear before the DOCTYPE."
        },
        'ErrMissingMainLandmark': {
            'title': "Page missing main landmark for primary content",
            'what': "Page missing main landmark for primary content",
            'why': "Without a main landmark, screen reader users cannot quickly navigate to the primary content area.",
            'who': "Screen reader users who navigate by landmarks, keyboard users using landmark navigation.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add <main> element or role=\"main\" to identify the primary content area of each page."
        },
        'ErrMissingTabindex': {
            'title': "<{elementTag}> with event handler not keyboard accessible - missing tabindex",
            'what': "This <{elementTag}> element has a mouse event handler (onclick, onmousedown, etc.) but lacks tabindex, making it completely inaccessible to keyboard users",
            'why': "Non-interactive elements like <div> and <span> are not focusable by default. Adding mouse event handlers without tabindex=\"0\" creates a complete barrier - keyboard users cannot focus the element, cannot activate it with Enter/Space, and screen readers may not announce it as interactive. This is a critical accessibility failure.",
            'who': "Keyboard users who cannot use a mouse, screen reader users navigating by Tab key, users with motor disabilities who rely on keyboard navigation, voice control users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1 Keyboard', '2.1.3 Keyboard (No Exception)'],
            'remediation': "Option 1 (Recommended): Replace the <{elementTag}> with a semantic <button> element, which is keyboard accessible by default and provides proper semantics. Option 2: Add tabindex=\"0\" to make it focusable, AND add a keyboard event handler (onkeydown/onkeyup) to handle Enter and Space keys. Option 3: Add role=\"button\" AND tabindex=\"0\" AND keyboard event handlers. Native HTML buttons are strongly preferred as they provide all accessibility features automatically."
        },
        'ErrModalMissingClose': {
            'title': "Modal dialog has no way to close it",
            'what': "Modal dialog has no way to close it",
            'why': "Users become trapped in the modal with no way to return to the main content.",
            'who': "All users, especially keyboard users who cannot click outside to close.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.2'],
            'remediation': "Provide at least one clear way to close modals (close button, escape key, cancel button)."
        },
        'ErrModalMissingHeading': {
            'title': "Modal has h{foundLevel} heading but should use h2 or h1",
            'what': "Modal has h{foundLevel} heading (\"{headingText}\") but should use h2 (or h1) for proper document structure",
            'why': "Without proper heading structure, users don\'t know the purpose or context of the modal content. Modals should start with h1 or h2 headings to maintain document structure and provide clear context.",
            'who': "Screen reader users who need to understand modal purpose and navigate by headings, users with cognitive disabilities who rely on clear document structure.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.6'],
            'remediation': "Change the modal heading from h{foundLevel} to h2 (or h1 if this is the page's main heading). Current heading: \"{headingText}\". Modals should use h2 to maintain proper document hierarchy and provide clear context for all users."
        },
        'ErrModalWithoutEscape': {
            'title': "Modal cannot be closed using the Escape key",
            'what': "Modal cannot be closed using the Escape key",
            'why': "Escape key is the expected keyboard shortcut for closing modals; without it, keyboard users may become trapped.",
            'who': "Keyboard users who expect standard modal behavior, power users who rely on keyboard shortcuts.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.2'],
            'remediation': "Implement Escape key handler to close modals, ensure it works even when focus is within modal content."
        },
        'ErrMouseOnlyHandler': {
            'title': "Interactive functionality only available through mouse events",
            'what': "Element has mouse event handler (onclick, onmouseover, etc.) but lacks keyboard event handlers, making it inaccessible to keyboard users",
            'why': "Mouse-only interactions exclude users who cannot use a pointing device. While adding role=\"button\" helps screen readers identify the element as interactive, it does not provide keyboard functionality - keyboard event handlers are still required.",
            'who': "Keyboard users, screen reader users, users with motor disabilities, mobile device users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1'],
            'remediation': "Best practice: Use a <button> element instead of <div> or <span>, which provides mouse and keyboard support automatically. If you must use a non-button element: (1) Add role=\"button\" for screen reader support, (2) Add tabindex=\"0\" to make it keyboard focusable, (3) Add onkeydown handler to respond to Enter and Space keys: onkeydown=\"if(event.key==='Enter'||event.key===' '){/* your action */}\". Note that role=\"button\" alone does NOT provide keyboard functionality."
        },
        'ErrMultipleBannerLandmarks': {
            'title': "Multiple banner landmarks found",
            'what': "Multiple banner landmarks found",
            'why': "Multiple headers confuse page structure",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use only one banner landmark"
        },
        'ErrMultipleContentinfoLandmarks': {
            'title': "Multiple contentinfo landmarks found",
            'what': "Multiple contentinfo landmarks found",
            'why': "Multiple footers confuse page structure",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use only one contentinfo landmark"
        },
        'ErrMultipleH1': {
            'title': "Page contains {count} h1 elements instead of just one",
            'what': "Page contains {count} h1 elements instead of just one",
            'why': "Having {count} h1 elements creates confusion about the page\'s main topic. Each h1 represents a primary heading, and multiple h1s suggest multiple main topics, breaking the document hierarchy. Screen readers users won\'t know which h1 represents the actual page topic.",
            'who': "Screen reader users who expect a single h1 to identify the page topic, users navigating by headings who see multiple \"top level\" items, SEO and search engines that look for a single main topic",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Keep only one h1 that represents the main page topic. Change the other h1 elements to h2 or appropriate lower levels based on their relationship to the main topic."
        },
        'ErrMultipleMainLandmarks': {
            'title': "Multiple main landmark regions found on the page",
            'what': "Multiple main landmark regions found on the page",
            'why': "The main landmark should contain THE primary content of the page - having multiple main landmarks is like having multiple \"Chapter 1\" sections in a book. It confuses the page structure and defeats the purpose of landmarks. Screen reader users expecting to jump to the main content won\'t know which landmark contains the actual primary content. They might land in the wrong section, miss important content, or have to check multiple \"main\" areas. This ambiguity makes the landmark system unreliable and forces users back to linear navigation.",
            'who': "Screen reader users relying on the main landmark to skip to primary content, keyboard users using landmark navigation extensions, users with cognitive disabilities who need clear, unambiguous page structure, and developers trying to understand the intended page structure",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Use only one <main> element or role=\"main\" per page. Identify which content is truly the primary, unique content for that page and wrap only that in the main landmark. If you have multiple important sections, use other appropriate landmarks (article, section) or headings to structure them within the single main landmark. The main should contain all unique page content but exclude repeated elements like headers, navigation, and footers."
        },
        'ErrMultiplePageTitles': {
            'title': "{count} <title> elements found in the document head, which causes unpredictable behavior",
            'what': "{count} <title> elements found in the document head. HTML specification requires exactly one <title> element per document.",
            'why': "Having {count} title elements causes browsers to choose unpredictably between them, creating inconsistent page identification. Different browsers and assistive technologies may choose different titles from the {count} available, creating an inconsistent experience across devices and tools. Screen readers may announce one title while the browser tab displays another. Search engines may index the wrong title, hurting SEO and discoverability. Users bookmarking the page may see a different title than intended.",
            'who': "All users seeing inconsistent titles in browser tabs, screen reader users who may hear different titles than what's visually displayed, users bookmarking pages with incorrect titles, search engine users who may see wrong titles in search results",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.2'],
            'remediation': "Remove all but one <title> element from the document head. Keep only the most descriptive title that accurately represents the page content. Check for scripts or templates that might be adding titles dynamically. Ensure your CMS or framework isn't creating duplicate titles through multiple includes or components."
        },
        'ErrAutoplayWithoutControls': {
            'title': "Media has autoplay but no controls",
            'what': "Video or audio element has autoplay attribute but no controls, preventing users from pausing or stopping the content",
            'why': "Autoplaying media without controls violates WCAG 1.4.2 (Audio Control) and 2.2.2 (Pause, Stop, Hide). Users must be able to pause or stop autoplaying media, especially audio that plays longer than 3 seconds. Without controls, autoplaying audio interferes with screen readers, distracts users, and can cause accessibility barriers for users with cognitive disabilities.",
            'who': "Screen reader users who cannot hear page content over autoplaying audio, users with cognitive disabilities who are distracted by movement or sound, keyboard users who need accessible pause controls.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.2', '2.2.2'],
            'remediation': "Add controls attribute to provide accessible pause/stop functionality. Alternatively, remove autoplay entirely or provide a visible, keyboard-accessible mechanism to pause or stop the media immediately when the page loads."
        },
        'ErrNativeVideoMissingControls': {
            'title': "Native HTML5 video element missing controls attribute",
            'what': "Native HTML5 video element missing controls attribute",
            'why': "Without controls, users cannot play, pause, or adjust video playback.",
            'who': "All users who need to control video playback, especially keyboard and screen reader users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1'],
            'remediation': "Add controls attribute to all video elements, or provide custom accessible controls."
        },
        'ErrNavLandmarkAccessibleNameIsBlank': {
            'title': "Navigation landmark has blank accessible name",
            'what': "Navigation landmark has blank accessible name",
            'why': "Multiple nav areas need labels",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add aria-label like \"Main navigation\" or \"Footer navigation\""
        },
        'ErrNavLandmarkContainsOnlyWhiteSpace': {
            'title': "Navigation landmark contains only whitespace",
            'what': "Navigation landmark contains only whitespace",
            'why': "Whitespace-only navigation is not functional",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Add navigation links or remove the landmark"
        },
        'ErrNavLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Navigation landmark has both aria-label and aria-labelledby",
            'what': "Navigation landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrNavMissingAccessibleName': {
            'title': "Navigation element lacks accessible name to distinguish it",
            'what': "Navigation element lacks accessible name to distinguish it",
            'why': "When pages have multiple navigation areas, users need to distinguish between them.",
            'who': "Screen reader users navigating by landmarks, users who need to understand page structure.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby to nav elements to identify their purpose (e.g., \"Main navigation\", \"Breadcrumb\")."
        },
        'WarnNavMissingAccessibleName': {
            'title': "Navigation element should have accessible name",
            'what': "Single navigation element lacks accessible name",
            'why': "While less critical with only one navigation, adding an accessible name improves clarity and is a best practice.",
            'who': "Screen reader users navigating by landmarks, users who need to understand page structure.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby to nav element to identify its purpose (e.g., \"Main navigation\", \"Site navigation\")."
        },
        'ErrNegativeTabindex': {
            'title': "Negative tabindex on interactive element",
            'what': "Negative tabindex on interactive element",
            'why': "Element removed from tab order",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Use tabindex=\"0\" for interactive elements"
        },
        'ErrNestedNavLandmarks': {
            'title': "Navigation landmarks are nested",
            'what': "Navigation landmarks are nested",
            'why': "Confusing navigation structure",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Flatten navigation structure"
        },
        'ErrNoAlt': {
            'title': "Image missing alt attribute entirely",
            'what': "Image missing alt attribute entirely",
            'why': "Without alt attributes, screen readers cannot convey any information about images to users.",
            'who': "Blind and low vision users using screen readers, users with images disabled.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Add alt attribute to all img elements; use alt=\"\" for decorative images, descriptive text for informative images."
        },
        'ErrNoBannerLandmarkOnPage': {
            'title': "Page is missing a banner landmark to identify the site header region",
            'what': "Page is missing a banner landmark to identify the site header region",
            'why': "The banner landmark identifies the site header which typically contains the site logo, main navigation, and search functionality. This content appears consistently across pages and users expect to find it at the top. Without proper banner markup, screen reader users cannot quickly jump to the header area using landmark navigation shortcuts. They must instead navigate through all content linearly or guess where the header content begins and ends. This makes it difficult to access primary navigation or return to the site homepage via the logo link, tasks that sighted users can do instantly by looking at the top of the page.",
            'who': "Screen reader users who use landmark navigation to quickly access site navigation and branding, keyboard users who want to efficiently navigate to header elements, users with cognitive disabilities who rely on consistent page structure to orient themselves, and users with low vision using screen magnifiers who need to quickly locate navigation elements",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Use the HTML5 <header> element for your site header (it has an implicit role of banner when it\'s not nested inside article, aside, main, nav, or section elements). Alternatively, add role=\"banner\" to the container holding your header content. There should typically be only one banner landmark per page at the top level. Include site-wide content like logo, primary navigation, and site search within the banner landmark."
        },
        'ErrNoFocusIndicator': {
            'title': "Interactive element has no visible focus indicator when focused, making keyboard navigation impossible to track",
            'what': "Interactive element has no visible focus indicator when focused, making keyboard navigation impossible to track",
            'why': "Focus indicators show keyboard users where they are on the page - without them, it\'s like navigating in the dark. Users cannot see which element will be activated when they press Enter or Space, making it impossible to navigate confidently. They might activate the wrong control, skip important content, or become completely lost on the page. This is especially critical for forms where activating the wrong button could submit incomplete data or cancel an operation.",
            'who': "Keyboard users who need to see their current position, users with attention or memory disabilities who lose track of focus position, users with low vision who need clear visual indicators, users with motor disabilities who need to carefully track navigation, and any user who temporarily cannot use a mouse",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Ensure all interactive elements have a visible focus indicator using CSS :focus styles. Add outline, border, background color, or box-shadow changes. Make focus indicators clearly visible with sufficient color contrast (3:1 minimum). Never use outline: none without providing an alternative indicator. Consider using :focus-visible for keyboard-only focus styles. Test by tabbing through your entire page to ensure every interactive element shows focus clearly."
        },
        'ErrNoH1': {
            'title': "Page has no h1 heading",
            'what': "Page has no h1 heading",
            'why': "H1 headings identify the main topic of a page and are crucial for document structure.",
            'who': "Screen reader users who navigate by headings, users who rely on document outlines.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add exactly one h1 heading that describes the main content or purpose of the page."
        },
        'ErrNoHeadingsOnPage': {
            'title': "No heading elements (h1-h6) found anywhere on the page",
            'what': "No heading elements (h1-h6) found anywhere on the page",
            'why': "Headings create the structural outline of your content, like a table of contents. They allow users to understand how information is organized and navigate directly to sections of interest. Without any headings, screen reader users cannot use heading navigation shortcuts (one of their primary navigation methods) and must read through all content linearly. This is like forcing someone to read an entire book without chapter titles or section breaks. Users cannot skim content, jump to relevant sections, or understand the information hierarchy. For users with cognitive disabilities, the lack of visual structure makes content overwhelming and hard to process.",
            'who': "Screen reader users who lose a critical navigation method and cannot understand content structure, users with cognitive disabilities who need clear visual organization to process information, users with attention disorders who rely on headings to focus on relevant sections, and users with reading disabilities who use headings to break content into manageable chunks",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add semantic heading elements (h1-h6) to structure your content. Start with one h1 that describes the main page topic. Use h2 for major sections, h3 for subsections, and so on. Don\'t skip levels (e.g., h1 to h3). Ensure headings describe the content that follows them. Never use headings just for visual styling - they must represent actual content structure. If you need large text without semantic meaning, use CSS instead."
        },
        'ErrNoLabel': {
            'title': "Form input has no associated label",
            'what': "Form input has no associated label",
            'why': "Without labels, users don\'t know what information to enter in form fields.",
            'who': "Screen reader users who cannot identify form fields, users with cognitive disabilities.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Add label elements with for attribute, or use aria-label/aria-labelledby for each form input."
        },
        'ErrInputNoVisibleFocus': {
            'title': "Text input field has no visible focus indicator (outline:none, no border change, no box-shadow)",
            'what': "Text input field completely removes the default focus outline (using outline:none or outline:0) without providing any alternative visual indicator such as border changes, box-shadow, background color changes, or other visible focus styling",
            'why': "Keyboard users must be able to see which form field currently has focus to know where they are in the form and what field will receive their typing. Without any visible focus indicator, users navigating by keyboard or assistive technology cannot determine which input is active, making form completion impossible or extremely difficult. This is particularly problematic for long forms where users may lose track of their position, for users with attention difficulties who need clear visual feedback, and for users with low vision who may not be able to identify focus through context alone. Removing outline:none for aesthetic reasons without replacement is one of the most common and severe accessibility failures.",
            'who': "Keyboard-only users who cannot see which field has focus, screen reader users who need visual confirmation of focus position, users with motor disabilities using keyboard or switch controls, users with attention or memory difficulties who lose track of form position without visual cues, users with low vision who rely on focus indicators to track their position in forms, and users with cognitive disabilities who need clear visual feedback to complete multi-step forms",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11', '2.4.3'],
            'remediation': "Never use outline:none or outline:0 without providing a clear alternative focus indicator. Best practice: use outline with outline-offset for clear, accessible focus: input:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Alternative approaches: increase border thickness on focus (from 1px to 3px), add a colored box-shadow (box-shadow: 0 0 0 3px rgba(0,102,204,0.5)), change background color with sufficient contrast, or combine multiple indicators for maximum visibility. Ensure focus indicators have at least 3:1 contrast ratio against adjacent colors per WCAG 2.4.11. Test by tabbing through your form with keyboard only - every input should have an obvious, immediately visible focus indicator. Never rely solely on subtle changes that may not be perceivable."
        },
        'ErrInputColorChangeOnly': {
            'title': "Input field focus indicator relies solely on border color change without structural change",
            'what': "Input field indicates focus by changing only the color of its border (or background) without any accompanying structural change such as increased border width, box-shadow, outline, or other geometric modification",
            'why': "WCAG Success Criterion 1.4.1 (Use of Color) requires that color not be used as the only visual means of conveying information. Focus indication is critical information, so relying solely on color change fails this criterion. Users with color blindness (affecting approximately 8% of men), users with low contrast sensitivity, users on monochrome displays, and users in bright environments may not perceive color-only changes. A border that changes from gray to blue looks identical to some colorblind users. Users who cannot perceive the color change cannot determine which field has focus, making keyboard navigation unreliable. This affects form completion, error correction, and any multi-step process.",
            'who': "Users with color blindness (particularly red-green color blindness affecting 8% of males) who cannot distinguish color changes, users with low vision or contrast sensitivity who may not perceive subtle color shifts, users on low-quality or monochrome displays where color differences are minimal, users in bright sunlight or poor lighting conditions where colors wash out, users with age-related vision changes affecting color perception, and users relying on Windows High Contrast Mode where color changes may be suppressed",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.1', '2.4.7', '1.4.11'],
            'remediation': "Add a structural change in addition to color change. Options: (1) Increase border width on focus (e.g., from 1px to 3px), (2) Add box-shadow: 0 0 0 3px rgba(0,102,204,0.5), (3) Add outline with outline-offset: 2px, (4) Combine border width increase with color change, (5) Add an inner or outer glow effect via box-shadow. The structural change provides a geometric indicator independent of color that all users can perceive. Example: input:focus { border: 3px solid #0066cc; } or input:focus { border-color: #0066cc; box-shadow: 0 0 0 2px rgba(0,102,204,0.3); }. Test your focus indicators in grayscale mode or with color blindness simulation tools to ensure they remain visible without color."
        },
        'ErrInputFocusContrastFail': {
            'title': "Input field focus indicator has insufficient color contrast (< 3:1) against background",
            'what': "Input field focus indicator (outline, border, or box-shadow) has a color contrast ratio less than 3:1 against the adjacent background colors, failing WCAG 2.4.11 Focus Appearance (Level AA)",
            'why': "WCAG 2.4.11 requires that focus indicators have at least 3:1 contrast ratio against adjacent colors to ensure they are perceivable by users with low vision or color deficiencies. A low-contrast focus indicator may be invisible or barely visible to users with moderate vision impairments, users viewing content in bright environments, users on low-quality displays, or users with age-related contrast sensitivity loss. When focus indicators fail contrast requirements, keyboard users cannot reliably track their position in forms, leading to errors, incomplete form submissions, confusion about which field is active, and general inability to complete tasks requiring form input. The 3:1 contrast requirement is specifically calibrated to ensure perceivability for users with 20/40 vision.",
            'who': "Users with low vision who need high-contrast focus indicators to track position, users with moderate visual impairments (20/40 vision) who represent the WCAG baseline, older users with age-related contrast sensitivity loss, users with color vision deficiencies who may not perceive subtle color differences, users viewing forms in bright sunlight or office lighting that washes out low-contrast indicators, users on budget displays with poor contrast ratios, and users with attention difficulties who need obvious visual feedback to maintain focus",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11', '1.4.3'],
            'remediation': "Measure the contrast ratio between your focus indicator color and all adjacent colors (input background, page background, container backgrounds) using a contrast checker tool. Choose focus indicator colors with at least 3:1 contrast against all adjacent colors. Common high-contrast options: dark blue (#0066cc) on light backgrounds, white or yellow on dark backgrounds, or two-color indicators (outline + box-shadow in contrasting colors) for maximum visibility. Test focus indicators: input:focus { outline: 2px solid #0066cc; outline-offset: 2px; } provides strong contrast on light backgrounds. For complex layouts with varying backgrounds, consider using a drop-shadow or multi-color indicator that maintains contrast in all contexts. Verify contrast in all input states (empty, filled, error, disabled) and against all background colors where inputs appear."
        },
        'ErrInputSingleSideBoxShadow': {
            'title': "Input field uses single-sided box-shadow for focus indicator (does not follow field shape)",
            'what': "Input field uses box-shadow with directional offset (non-zero x or y values) as its focus indicator, causing the shadow to appear only on one or two sides rather than surrounding the entire input field",
            'why': "Focus indicators must clearly and unambiguously surround or highlight the entire interactive element to properly communicate focus state. A box-shadow that appears only on the bottom or right side can be easily missed by users who are looking at other parts of the input, users with reduced peripheral vision, or users who have zoomed in and see only part of the field. Single-sided shadows are often interpreted as decorative drop shadows rather than focus indicators, causing confusion about which element actually has focus. The indicator may blend into general page styling, adjacent element shadows, or container decorations, making it indistinguishable from non-focused elements. Users tabbing quickly through forms may miss single-sided indicators entirely.",
            'who': "Keyboard users who need complete perimeter indicators to quickly identify focused fields, users with reduced peripheral vision who may only see part of the input field, users zoomed in at 200%+ who see only a portion of the field at once, users with attention difficulties who need unambiguous, immediately obvious focus indicators, users with cognitive disabilities who cannot distinguish decorative shadows from functional focus indicators, and users with low vision who need full-perimeter indicators for reliable focus tracking",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Modify box-shadow to have zero x and y offset, creating a complete perimeter indicator: input:focus { box-shadow: 0 0 0 3px #0066cc; }. The four values (0 0 0 3px) mean: 0 horizontal offset, 0 vertical offset, 0 blur radius, 3px spread radius - creating a solid, border-like effect on all four sides. Better yet, use outline with outline-offset which is designed specifically for focus indication: input:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. If you want to keep a directional shadow for aesthetic reasons, add a zero-offset shadow specifically for accessibility: input:focus { box-shadow: 0 0 0 2px #0066cc, 2px 2px 4px rgba(0,0,0,0.2); } - the first shadow provides accessibility, the second provides style."
        },
        'ErrInputBorderChangeInsufficient': {
            'title': "Input field border thickens on focus but change is less than 1px (not manifest)",
            'what': "Input field indicates focus by increasing border width, but the increase is less than 1 CSS pixel (e.g., from 1px to 1.5px), making the change imperceptible to most users",
            'why': "WCAG 2.4.11 requires that focus indicators use a change in contrasting color with sufficient thickness (at least 2 CSS pixels) or a change of at least 1 CSS pixel in thickness. Sub-pixel border increases (like 0.5px) are either rounded by browsers to whole pixels (making them invisible) or rendered as semi-transparent pixels that provide insufficient visual difference. A change from 1px to 1.5px border might be intended as a 0.5px increase but gets rounded to either 1px or 2px depending on pixel alignment and browser rendering, making it unreliable and often imperceptible. Users cannot reliably detect border thickness changes smaller than 1 full pixel, especially on standard-resolution displays, when viewing at normal zoom levels, or when focusing quickly through form fields.",
            'who': "All keyboard users who need reliably perceivable focus indicators, users with low vision who cannot detect sub-pixel changes, users with attention difficulties who need obvious focus state changes, users on standard-resolution displays where sub-pixel rendering is problematic, users who tab quickly through forms and need immediate, obvious feedback, and users with cognitive disabilities who cannot track focus without clear visual changes",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Increase border width by at least 1 full CSS pixel on focus. If default state has border: 1px solid #ccc, change to border: 2px solid #0066cc on focus (1px increase). Better: change from 1px to 3px (2px increase) for more obvious indication. Example: input { border: 1px solid #ccc; } input:focus { border: 3px solid #0066cc; }. If border changes cause layout shift (pushing adjacent content), either: (1) use outline instead which doesn't affect layout, (2) reduce padding on focus to compensate for border increase, or (3) use box-shadow: 0 0 0 2px #0066cc which doesn't affect layout. Always prefer whole-pixel values (1px, 2px, 3px) over fractional values (1.5px, 0.5px) for reliable cross-browser rendering."
        },
        'ErrInputOutlineWidthInsufficient': {
            'title': "Input field focus outline is less than 2px wide",
            'what': "Input field focus indicator uses CSS outline property but with width less than 2 CSS pixels (e.g., outline: 1px solid #color), failing to meet WCAG 2.4.11 minimum thickness requirements",
            'why': "WCAG 2.4.11 requires focus indicators to be at least 2 CSS pixels thick to ensure visibility for users with low vision, users viewing content at a distance, users on low-resolution displays, and users in less-than-ideal viewing conditions. A 1px outline is too thin to be reliably perceived, especially when combined with outline-offset which creates space between the element and indicator. Thin outlines can disappear against certain backgrounds, appear broken or dashed on high-DPI displays, or be invisible to users with moderate visual impairments. The 2px minimum is based on research showing that thinner indicators fail to provide reliable visual feedback for users with 20/40 vision (the WCAG baseline for low vision).",
            'who': "Users with low vision who need thicker focus indicators to perceive them reliably, users with moderate visual impairments (20/40 vision) representing the WCAG baseline, older users with reduced visual acuity, users viewing forms on small screens or at a distance, users on low-resolution or budget displays, users in bright environments where thin indicators wash out, users with reduced contrast sensitivity, and users with attention difficulties who need obvious focus indicators",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Set outline-width to at least 2px: input:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. For even better visibility, use 3px: input:focus { outline: 3px solid #0066cc; }. The combination of 2-3px width with 2px outline-offset creates clear, visible focus indication that works across different backgrounds and viewing conditions. Test your focus indicators: tab through the form and ensure outlines are immediately, obviously visible without squinting or close inspection. If 2px still seems subtle, increase to 3px and test with users who have low vision. Ensure outline color has at least 3:1 contrast against adjacent backgrounds. Consider combining outline with box-shadow for extra visibility: input:focus { outline: 2px solid #0066cc; outline-offset: 2px; box-shadow: 0 0 0 1px rgba(0,102,204,0.2); }"
        },
        'WarnInputNoBorderOutline': {
            'title': "Input field uses border/box-shadow changes but no separate outline for focus indicator",
            'what': "Input field indicates focus using border thickness changes, border color changes, or box-shadow, but does not use the CSS outline property which is specifically designed for focus indication and does not affect layout",
            'why': "While using border or box-shadow for focus indication can work, outline is specifically designed for this purpose and has advantages: it does not cause layout shift (borders increase element size, potentially moving adjacent content), it follows the element shape on rounded corners naturally, it can be easily offset from the element using outline-offset, and it is more predictable across browsers. Border-based focus indicators can cause layout jumpiness when border width changes, forcing reflow of surrounding content and creating a jarring user experience. Box-shadow does not cause layout shift but may be less visible than outline in some contexts and can be clipped by overflow:hidden on parent containers. Outline is the recommended best practice for focus indicators in WCAG documentation.",
            'who': "All keyboard users benefit from reliable, non-shifting focus indicators, users with attention or cognitive difficulties who are distracted by layout shifts when focus moves, users with motor impairments who lose their place when content shifts during focus changes, users with low vision using zoom who experience jarring movements when borders cause reflow, developers maintaining forms who want predictable, layout-stable focus behavior, and designers implementing consistent focus indication across different input types and sizes",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.7'],
            'remediation': "Replace border-based or box-shadow-based focus indicators with outline for more predictable behavior: input:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. This provides clear focus indication without causing layout shift. If you prefer the appearance of box-shadow or need to support complex shapes, ensure it: (1) uses zero offset for complete perimeter coverage (box-shadow: 0 0 0 3px #color), (2) has sufficient thickness (at least 2px spread), (3) has 3:1+ contrast, and (4) is not clipped by parent containers with overflow:hidden. You can combine outline with box-shadow for enhanced visibility: input:focus { outline: 2px solid #0066cc; outline-offset: 2px; box-shadow: 0 0 0 4px rgba(0,102,204,0.2); }. Test by tabbing through forms to verify no layout shift occurs and focus is immediately visible."
        },
        'WarnInputDefaultFocus': {
            'title': "Input field relies on default browser focus styles which vary across browsers and platforms",
            'what': "Input field has no custom focus styles defined and relies entirely on browser default focus indicators, which do not adapt to background colors and may have insufficient contrast or be invisible in certain contexts",
            'why': "The primary problem with default browser focus outlines on inputs is that they don't adapt to the background color behind them, creating contrast failures. A blue default outline may be invisible against a blue form background, or a dark outline invisible against dark input styling. This is the main reason default focus indicators fail accessibility requirements for inputs. Additionally, browser defaults are inconsistent - Chrome uses a blue outline, Safari uses a blue glow, Firefox uses a dotted outline, and these vary across operating systems and versions. Default styles often conflict with custom input styling (backgrounds, borders, shadows in normal and focus states), becoming invisible or creating visual confusion. Some default focus styles disappear entirely on custom-styled inputs. Relying on defaults means you have no control over accessibility compliance - your form might pass testing in Chrome on Windows but fail in Safari on macOS, or pass on a white background but fail on colored form sections.",
            'who': "Keyboard users who lose track of which input field has focus when the outline blends into the background, users with low vision who cannot see low-contrast default outlines on various input backgrounds, users with color vision deficiencies who may not perceive certain default colors against certain form or input backgrounds, users filling out forms on different browsers and platforms expecting consistent focus indication, and quality assurance teams unable to ensure consistent, contrast-compliant focus indicators across all contexts",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Define explicit custom focus styles with guaranteed contrast: input:focus, textarea:focus, select:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Choose colors with at least 3:1 contrast against both your input backgrounds AND surrounding form/page backgrounds. For maximum reliability on any background, use a combination of outline and box-shadow to create a \"halo\" effect: input:focus { outline: 2px solid white; box-shadow: 0 0 0 4px #0066cc; outline-offset: 0; }. This white inner ring + colored outer ring pattern ensures visibility on both light and dark backgrounds. Test your focus indicators against all input states: empty fields, filled fields, error states, disabled states, and on all background colors where inputs appear (white forms, colored sections, images). Test across Chrome, Firefox, Safari, Edge on Windows and macOS, and mobile browsers. Consider using CSS custom properties for consistency: :root { --input-focus-color: #0066cc; } input:focus { outline: 2px solid var(--input-focus-color); outline-offset: 2px; }"
        },
        'WarnInputFocusGradientBackground': {
            'title': "Input field has gradient background - focus indicator contrast cannot be automatically verified",
            'what': "Input field has a CSS gradient background (linear-gradient, radial-gradient, conic-gradient), and the focus indicator color contrast cannot be automatically verified because the background color varies across the gradient",
            'why': "WCAG 2.4.11 requires focus indicators to have 3:1 contrast against adjacent colors, but gradients create multiple adjacent colors that change across the element. An outline that has sufficient contrast against the lightest part of a gradient may have insufficient contrast against the darkest part, or vice versa. Automated testing tools cannot reliably verify contrast with gradients because they would need to check contrast at every point along the gradient - tools typically check a single background color. This means gradient backgrounds require manual verification with real users or contrast checks at multiple points. Some focus indicator colors will fail against certain gradient backgrounds no matter which color you choose, creating accessibility barriers you cannot detect automatically.",
            'who': "Users with low vision who need high-contrast focus indicators that may be invisible against parts of gradient backgrounds, users with color vision deficiencies who cannot distinguish certain color combinations that gradients create, accessibility testers who cannot reliably verify compliance with automated tools, developers who cannot confidently assert WCAG compliance without extensive manual testing, and users viewing content in bright environments where low-contrast portions of gradients wash out focus indicators",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Best solution: avoid gradient backgrounds on focusable input fields. Use solid background colors that allow reliable contrast verification. If you must use gradients for design reasons: (1) manually verify focus indicator contrast against the lightest AND darkest colors in the gradient using a contrast checker, (2) use a multi-color focus indicator (outline in one color + box-shadow in contrasting color) to ensure visibility across the gradient range, (3) increase outline-offset to 3-4px to separate the indicator from the gradient background, (4) consider using a very thick (3-4px) high-contrast outline that remains visible across all gradient values, or (5) apply a semi-transparent overlay to the gradient on focus to create a more uniform background: input:focus { background-image: linear-gradient(rgba(255,255,255,0.3), rgba(255,255,255,0.3)), linear-gradient(your-gradient); outline: 3px solid #0066cc; outline-offset: 3px; }. Test with real users who have low vision whenever possible."
        },
        'WarnInputTransparentFocus': {
            'title': "Input field focus indicator is semi-transparent (alpha < 0.5) which may not provide sufficient visibility",
            'what': "Input field focus indicator uses a color with semi-transparent alpha channel (opacity less than 0.5 in rgba() or hsla()), making the final rendered color depend on background colors and creating uncertainty about contrast compliance",
            'why': "Semi-transparent focus indicators change appearance based on what is behind them, making it impossible to guarantee they meet WCAG 3:1 contrast requirement in all contexts. An outline that looks acceptable against one background may become nearly invisible against another. With alpha less than 0.5, even bright colors become too faint - a bright blue (rgb(0,102,204)) at 40% opacity becomes a pale, barely visible tint. Automated testing cannot verify contrast with transparent colors because the final rendered color depends on the entire stack of backgrounds, borders, images, and containers beneath the element. The focus indicator might pass testing in your development environment but fail for users when the form appears over different backgrounds, in modal overlays, on pages with varying content, or when user stylesheets alter background colors.",
            'who': "Users with low vision who need high-contrast focus indicators that transparent colors may not provide, users with color vision deficiencies who cannot perceive subtle transparent indicators, users viewing content in bright environments where low-opacity indicators wash out completely, accessibility testers who cannot reliably verify compliance with transparent indicators, developers who cannot confidently ensure WCAG compliance across all possible background contexts, and users with custom stylesheets or browser settings that may alter backgrounds in ways that make transparent indicators invisible",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Use fully opaque colors (alpha = 1.0) for focus indicators to ensure consistent, verifiable visibility: input:focus { outline: 2px solid rgb(0, 102, 204); outline-offset: 2px; } or input:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Choose outline colors with verified 3:1+ contrast against your input and page backgrounds. If you use transparency for aesthetic reasons (subtle glow effect), ensure the primary focus indicator is opaque and supplement it with transparent effects: input:focus { outline: 2px solid #0066cc; outline-offset: 2px; box-shadow: 0 0 8px rgba(0,102,204,0.3); } - the outline provides accessibility, the box-shadow provides aesthetic enhancement. Never rely on transparency alone. Test focus indicators in all contexts where inputs appear: light backgrounds, dark backgrounds, over images, in modals, with user stylesheets. If transparency is required, ensure alpha is at least 0.8 and manually verify contrast in every context."
        },
        'WarnFieldLabelledByMulitpleElements': {
            'title': "Form field is labeled by multiple elements via aria-labelledby, which may create verbose or confusing labels",
            'what': "Form field uses aria-labelledby attribute referencing multiple element IDs (space-separated list), causing screen readers to announce the combined text content of all referenced elements as the field's accessible name",
            'why': "While aria-labelledby can reference multiple elements, this often creates overly long, repetitive, or confusing labels when screen readers concatenate the text. For example, aria-labelledby=\"section-heading field-label field-hint\" might announce \"Contact Information Email Address Enter your work email\" - which is verbose and may confuse users about what to actually enter. Multiple labels can include redundant words, create grammatically incorrect sentences, or provide information in illogical order. Screen reader users hear all the text run together without pauses, making it hard to parse meaning. This is especially problematic for users with cognitive disabilities who need concise, clear labels, or users with attention difficulties who cannot process long concatenated announcements.",
            'who': "Screen reader users who hear verbose, repetitive label announcements, users with cognitive disabilities who are confused by long concatenated text, users with attention difficulties who cannot process multi-part labels, users with reading disabilities who need simple, direct labels, non-native language speakers who struggle with complex concatenated phrases, and users of voice control software who may have difficulty targeting fields with long, complex accessible names",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2', '2.4.6'],
            'remediation': "Review what gets announced when multiple elements are referenced. Ask: does this create a clear, concise label, or is it verbose/confusing? Best practice: use aria-labelledby to reference a single, clear label element. If you need to provide additional information (hints, descriptions, error messages), use aria-describedby for supplementary content rather than combining everything into aria-labelledby. Example: instead of aria-labelledby=\"heading label hint\" (verbose), use aria-labelledby=\"label\" aria-describedby=\"hint\" (clear). If you must use multiple IDs in aria-labelledby, ensure they create a grammatically correct, concise sentence when read together. Test by using a screen reader (NVDA, JAWS, VoiceOver) to hear how the label actually sounds - is it clear and helpful, or confusing and redundant? Consider whether a single, well-written label element would be clearer than combining multiple elements."
        },
        'ErrNoMainLandmark': {
            'title': "Page is missing a main landmark region to identify the primary content area",
            'what': "Page is missing a main landmark region to identify the primary content area",
            'why': "Screen reader users rely on landmarks to understand page layout and quickly navigate to important sections. The main landmark allows users to skip repeated content like headers and navigation to jump directly to the unique page content. Without it, users must navigate through all repeated elements on every page, which is time-consuming and frustrating. The main landmark should contain all content that is unique to the page, including the h1 heading.",
            'who': "Blind and low vision users using screen readers who navigate by landmarks, users with motor disabilities who need efficient keyboard navigation to skip repeated content, and users with cognitive disabilities who benefit from clear page structure",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Add a <main> element around the primary content area, or use role=\"main\" on an appropriate container element. Ensure there is only one main landmark per page, position it as a top-level landmark (not nested inside other landmarks), and include all unique page content within it, including the h1 heading. The main landmark should not include repeated content like site headers, navigation, or footers."
        },
        'ErrNoMainLandmarkOnPage': {
            'title': "Page is missing a main landmark region to identify the primary content area",
            'what': "This page does not contain a main landmark (<main> element or role=\"main\") to identify the primary content area that is unique to this page",
            'why': "The main landmark is essential for accessibility as it allows screen reader users to bypass repeated navigation, headers, and sidebars to jump directly to the unique content on each page. Without it, users must tab or arrow through potentially dozens of repeated elements on every page visit, which is time-consuming, cognitively taxing, and frustrating. Screen readers typically provide a keyboard shortcut to jump to the main landmark, but this fails when no main landmark exists. This forces users to manually navigate through all page elements to find where the actual page content begins, repeating this tedious process on every page of the website.",
            'who': "Screen reader users who rely on landmark navigation to efficiently access page content, keyboard-only users who cannot use a mouse to visually identify and click the main content area, users with motor disabilities who need to minimize keystrokes to conserve energy and reduce strain, users with cognitive disabilities who benefit from clear content structure, and mobile screen reader users navigating with gestures who need efficient navigation patterns",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.1', '2.4.6'],
            'remediation': "Add a <main> element wrapping the primary content area that is unique to this page, or apply role=\"main\" to the container holding unique page content. The main landmark should contain the h1 heading and all content that changes from page to page, excluding repeated elements like site headers, navigation menus, sidebars, and footers. Ensure there is exactly one main landmark per page (not zero, not multiple). Position it as a direct child of the body or at the top level of your page structure, not nested within other landmarks. For single-page applications, ensure the main landmark's content updates when navigation occurs."
        },
        'ErrMultipleMainLandmarksOnPage': {
            'title': "Multiple main landmark regions found on the page - only one main landmark should exist",
            'what': "This page contains {count} main landmarks (<main> elements or elements with role=\"main\"), but WCAG requires exactly one main landmark per page to identify the primary unique content",
            'why': "Multiple main landmarks create ambiguity about which content area represents the primary page content. Screen readers provide shortcuts to jump to \"the\" main landmark, assuming there is only one, so multiple main landmarks cause confusion and unpredictable behavior - the screen reader may jump to the first one, the last one, or provide an error. This defeats the purpose of the main landmark, which is to provide a clear, unambiguous target for users to quickly access the primary content. Users cannot reliably determine which main landmark contains the actual content they're looking for, forcing them to check each one, negating the efficiency benefit landmarks are supposed to provide.",
            'who': "Screen reader users whose landmark navigation shortcuts become unreliable with multiple main landmarks, keyboard users who expect consistent navigation targets, users with cognitive disabilities who are confused by ambiguous page structure, mobile screen reader users whose gesture-based navigation fails with unclear landmarks, and developers maintaining code where multiple main landmarks indicate unclear page architecture",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Identify which content area truly represents the primary unique content for this page and keep only that as the main landmark. Remove the main element or role=\"main\" from other areas. If you have multiple sections that seem equally important, they should all be contained within a single main landmark, using section elements with appropriate headings to distinguish them. For pages with multiple articles (like blog archive pages), the main landmark should wrap all the articles together. For single-page applications with view changes, update the content within one main landmark rather than creating multiple main landmarks. Consider whether duplicate main elements come from included templates that should only output the main element on certain pages."
        },
        'ErrMultipleBannerLandmarksOnPage': {
            'title': "Multiple banner landmarks found - only one banner landmark should exist per page",
            'what': "This page contains {count} banner landmarks (<header> elements at page level or elements with role=\"banner\"), but pages should have at most one banner landmark identifying the site header/masthead",
            'why': "The banner landmark represents the site-wide header containing branding, logo, site-wide navigation, and search. Having multiple banner landmarks creates confusion about which header is the actual site masthead. Screen readers provide shortcuts to jump to \"the\" banner, expecting one clear target, so multiple banners cause unreliable behavior and confusion. Users cannot determine which banner contains the main site navigation versus page-specific headers. This violates user expectations built from consistent patterns across the web where banner = site header.",
            'who': "Screen reader users whose banner navigation shortcut becomes unreliable or confusing with multiple banners, keyboard users expecting to jump to site navigation quickly, users with cognitive disabilities confused by multiple elements claiming to be the site header, and users trying to quickly access consistent site-wide navigation patterns",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Keep only the site-level header as a banner landmark (the <header> element that contains site-wide branding and navigation). Remove <header> elements from page-specific or article-specific sections, or explicitly suppress their banner semantics using role=\"presentation\" or by nesting them within article/section elements (where they automatically lose banner semantics). The banner should be a direct child of <body> and should not be nested within <main>, <article>, or <section> elements. If you have section-specific headers, use <div> elements with heading classes instead, or use <header> nested within article/section elements (which don't create banner landmarks)."
        },
        'ErrMultipleContentinfoLandmarksOnPage': {
            'title': "Multiple contentinfo landmarks found - only one contentinfo landmark should exist per page",
            'what': "This page contains {count} contentinfo landmarks (<footer> elements at page level or elements with role=\"contentinfo\"), but pages should have at most one contentinfo landmark identifying the site footer",
            'why': "The contentinfo landmark represents the site-wide footer containing copyright information, privacy links, contact information, and other site-wide footer content. Multiple contentinfo landmarks create confusion about which footer contains the actual site-level information. Screen readers provide shortcuts to jump to \"the\" contentinfo landmark, expecting one clear target. Users cannot quickly determine which footer contains copyright information, privacy policy links, or contact information they need. Multiple contentinfo landmarks suggest unclear information architecture and make it harder for users to find important legal and contact information.",
            'who': "Screen reader users whose contentinfo navigation shortcut becomes unreliable with multiple contentinfo landmarks, users needing to quickly access footer information like privacy policies or contact details, users with cognitive disabilities confused by multiple site footers, keyboard users expecting consistent footer navigation, and users looking for copyright or legal information who don't know which footer to check",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Keep only the site-level footer as a contentinfo landmark (the <footer> element that contains site-wide information like copyright, privacy links, contact information). Remove <footer> elements from page-specific or article-specific sections, or explicitly suppress their contentinfo semantics by nesting them within article/section elements (where they automatically lose contentinfo semantics). The contentinfo should be a direct child of <body> and should appear after the <main> element. If you have article-specific or section-specific footers (like author info or publication date), use <div> elements styled as footers, or use <footer> nested within article/section elements (which don't create contentinfo landmarks)."
        },
        'WarnNoContentinfoLandmarkOnPage': {
            'title': "Page is missing a contentinfo landmark to identify the footer region",
            'what': "This page does not contain a contentinfo landmark (<footer> element at page level or role=\"contentinfo\") to identify the site footer area",
            'why': "The contentinfo landmark helps users quickly navigate to footer content containing important site-wide information like copyright notices, privacy policies, terms of service, contact information, and additional navigation links. Without it, screen reader users must navigate through all page content to reach footer information, which can be dozens or hundreds of elements away. While not as critical as the main landmark, the contentinfo landmark supports efficient navigation and helps users quickly access legal and contact information they frequently need. Many users expect to find certain information in footers and use screen reader shortcuts to jump directly there.",
            'who': "Screen reader users who use landmark shortcuts to quickly access footer information, keyboard users who need efficient navigation to footer links, users looking for privacy policies or legal information typically located in footers, users seeking contact information or support links, and users who navigate primarily by landmarks and expect consistent patterns across websites",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Add a <footer> element at the page level (as a direct child of <body>) wrapping your site footer content, or apply role=\"contentinfo\" to the element containing site-wide footer information. The contentinfo landmark should contain copyright notices, privacy policy links, terms of service, contact information, social media links, and secondary navigation. It should appear after the <main> element and should not be nested within main, article, or section elements. Ensure there is at most one contentinfo landmark per page. For article or section-specific footers, nest <footer> elements within those sectioning elements (they won't create contentinfo landmarks)."
        },
        'WarnNoNavLandmarksOnPage': {
            'title': "Page has no navigation landmarks to identify navigation regions",
            'what': "This page contains no navigation landmarks (<nav> elements or elements with role=\"navigation\") to identify navigation menu areas",
            'why': "Navigation landmarks allow screen reader users to quickly locate and access navigation menus using landmark shortcuts. Without navigation landmarks, users must manually search through page content to find navigation links, slowing down their ability to explore the website efficiently. While the navigation links may still be accessible via sequential navigation, marking them with the navigation landmark helps users identify where navigation begins and ends, skip over navigation if desired, or return to navigation from elsewhere on the page. Consistent navigation landmarks create predictable navigation patterns users rely on across websites.",
            'who': "Screen reader users who use landmark shortcuts to quickly access site navigation, keyboard users seeking efficient navigation patterns, users with cognitive disabilities who benefit from clearly marked navigation regions, mobile screen reader users who navigate by landmarks using gestures, and power users who prefer landmark-based navigation over sequential tabbing",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Wrap navigation menu regions with <nav> elements or apply role=\"navigation\" to containers holding navigation links. Use <nav> for primary site navigation, secondary navigation, breadcrumb navigation, pagination, and in-page table of contents. If you have multiple navigation regions, give each a unique accessible name using aria-label (e.g., <nav aria-label=\"Main navigation\">, <nav aria-label=\"Footer navigation\">) so users can distinguish between them. The primary navigation should typically appear near the top of the page before the main content. Breadcrumb navigation, if present, often appears above the main content. Pagination controls are typically marked as navigation below content listings."
        },
        'ErrNoOutlineOffsetDefined': {
            'title': "No outline offset defined for focus",
            'what': "No outline offset defined for focus",
            'why': "Focus indicator may be hard to see",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7'],
            'remediation': "Add outline-offset for better visibility"
        },
        'ErrNoPageLanguage': {
            'title': "HTML element is missing the lang attribute, preventing assistive technologies from determining the primary language of the page",
            'what': "HTML element is missing the lang attribute, preventing assistive technologies from determining the primary language of the page",
            'why': "Without a declared language, screen readers cannot determine which pronunciation rules and voice synthesizer to use, often defaulting to the user\'s system language which may be incorrect. This causes mispronunciation, incorrect inflection, and can make content unintelligible, especially for pages in languages different from the user\'s default settings.",
            'who': "Blind and low vision users using screen readers who need correct pronunciation for comprehension, international users accessing content in different languages, users with dyslexia or reading disabilities using assistive reading tools, and users of automatic translation services",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Add the lang attribute to the <html> element with the appropriate language code (e.g., <html lang=\"en\"> for English, <html lang=\"fr\"> for French). Use ISO 639-1 two-letter codes for modern languages. For XHTML, also include xml:lang with the same value. Ensure the declared language matches the actual primary language of your content. For multilingual pages, use the language that represents the majority of the content."
        },
        'ErrNoPageTitle': {
            'title': "Page has no <title> element in the document head",
            'what': "Page has no <title> element in the document head",
            'why': "The page title is the first thing screen reader users hear when a page loads, and it appears in browser tabs, bookmarks, and search results. Without a title, users cannot identify the page in their browser history, distinguish between multiple open tabs, or understand what page they\'re on when arriving from a link. Screen reader users announcing \"Untitled document\" have no context about where they are. This is like opening a book with no title on the cover or spine - you don\'t know what you\'re reading until you dive into the content. The title is critical for orientation and navigation.",
            'who': "Screen reader users who rely on titles for page identification and orientation, users with cognitive disabilities who need clear page identification, users managing multiple browser tabs who need to distinguish between pages, users with memory issues using browser history to return to pages, and all users when bookmarking or sharing pages",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.2'],
            'remediation': "Add a <title> element within the <head> section of your HTML. Create descriptive, unique titles that identify both the page content and the site. Use a consistent pattern like \"Page Topic - Site Name\". Put the unique page information first since it\'s most important. Keep titles concise (under 60 characters) but descriptive. Avoid generic titles like \"Home\" or \"Page 1\". The title should make sense when read out of context in a list of bookmarks or search results."
        },
        'ErrNoReducedMotionSupport': {
            'title': "Animations do not respect prefers-reduced-motion setting",
            'what': "Animations do not respect prefers-reduced-motion setting",
            'why': "Users with vestibular disorders can experience nausea, dizziness, or seizures from motion.",
            'who': "Users with vestibular disorders, users with motion sensitivity, users with ADHD.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.3.3'],
            'remediation': "Use CSS @media (prefers-reduced-motion: reduce) to disable or reduce animations, provide animation toggle controls."
        },
        'ErrNonInteractiveZeroTabindex': {
            'title': "Non-interactive element has tabindex=\"0\" making it keyboard focusable",
            'what': "Non-interactive element has tabindex=\"0\" making it keyboard focusable",
            'why': "Adding keyboard focus to non-interactive elements confuses users and clutters keyboard navigation.",
            'who': "Keyboard users encountering unexpected tab stops, screen reader users hearing non-actionable elements.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.1.1'],
            'remediation': "Remove tabindex=\"0\" from non-interactive elements, only make elements focusable if they have functionality."
        },
        'ErrOrphanLabelWithNoId': {
            'title': "Label element exists but has no for attribute",
            'what': "Label element exists but has no for attribute",
            'why': "Label is not programmatically associated with any field",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add for attribute pointing to field ID"
        },
        'ErrOutlineIsNoneOnInteractiveElement': {
            'title': "Interactive element has CSS outline:none removing the default focus indicator",
            'what': "Interactive element has CSS outline:none removing the default focus indicator",
            'why': "People with mobility disabilities use keyboard or keyboard-alternate devices to navigate rather than a mouse. Visible focus indicators are essential as they perform the same function as a mouse cursor. Without focus indicators, users cannot tell where they are on the page or when interactive elements are focused. This makes keyboard navigation impossible and can completely prevent access to functionality.",
            'who': "Sighted users with motor disabilities navigating with keyboard or keyboard-alternate devices, users who prefer keyboard navigation for efficiency, users with temporary injuries preventing mouse use, and users of assistive technologies that rely on keyboard navigation",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Never use outline:none without providing an alternative visible focus indicator. The focus indicator must be clearly visible with at least 3:1 contrast ratio with the background, be at least 2 pixels thick, and ideally be offset from the element to maximize visibility. Consider using CSS :focus-visible for better control over when focus indicators appear."
        },
        'ErrPlaceholderAsLabel': {
            'title': "Placeholder attribute used as the only label for form field",
            'what': "Placeholder attribute used as the only label for form field",
            'why': "Placeholder text disappears when users start typing, leaving no persistent label for reference.",
            'who': "Users with cognitive disabilities, users who need to review form data, screen reader users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.3.2'],
            'remediation': "Add proper label elements or aria-label, use placeholder only for supplementary hints or examples."
        },
        'ErrPositiveTabindex': {
            'title': "Element uses a positive tabindex value (greater than 0)",
            'what': "Element uses a positive tabindex value (greater than 0)",
            'why': "Positive tabindex values override the natural tab order of the page, creating an unpredictable navigation experience. When you use tabindex=\"1\" or higher, that element jumps to the front of the tab order, regardless of where it appears visually. This breaks the expected top-to-bottom, left-to-right flow that keyboard users rely on. Users might tab from the header straight to a random form field in the middle of the page, then jump to the footer, then back to the navigation. This confusing order makes it easy to miss content, difficult to predict where focus will go next, and nearly impossible to maintain as the page evolves.",
            'who': "Keyboard users who expect logical, predictable navigation order, screen reader users who rely on consistent focus flow, users with motor disabilities who need efficient keyboard navigation, users with cognitive disabilities who are confused by unpredictable focus movement, and developers maintaining the code who must manage complex tabindex values",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove positive tabindex values and use only tabindex=\"0\" (adds element to natural tab order) or tabindex=\"-1\" (removes from tab order but allows programmatic focus). Let the DOM order determine tab order - if elements need to be reached in a different order, rearrange them in the HTML. If visual order must differ from DOM order for design reasons, consider using CSS Grid or Flexbox with the order property, but be cautious as this can still cause accessibility issues. NOTE: Positive tabindex may be acceptable within interactive SVG widgets (maps, diagrams, data visualizations) where custom navigation flows guide users through different content journeys - these cases generate warnings rather than errors."
        },
        'ErrPrimaryHrefLangNotRecognized': {
            'title': "hreflang language code not recognized",
            'what': "hreflang language code not recognized",
            'why': "Invalid hreflang codes provide incorrect information about linked resources",
            'who': "Screen reader users, search engines",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 639-1 language codes"
        },
        'ErrPrimaryLangAndXmlLangMismatch': {
            'title': "lang and xml:lang attributes don\'t match",
            'what': "lang and xml:lang attributes don\'t match",
            'why': "Conflicting language information",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Ensure both attributes have same value"
        },
        'ErrPrimaryLangUnrecognized': {
            'title': "Language code not recognized",
            'what': "Language code not recognized",
            'why': "Invalid language codes prevent proper pronunciation",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 639-1 language codes"
        },
        'ErrPrimaryXmlLangUnrecognized': {
            'title': "xml:lang language code not recognized",
            'what': "xml:lang language code not recognized",
            'why': "Invalid xml:lang codes prevent proper pronunciation",
            'who': "Screen reader users in XML/XHTML contexts",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 639-1 language codes"
        },
        'ErrRedundantAlt': {
            'title': "Alt text contains redundant words like \"image of\" or \"picture of\"",
            'what': "Alt text contains redundant words like \"image of\" or \"picture of\"",
            'why': "Screen readers already announce images as images, so these phrases create redundant announcements.",
            'who': "Screen reader users who hear repetitive \"image image of\" announcements.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.1.1'],
            'remediation': "Remove \"image of\", \"picture of\", \"graphic of\" from alt text; describe the content directly."
        },
        'ErrRegionLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Region landmark has both aria-label and aria-labelledby",
            'what': "Region landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrRegionQualifierForHreflangUnrecognized': {
            'title': "hreflang region qualifier not recognized",
            'what': "hreflang region qualifier not recognized",
            'why': "Invalid region codes in hreflang attributes",
            'who': "Screen reader users, search engines",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 3166-1 region codes"
        },
        'ErrRegionQualifierForPrimaryLangNotRecognized': {
            'title': "Region qualifier in primary language code not recognized (e",
            'what': "Region qualifier in primary language code not recognized (e.g., \"en-XY\")",
            'why': "Invalid region codes may cause incorrect pronunciation",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 3166-1 region codes like \"en-US\", \"en-GB\""
        },
        'ErrRegionQualifierForPrimaryXmlLangNotRecognized': {
            'title': "Region qualifier in xml:lang not recognized",
            'what': "Region qualifier in xml:lang not recognized",
            'why': "Invalid region codes in xml:lang may cause issues",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 3166-1 region codes"
        },
        'ErrRoleOfHeadingButNoLevelGiven': {
            'title': "role=\"heading\" without aria-level",
            'what': "role=\"heading\" without aria-level",
            'why': "Heading level is undefined",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Add aria-level attribute with value 1-6"
        },
        'ErrSVGNoAccessibleName': {
            'title': "Inline SVG lacks accessible name and proper context-specific handling",
            'what': "Inline SVG lacks accessible name and proper context-specific handling",
            'why': "Inline SVG elements require different treatment based on context. When an SVG appears alone as an image, it needs role=\"img\" with aria-label or a <title> element with aria-labelledby to provide an accessible name. However, when an SVG appears inside a link or button that also contains text (like <a href=\"/play\"><svg>...</svg><span>Play</span></a>), the SVG should be marked as decorative with aria-hidden=\"true\" since the text provides the accessible name. Without proper handling, screen readers either announce nothing (missing name) or create redundancy by announcing both the image and text. The context determines the correct fix: standalone SVGs need accessible names, SVGs with adjacent text need aria-hidden=\"true\".",
            'who': "Screen reader users who need either proper image descriptions for standalone SVGs or clean link/button announcements without decorative image redundancy, users with cognitive disabilities who are confused by redundant announcements, voice control users who need consistent command targets",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "First, check the SVG's context. If the SVG is inside a link or button that contains text (e.g., <a><svg></svg><span>Text</span></a>), add aria-hidden=\"true\" to the SVG since the text provides the accessible name. If the SVG stands alone as a meaningful image, add role=\"img\" with aria-label for simple icons, or add a <title> element as the first child of the SVG with aria-labelledby pointing to the title's id for complex images. For decorative SVGs not in links/buttons, use aria-hidden=\"true\" and ensure focusable=\"false\". Never add accessible names to SVGs that have adjacent text in the same interactive element - this creates redundancy."
        },
        'ErrHeadingOrder': {
            'title': "Headings appear in illogical order - high-level headings (H1, H2) appear after lower-level headings (H3, H4, H5, H6)",
            'what': "Headings appear in illogical order - high-level headings (H1, H2) appear after lower-level headings (H3, H4, H5, H6)",
            'why': "Document structure should be logical and predictable. When high-level headings like H1 or H2 appear after lower-level headings, it creates a backwards or inverted hierarchy. This is like reading a book where chapter titles appear after section headings, or where the main title appears at the end. Screen reader users navigating by headings expect the most important headings first, followed by progressively more detailed subsections. When headings appear out of logical order, users cannot understand the content structure, may miss important navigation landmarks, and cannot build an accurate mental model of how the page is organized.",
            'who': "Screen reader users who rely on heading navigation and expect logical document structure, users with cognitive disabilities who need predictable content organization, users who generate document outlines from headings, and users who navigate by heading levels to understand content hierarchy",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Restructure your content so that high-level headings (H1, H2) appear before lower-level headings. Start with H1 for the main page title, then H2 for major sections, then H3 for subsections within those. Headings should appear in a logical, top-down hierarchy that matches how users would naturally read and understand the content structure."
        },
        'ErrSkippedHeadingLevel': {
            'title': "Heading levels are not in sequential order - jumped from h{skippedFrom} to h{skippedTo}, skipping intermediate level(s)",
            'what': "Heading levels are not in sequential order - jumped from h{skippedFrom} to h{skippedTo}, skipping intermediate level(s)",
            'why': "Heading levels create a hierarchical outline of your content, like nested bullet points. Jumping from h{skippedFrom} to h{skippedTo} breaks this logical structure. It\'s like having chapter {skippedFrom}, then jumping to section {skippedTo} without the intermediate section. Screen reader users navigating by headings will be confused about the relationship between sections - is the h{skippedTo} a subsection of something that\'s missing? This broken hierarchy makes it hard to understand how content is organized and can cause users to think content is missing or that they've accidentally skipped something.",
            'who': "Screen reader users navigating by heading structure who rely on levels to understand content relationships, users with cognitive disabilities who need logical, predictable content organization, users of assistive technology that generates document outlines, and developers or content authors maintaining the page who need to understand the intended structure",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Insert an h{expectedLevel} heading between the h{skippedFrom} and h{skippedTo}, or change the h{skippedTo} to h{expectedLevel} to maintain sequential order. After h{skippedFrom}, use h{expectedLevel} for the next level. Don\'t skip levels when going down the hierarchy. If you need a heading to look smaller visually, use CSS to style it rather than choosing a lower heading level. The heading level should reflect the content\'s logical structure, not its visual appearance."
        },
        'ErrSmallText': {
            'title': "Text is too small - minimum 16px recommended",
            'what': "Text size is {fontSize}px, which is below the recommended minimum of 16px for comfortable reading",
            'why': "Small text is difficult to read, especially for users with low vision or on mobile devices.",
            'who': "Users with low vision, aging users, mobile device users, users with reading disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.4'],
            'remediation': "Increase font size to minimum 16px for body text (14px absolute minimum). Ensure text can be zoomed to 200% without loss of functionality. Current size: {fontSize}px."
        },
        'ErrSvgImageNoLabel': {
            'title': "SVG image element lacks accessible text alternatives, making it invisible to screen reader users",
            'what': "SVG image element lacks accessible text alternatives, making it invisible to screen reader users",
            'why': "SVG images without proper labeling are completely inaccessible to screen reader users - they are either skipped entirely or announced as \"graphic\" with no indication of what they represent. Unlike HTML img elements that can use alt attributes, SVGs require different techniques for accessibility. Without proper labeling, users miss important visual information, icons, charts, logos, or interactive graphics that may be essential for understanding or using the page.",
            'who': "Blind and low vision users using screen readers who cannot perceive any information about unlabeled SVG content, users with cognitive disabilities who benefit from text descriptions of complex graphics, keyboard users who may encounter interactive SVGs without understanding their purpose, and users of assistive technologies that need text alternatives for all visual content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "For simple SVGs, add role=\"img\" and aria-label with descriptive text. For complex SVGs, use <title> as the first child element and reference it with aria-labelledby. For decorative SVGs, use aria-hidden=\"true\" to hide from assistive technologies. For inline SVGs containing text, ensure text is in actual text elements not paths. For interactive SVGs, provide appropriate ARIA labels for all interactive elements. Always test with screen readers to verify SVGs are properly announced."
        },
        'ErrSvgStaticWithoutRole': {
            'title': "Static inline SVG lacks role=\"img\", preventing assistive technologies from treating it as an image",
            'what': "Static inline SVG element does not have role=\"img\" attribute, causing screen readers to either skip it entirely or attempt to navigate through its internal SVG structure rather than treating it as a single image",
            'why': "Inline SVG elements are not automatically treated as images by assistive technologies. Without role=\"img\", screen readers may traverse the SVG's internal DOM structure (paths, circles, polygons), announcing confusing technical details instead of the image's meaning. Some screen readers skip unlabeled SVGs entirely. The role=\"img\" attribute signals to assistive technologies that the SVG should be treated as a single image unit with an accessible name, just like an HTML img element. This is required for static SVG graphics (icons, logos, illustrations) but not for interactive SVG widgets or purely decorative SVGs (which should use aria-hidden=\"true\").",
            'who': "Blind and low vision users using screen readers who need SVG images to be announced with their accessible names rather than technical SVG markup, users with cognitive disabilities who benefit from clear image identification, keyboard users navigating through page content who need to understand what visual content represents",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1', '4.1.2'],
            'remediation': "Add role=\"img\" to the SVG element to signal it should be treated as an image: <svg role=\"img\" aria-label=\"Description of image\">. Then provide an accessible name using one of these methods: (1) aria-label=\"Description\" for simple images; (2) aria-labelledby=\"title-id\" with <title id=\"title-id\">Description</title> as first child for more complex descriptions; (3) <title>Description</title> as first child (automatically used as accessible name). For decorative SVGs that convey no information, use aria-hidden=\"true\" instead of role=\"img\". For interactive SVG widgets (maps, diagrams, controls), do not use role=\"img\" - see DiscoInteractiveSvg for guidance on accessible interactive SVGs."
        },
        'DiscoInteractiveSvg': {
            'title': "Interactive SVG detected requiring manual accessibility review for keyboard access, focus management, and ARIA implementation",
            'what': "Inline SVG contains interactive elements (event handlers, tabindex, focusable elements, or interactive ARIA roles), indicating it functions as an interactive widget rather than a static image",
            'why': "Interactive SVGs (maps, diagrams, data visualizations, custom controls) have complex accessibility requirements that differ from static images. They need keyboard navigation for all interactive elements, visible focus indicators, proper ARIA roles and states, logical tab order, and state change announcements. Unlike static SVGs that need role=\"img\", interactive SVGs typically use role=\"application\", role=\"group\", or no role depending on their complexity. Automated testing cannot determine if keyboard access is properly implemented, if focus management works correctly, or if the interaction model is clear to screen reader users. Manual review is required to verify the entire interactive experience is accessible.",
            'who': "Keyboard users who need to operate all interactive SVG functionality without a mouse, screen reader users who need to understand the SVG's interactive elements and receive feedback on state changes, users with motor disabilities who need adequate target sizes and forgiving interaction patterns, users with cognitive disabilities who benefit from predictable interaction models and clear instructions",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.1.1', '2.1.1', '2.4.3', '2.4.7', '4.1.2', '4.1.3'],
            'remediation': "Manually review this interactive SVG for: (1) Keyboard accessibility - all interactive elements must be keyboard operable with logical tab order, use tabindex=\"0\" for custom focusable elements, avoid positive tabindex values; (2) Focus indicators - ensure visible focus on all interactive elements; (3) ARIA implementation - use appropriate roles (button, link, etc.) for interactive elements, provide aria-label or aria-labelledby for all controls, announce state changes with aria-live regions; (4) Instructions - provide visible or aria-describedby instructions for complex interaction patterns; (5) Alternative access - consider providing equivalent functionality in standard HTML for complex interactions. Test thoroughly with keyboard-only navigation and screen readers (NVDA, JAWS, VoiceOver). For simple interactive SVGs, consider using standard HTML controls instead."
        },
        'ErrTTabindexOnNonInteractiveElement': {
            'title': "Tabindex attribute on non-interactive element",
            'what': "Tabindex attribute on non-interactive element",
            'why': "Non-interactive elements should not be in tab order unless they serve a specific purpose",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove tabindex from non-interactive elements or make them properly interactive"
        },
        'ErrTabOrderViolation': {
            'title': "Tab order diverges: <{currentElement.tag}> visually left of previous element but tabs after it",
            'what': "The <{currentElement.tag}> at position ({currentElement.position.x}, {currentElement.position.y}) appears visually to the LEFT of the previous element <{previousElement.tag}> at ({previousElement.position.x}, {previousElement.position.y}), but it comes AFTER it in the tab order (tab stop #{currentElement.tabIndex} vs #{previousElement.tabIndex}). These elements are on the same row ({verticalDiff}px vertical difference), so tab order should follow left-to-right reading order.",
            'why': "When tab order doesn't match visual layout, keyboard users experience disorienting navigation. They expect to tab left-to-right and top-to-bottom following the visual layout, but instead find themselves jumping backwards or in unexpected directions. This cognitive load makes the interface much harder to use and can cause users to miss important content or controls.",
            'who': "Keyboard users navigating with Tab key, screen reader users who rely on tab order to understand layout, users with cognitive disabilities who need predictable navigation patterns, users with motor disabilities using switch controls.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3 Focus Order'],
            'remediation': "Fix the DOM order to match the visual layout. The HTML source order should place <{currentElement.tag}> BEFORE <{previousElement.tag}> in the document. Use CSS for visual positioning (flexbox, grid, float, position) rather than relying on tabindex to fix navigation. Avoid positive tabindex values entirely - they're a sign that DOM order doesn't match visual order."
        },
        'WarnAmbiguousTabOrder': {
            'title': "Possible tab order issue: <{currentElement.tag}> may be positioned before <{previousElement.tag}> visually",
            'what': "The <{currentElement.tag}> at position ({currentElement.position.x}, {currentElement.position.y}) appears to the LEFT of <{previousElement.tag}> at ({previousElement.position.x}, {previousElement.position.y}), but comes AFTER it in tab order (tab stop #{currentElement.tabIndex} vs #{previousElement.tabIndex}). However, these elements have overlapping vertical positions ({verticalDiff}px difference), making it ambiguous whether they're on the same row or different rows.",
            'why': "If these elements are visually on the same row, the tab order should follow left-to-right reading order. However, with vertical overlap, they might be on different rows (e.g., one in a header, one in main content), in which case the current tab order could be correct. This needs manual verification to determine if it's actually a problem.",
            'who': "Keyboard users who expect predictable left-to-right, top-to-bottom navigation patterns.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3 Focus Order'],
            'remediation': "Manually verify the visual layout: 1) If these elements appear on the same horizontal row, fix the DOM order to match visual left-to-right order. 2) If they're on clearly different rows (e.g., header navigation vs main content), the current order may be correct and you can ignore this warning. Consider adding more vertical spacing between rows to avoid ambiguous overlap."
        },
        'ErrTabindexOfZeroOnNonInteractiveElement': {
            'title': "tabindex=\"0\" on non-interactive element",
            'what': "tabindex=\"0\" on non-interactive element",
            'why': "Non-interactive elements in tab order",
            'who': "Keyboard users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove tabindex from non-interactive elements"
        },
        'ErrTabindexNoVisibleFocus': {
            'title': "Element with tabindex lacks a visible focus indicator when focused",
            'what': "Element with tabindex attribute (making it keyboard focusable) has no visible focus indicator when keyboard focused, often due to outline:none or outline:0 removing default focus styles without providing alternatives",
            'why': "Adding tabindex to an element makes it keyboard focusable and part of the tab sequence, creating an expectation that users can interact with it via keyboard. Without a visible focus indicator, keyboard users cannot tell when the element has focus, making it impossible to know when they can interact with it or what will happen if they press Enter or other keys. This is particularly problematic for custom interactive widgets (accordions, tabs, custom selects, expandable sections) where tabindex is commonly used. Users may tab past the element without realizing it was interactive, or may try to interact when focus is elsewhere, leading to confusion and failed interactions. For elements that were made focusable specifically for accessibility (like skip link targets with tabindex=\"-1\"), missing focus indicators defeat the accessibility purpose.",
            'who': "Keyboard users who cannot see which element has focus, users with motor disabilities using keyboard/switch controls who need focus confirmation, users with attention difficulties who lose track of position without visual focus, users with low vision who rely on focus indicators to locate their position in custom widgets, screen magnification users who need focus indicators to find their zoomed viewport position, and users navigating complex custom interfaces (tab panels, accordions, carousels) where tabindex is used for keyboard interaction patterns",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Add visible focus indicator to elements with tabindex: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; } or target specific elements: [tabindex=\"0\"]:focus, [tabindex=\"-1\"]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. For custom interactive widgets, ensure focus indicators match the styling of similar native controls. Ensure outline color has 3:1+ contrast against backgrounds. Consider the element type: for div/span made focusable, a clear outline works well; for custom buttons, match button focus styling; for custom form controls, match input focus styling. Test by tabbing through your interface - every focusable element should have immediately obvious focus indication. Never use tabindex without ensuring visible focus. For programmatically focused elements (tabindex=\"-1\" used for skip link targets), add temporary focus styling that times out or is removed after focus moves."
        },
        'ErrTabindexChildOfInteractive': {
            'title': "Child element has tabindex inside interactive parent, creating improper structure for assistive technologies",
            'what': "Child element (such as SVG, span, icon, or other nested element) has a tabindex attribute when it is already contained within an interactive parent element like a button, link (anchor), or other focusable control, creating improper HTML structure and relationships",
            'why': "Adding tabindex to a child element inside an interactive parent (like an SVG inside a button) violates WCAG 1.3.1 Info and Relationships, which requires that information, structure, and relationships can be programmatically determined. The page structure is not properly described to assistive technologies - the parent button is the interactive element, but the child also claims to be independently focusable. This creates improper structural relationships that confuse screen readers and other assistive technologies. They cannot properly interpret this nested focusable structure, leading to confusing announcements about what element has focus, what will happen when activated, and how the elements relate to each other. Even with tabindex=\"-1\" or aria-hidden, this creates structural problems because assistive technologies expect clean, logical relationships between parent and child elements.",
            'who': "Screen reader users who receive confusing announcements about nested interactive elements and cannot understand the proper structure and relationships, users with cognitive disabilities who may be confused by redundant tab stops and unclear element relationships, keyboard users who encounter unexpected focus behavior that doesn't match the visual structure, and all users relying on assistive technologies to properly understand page structure and programmatic relationships between elements",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Remove the tabindex attribute from the child element entirely to restore proper HTML structure and relationships. For example, change <button><svg tabindex=\"-1\" aria-hidden=\"true\">...</svg></button> to <button><svg aria-hidden=\"true\">...</svg></button>. The parent button already provides keyboard access and proper semantic structure that assistive technologies can understand. Child elements (SVGs, spans, icons, etc.) inside interactive parents should never have tabindex, regardless of the value (-1, 0, or positive numbers). This ensures the page structure and relationships are properly described and can be programmatically determined by assistive technologies, meeting WCAG 1.3.1."
        },
        'ErrTabindexAriaHiddenFocusable': {
            'title': "Element with tabindex has aria-hidden='true', which is invalid",
            'what': "Element has both tabindex attribute (making it keyboard-focusable) and aria-hidden='true', creating a conflict where the element is focusable but hidden from assistive technologies",
            'why': "It is illegal per ARIA specifications to use aria-hidden='true' on a focusable or interactive element. This creates a fundamental contradiction: aria-hidden instructs assistive technologies to completely ignore the element and its descendants, but tabindex makes it reachable via keyboard navigation. When keyboard users tab to this element, screen readers may not announce it because it's marked as hidden, leading to 'phantom focus' where users don't know what has focus or what will happen if they press Enter or Space. Some browsers may honor the aria-hidden and silence screen readers while still showing visible focus, creating an invisible trap. Other browsers may handle this conflict differently, resulting in unpredictable, inconsistent behavior across platforms. This violates WCAG 4.1.2 (Name, Role, Value) which requires that all user interface components can be determined programmatically.",
            'who': "Screen reader users who tab to elements that assistive technology is instructed to ignore, causing complete confusion about focus location and available actions. Keyboard-only users who may encounter silent, unannounced focus states. Users with cognitive disabilities who rely on consistent, predictable behavior. All users who depend on standards-compliant implementations across different browsers and assistive technologies.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2', '2.4.7'],
            'remediation': "Remove aria-hidden='true' from the element. If the element has tabindex and is keyboard-focusable, it must be perceivable to assistive technologies - you cannot hide it. Change <svg tabindex=\"-1\" aria-hidden=\"true\"> to <svg aria-hidden=\"true\"> (remove tabindex). Or change to <svg tabindex=\"-1\"> (remove aria-hidden). Never combine these two attributes. If you want an element to be decorative and ignored by screen readers, do not add tabindex. If you want an element to be focusable, it cannot be hidden from assistive technologies."
        },
        'ErrTabindexColorChangeOnly': {
            'title': "Element with tabindex indicates focus only through color change without structural change (outline, border, shape)",
            'what': "Element with tabindex attribute indicates keyboard focus by changing only its color (background color, text color, or border color) without any accompanying structural or geometric change such as outline, border width increase, box-shadow, or other shape modification",
            'why': "WCAG Success Criterion 1.4.1 (Use of Color) prohibits using color as the only visual means of conveying information. Focus indication is critical information for keyboard users. Users with color blindness (8% of men), users with low contrast sensitivity, users on monochrome displays, and users in bright sunlight cannot perceive color-only changes. When a custom focusable element changes from gray background to blue background on focus, colorblind users see no change at all. This makes it impossible for them to track focus position in custom widgets like tab panels, accordions, or expandable sections where tabindex is commonly used for keyboard interaction. Without perceivable focus indication, keyboard navigation becomes guesswork.",
            'who': "Users with color blindness (particularly deuteranopia/protanopia affecting 8% of males) who cannot distinguish color changes, users with low vision who may not perceive subtle color shifts, users on monochrome displays or in Windows High Contrast Mode where color changes are suppressed, users in bright outdoor environments where colors wash out, older users with age-related color discrimination loss, and keyboard users navigating complex custom widgets (tab panels, carousels, accordions) who need reliable focus tracking independent of color perception",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.1', '2.4.7', '1.4.11'],
            'remediation': "Add a structural change in addition to any color change: (1) Add outline: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; background-color: #e6f2ff; }, (2) Add box-shadow: [tabindex]:focus { box-shadow: 0 0 0 3px rgba(0,102,204,0.5); background-color: #e6f2ff; }, (3) Increase border width: [tabindex]:focus { border: 3px solid #0066cc; background-color: #e6f2ff; }, (4) Add underline for text-like elements. The structural change must be perceivable without color - test in grayscale mode. Ensure focus indicator has 3:1+ contrast against backgrounds. For custom widgets, study how native controls indicate focus (buttons get outline, selects get outline, etc.) and match that pattern. Test with color blindness simulation tools."
        },
        'ErrTabindexFocusContrastFail': {
            'title': "Focus indicator on element with tabindex has less than 3:1 contrast ratio with adjacent colors",
            'what': "Element with tabindex attribute has a focus indicator (outline, border, or box-shadow) with color contrast ratio less than 3:1 against adjacent background colors, failing WCAG 2.4.11 Focus Appearance (Level AA)",
            'why': "WCAG 2.4.11 requires focus indicators to have at least 3:1 contrast ratio to ensure perceivability for users with low vision (20/40 visual acuity baseline). Low-contrast focus indicators are invisible or barely visible to users with moderate vision impairments, users in bright environments, users on low-quality displays, and users with age-related contrast sensitivity loss. For custom interactive widgets using tabindex (tab panels, accordions, expandable sections, custom selects), imperceptible focus indicators make keyboard navigation impossible. Users cannot determine which panel tab has focus, which accordion item is active, or which custom control is ready for interaction. This completely breaks keyboard accessibility for complex interfaces.",
            'who': "Users with low vision requiring high-contrast focus indicators, users with moderate visual impairments (20/40 vision) representing WCAG baseline, older users with age-related contrast sensitivity loss, users with color vision deficiencies, users viewing content in bright sunlight or office lighting, users on budget displays with poor contrast ratios, users with attention difficulties needing obvious focus indicators, and keyboard users navigating custom widgets who rely on clear visual feedback",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Measure contrast ratio between focus indicator and all adjacent colors using a contrast checker. Choose colors with at least 3:1 contrast. For light backgrounds, use dark indicators: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. For dark backgrounds, use light indicators: [tabindex]:focus { outline: 2px solid #ffffff; }. For elements that appear on varying backgrounds, use high-contrast colors or two-color indicators: [tabindex]:focus { outline: 2px solid #0066cc; box-shadow: 0 0 0 4px rgba(255,255,255,0.8); }. Test focus indicators across all widget states and backgrounds. For tab panels, verify contrast for both selected and focused tabs. For accordions, test against expanded and collapsed state backgrounds."
        },
        'ErrTabindexOutlineNoneNoBoxShadow': {
            'title': "Element with tabindex removes outline without providing alternative focus indicator (box-shadow, border change, etc.)",
            'what': "Element with tabindex attribute uses outline:none or outline:0 to remove the default focus outline but provides no alternative visual indicator such as box-shadow, border changes, background changes, or other visible focus styling",
            'why': "Removing the default outline without replacement is one of the most severe accessibility failures. When you add tabindex to make an element focusable, you create an expectation of keyboard interactivity. Without any focus indicator, keyboard users are completely blind to when the element has focus. For custom widgets (tab panels, accordions, expandable sections, custom buttons/links) where tabindex is essential for keyboard patterns, this makes the entire widget unusable via keyboard. Users cannot tell which tab is focused, which accordion header is ready to expand, or which custom control is active. This effectively removes keyboard access to custom interactive components - a critical failure.",
            'who': "All keyboard users who cannot see focus, users with motor disabilities relying on keyboard/switch controls, users with attention difficulties who lose position without visual focus, users with low vision needing focus indicators to locate position, screen magnification users who need focus to find their viewport position, users with cognitive disabilities who need confirmation of focus state, and users navigating custom widgets (tab panels, accordions, carousels, custom selects) where keyboard interaction is critical",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11', '2.1.1'],
            'remediation': "Never use outline:none without providing alternative focus indicator. Best practice: use outline with outline-offset: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Alternatives: (1) Box-shadow: [tabindex]:focus { outline: none; box-shadow: 0 0 0 3px #0066cc; }, (2) Border change: [tabindex]:focus { outline: none; border: 3px solid #0066cc; }, (3) Combination: [tabindex]:focus { outline: 2px solid #0066cc; box-shadow: 0 0 4px rgba(0,102,204,0.3); }. Ensure alternative has 3:1+ contrast and at least 2px thickness. For custom widgets, study native controls' focus patterns and match them. Test by tabbing through interface - focus must be immediately, obviously visible at all times. Document your focus indicator standards for consistency across all custom focusable elements."
        },
        'ErrTabindexOutlineWidthInsufficient': {
            'title': "Element with tabindex has focus outline less than 2px wide, failing WCAG minimum thickness requirements",
            'what': "Element with tabindex attribute has a focus indicator using CSS outline property but with width less than 2 CSS pixels (e.g., outline: 1px solid #color), making it too thin to be reliably perceived",
            'why': "WCAG 2.4.11 requires focus indicators to be at least 2 CSS pixels thick to ensure visibility for users with low vision (20/40 visual acuity), users at distance from screens, users on low-resolution displays, and users in suboptimal conditions. A 1px outline is too thin to be reliably perceived, especially on custom interactive widgets where focus indicators may compete with complex styling, backgrounds, or borders. For custom controls with tabindex (tab panels, accordion headers, custom buttons), thin outlines disappear against busy backgrounds, become invisible on certain displays, or are too subtle for users with moderate visual impairments. On high-DPI displays, 1px may render as less than 1 physical pixel.",
            'who': "Users with low vision needing thicker indicators to perceive them, users with moderate visual impairments (20/40 vision) representing WCAG baseline, older users with reduced visual acuity, users viewing content on small screens or at distance, users on low-resolution displays where thin lines are hard to see, users in bright environments where thin indicators wash out, users with reduced contrast sensitivity, users with attention difficulties needing obvious indicators, and users navigating custom widgets needing clear focus tracking",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Set outline-width to at least 2px: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. For better visibility, use 3px: [tabindex]:focus { outline: 3px solid #0066cc; }. The 2-3px width with outline-offset creates clear, visible indication across different backgrounds and conditions. For custom widgets, consider the element size - larger elements (like tab panels) may benefit from thicker outlines (3-4px) while smaller elements (like custom checkboxes) work with 2px. Ensure outline color has 3:1+ contrast. Test by tabbing through your widgets - focus should be immediately obvious without squinting. Consider combining outline with box-shadow for extra visibility: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; box-shadow: 0 0 0 1px rgba(0,102,204,0.2); }"
        },
        'ErrTabindexSingleSideBoxShadow': {
            'title': "Element with tabindex uses single-sided box-shadow for focus indicator (directional shadow with offset)",
            'what': "Element with tabindex attribute uses box-shadow with directional offset (non-zero x or y values) as focus indicator, causing shadow to appear only on one or two sides rather than surrounding the entire element",
            'why': "Focus indicators must clearly and unambiguously surround or highlight the entire interactive element. A box-shadow appearing only on bottom or right side can be easily missed by users looking at other parts of the element, users with reduced peripheral vision, or users who have zoomed in. Single-sided shadows are often interpreted as decorative drop shadows rather than focus indicators. For custom widgets with tabindex (tab panel headers, accordion items, custom buttons), users may not realize the element has focus if the shadow falls outside their view. This is particularly problematic when multiple custom controls are near each other - the single-sided shadow might appear to belong to an adjacent element.",
            'who': "Keyboard users needing complete perimeter indicators to identify focus, users with reduced peripheral vision who may only see part of the element, users zoomed at 200%+ who see only portions at once, users with attention difficulties needing unambiguous indicators, users with cognitive disabilities who cannot distinguish decorative shadows from focus indicators, users with low vision needing full-perimeter indicators for reliable tracking, and users navigating complex custom widgets where clear focus identification is critical",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Modify box-shadow to have zero x and y offset, creating complete perimeter indicator: [tabindex]:focus { box-shadow: 0 0 0 3px #0066cc; }. The syntax (0 0 0 3px) means: 0 horizontal offset, 0 vertical offset, 0 blur, 3px spread - creating solid border-like effect on all sides. Better: use outline which is designed for focus: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. If directional shadow is needed for aesthetics, combine both: [tabindex]:focus { box-shadow: 0 0 0 2px #0066cc, 2px 2px 4px rgba(0,0,0,0.2); } - first shadow provides accessibility, second provides style. Ensure focus indicator has 3:1+ contrast. Test with custom widgets to verify focus is obvious from all viewing angles."
        },
        'ErrTabindexTransparentOutline': {
            'title': "Element with tabindex uses semi-transparent (alpha < 0.5) focus outline that cannot guarantee visibility",
            'what': "Element with tabindex attribute has focus indicator using color with semi-transparent alpha channel (opacity less than 0.5 in rgba/hsla), making final rendered color unpredictable and dependent on background colors",
            'why': "Semi-transparent focus indicators change appearance based on what's behind them. With alpha less than 0.5, even bright colors become faint and may be imperceptible against certain backgrounds. For custom widgets with tabindex (tab panels, accordions, custom controls), these elements often appear in varying contexts - different page backgrounds, overlays, modals, themed sections. Automated testing cannot verify contrast with transparent colors because final color depends on entire background stack. Focus indicator might work in testing but fail for users when custom widgets appear over different backgrounds or when users apply custom stylesheets.",
            'who': "Users with low vision needing high-contrast focus indicators that transparent colors may not provide, users with color vision deficiencies who cannot perceive subtle transparent indicators, users viewing content in bright environments where low-opacity indicators wash out, accessibility testers unable to verify compliance with transparent indicators, developers who cannot guarantee WCAG conformance across all contexts where custom widgets appear, and users with attention difficulties needing strong focus indicators",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Use fully opaque colors (alpha = 1.0) for focus indicators: [tabindex]:focus { outline: 2px solid rgb(0, 102, 204); outline-offset: 2px; } or [tabindex]:focus { outline: 2px solid #0066cc; }. Choose colors with verified 3:1+ contrast against all backgrounds where elements with tabindex appear. If transparency desired for aesthetic glow, use it supplementary with opaque primary indicator: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; box-shadow: 0 0 8px rgba(0,102,204,0.3); }. Never rely on transparency alone. Test custom widgets in all contexts: light/dark backgrounds, in modals, over images, with user stylesheets. If alpha < 1 required, ensure alpha >= 0.8 and manually verify contrast in every context."
        },
        'ErrHandlerNoVisibleFocus': {
            'title': "Non-interactive element with event handler (onclick, etc.) lacks a visible focus indicator",
            'what': "Element with event handler (onclick, onkeydown, onkeyup, etc.) making it interactive but lacking native focusability has no visible focus indicator when focused via tabindex, often due to outline:none removing default focus styles",
            'why': "When you add event handlers to non-interactive elements (div, span, p with onclick), you make them functionally interactive but they're not naturally keyboard accessible. Adding tabindex makes them focusable, but without visible focus indicators, keyboard users cannot tell when the element has focus or is ready for interaction. This pattern is common in modern JavaScript frameworks where click handlers are added to divs for custom buttons, cards, or interactive containers. Without focus indication, users cannot navigate these custom interactive elements, making significant portions of interfaces inaccessible via keyboard. Users may click past interactive elements or try to interact when focus is elsewhere.",
            'who': "Keyboard users who cannot see which element has focus, users with motor disabilities using keyboard/switch controls, users with attention difficulties who lose track without visual focus, users with low vision who rely on focus indicators for position tracking, users navigating JavaScript-heavy interfaces with many event handlers on non-standard elements, mobile keyboard users on tablets, and users with cognitive disabilities who need clear interactive element identification",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11', '2.1.1'],
            'remediation': "Add visible focus indicators to elements with event handlers: [onclick]:focus, [onkeydown]:focus { outline: 2px solid #0066cc; outline-offset: 2px; } or target specific interactive non-standard elements: div[onclick]:focus, span[onclick]:focus { outline: 2px solid #0066cc; }. Better approach: use semantic HTML - if it acts like a button, use <button>; if it's a link, use <a>. If you must use event handlers on non-interactive elements, ensure: (1) tabindex is added (tabindex=\"0\" for keyboard access), (2) visible focus indicator exists, (3) keyboard handlers are implemented (Enter/Space key support), (4) appropriate ARIA role is added (role=\"button\"). Test by tabbing through interface - every element with event handler should be keyboard accessible with obvious focus indication."
        },
        'ErrHandlerColorChangeOnly': {
            'title': "Element with event handler indicates focus only through color change without structural change",
            'what': "Element with event handler (onclick, onkeydown, etc.) indicates keyboard focus by changing only color (background, text, or border color) without accompanying structural change such as outline, border width increase, box-shadow, or shape modification",
            'why': "WCAG Success Criterion 1.4.1 (Use of Color) prohibits using color as the only means of conveying information. Focus indication is critical information. Users with color blindness (8% of men), low contrast sensitivity, monochrome displays, or bright viewing conditions cannot perceive color-only changes. When interactive divs/spans with onclick handlers change from gray to blue background on focus, colorblind users see no change. This is particularly problematic in card-based interfaces, dashboard widgets, or custom controls where event handlers are added to div elements. Without perceivable focus indication independent of color, keyboard navigation becomes impossible for these users.",
            'who': "Users with color blindness (particularly deuteranopia/protanopia) who cannot distinguish color changes, users with low vision who may not perceive subtle color shifts, users on monochrome displays or in Windows High Contrast Mode where colors are overridden, users in bright outdoor environments, older users with age-related color discrimination loss, keyboard users navigating modern JavaScript interfaces with many interactive non-standard elements, and users with cognitive disabilities who need obvious interaction affordances",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.1', '2.4.7', '1.4.11'],
            'remediation': "Add structural change in addition to color change: (1) Add outline: [onclick]:focus { outline: 2px solid #0066cc; outline-offset: 2px; background-color: #e6f2ff; }, (2) Add box-shadow: [onclick]:focus { box-shadow: 0 0 0 3px rgba(0,102,204,0.5); background-color: #e6f2ff; }, (3) Increase border width: [onclick]:focus { border: 3px solid #0066cc; background-color: #e6f2ff; }. Structural change must be perceivable without color - test in grayscale. Ensure 3:1+ contrast. Better approach: use semantic HTML elements that have built-in focus patterns. If using event handlers on non-standard elements, match native control focus patterns. Test with color blindness simulation."
        },
        'ErrHandlerFocusContrastFail': {
            'title': "Focus indicator on element with event handler has less than 3:1 contrast ratio with adjacent colors",
            'what': "Element with event handler has focus indicator (outline, border, box-shadow) with color contrast ratio less than 3:1 against adjacent background colors, failing WCAG 2.4.11 Focus Appearance",
            'why': "WCAG 2.4.11 requires focus indicators to have at least 3:1 contrast to ensure perceivability for users with low vision (20/40 visual acuity). Low-contrast focus indicators are invisible or barely visible to users with moderate vision impairments, users in bright environments, users on low-quality displays, and users with age-related contrast loss. For interactive elements with event handlers (clickable cards, dashboard widgets, interactive containers), imperceptible focus indicators make keyboard navigation impossible. Users cannot determine which card has focus, which widget is active, or which container is ready for interaction. This completely breaks keyboard accessibility for modern JavaScript-heavy interfaces that rely on event handlers on non-standard elements.",
            'who': "Users with low vision requiring high-contrast indicators, users with moderate visual impairments (20/40 vision) representing WCAG baseline, older users with age-related contrast sensitivity loss, users with color vision deficiencies, users viewing content in bright sunlight or office lighting, users on budget displays, users with attention difficulties, keyboard users navigating modern interfaces with event handlers on non-standard elements, and mobile keyboard users on tablets",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Measure contrast ratio between focus indicator and all adjacent colors using contrast checker. Choose colors with at least 3:1 contrast. For light backgrounds: [onclick]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. For dark backgrounds: [onclick]:focus { outline: 2px solid #ffffff; }. For elements on varying backgrounds, use high-contrast colors or two-color indicators: [onclick]:focus { outline: 2px solid #0066cc; box-shadow: 0 0 0 4px rgba(255,255,255,0.8); }. Test focus indicators across all element states, backgrounds, and contexts where interactive elements appear. For card-based layouts, verify contrast against card backgrounds. For dashboard widgets, test against widget container backgrounds."
        },
        'ErrHandlerOutlineNoneNoBoxShadow': {
            'title': "Element with event handler removes outline without providing alternative focus indicator",
            'what': "Element with event handler uses outline:none or outline:0 to remove default focus outline but provides no alternative visual indicator such as box-shadow, border changes, background changes, or other visible focus styling",
            'why': "Removing outline without replacement on interactive elements is a critical accessibility failure. When event handlers make elements interactive, users need focus indicators to know when they can interact. For modern JavaScript interfaces with onclick handlers on divs, cards, or containers, removing focus indicators makes keyboard navigation completely impossible. Users cannot tell which card is focused in card grids, which dashboard widget is active, or which interactive container is ready for interaction. This effectively removes keyboard access to significant portions of modern web applications - a severe failure affecting all keyboard-dependent users.",
            'who': "All keyboard users who cannot see focus, users with motor disabilities relying on keyboard/switch controls, users with attention difficulties who lose position without visual focus, users with low vision needing focus indicators for location, screen magnification users needing focus to find their viewport, users with cognitive disabilities needing focus confirmation, users navigating modern JavaScript interfaces with event handlers on non-standard elements, and mobile keyboard users on tablets where touch and keyboard interaction mix",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7', '1.4.11', '2.1.1'],
            'remediation': "Never use outline:none without alternative. Best practice: [onclick]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Alternatives: (1) Box-shadow: [onclick]:focus { outline: none; box-shadow: 0 0 0 3px #0066cc; }, (2) Border change: [onclick]:focus { outline: none; border: 3px solid #0066cc; }, (3) Combination: [onclick]:focus { outline: 2px solid #0066cc; box-shadow: 0 0 4px rgba(0,102,204,0.3); }. Ensure alternative has 3:1+ contrast and at least 2px thickness. Better approach: use semantic HTML (button, a) instead of event handlers on div/span. If using event handlers, study native control focus patterns and match them. Test by tabbing - focus must be immediately, obviously visible at all times."
        },
        'ErrHandlerOutlineWidthInsufficient': {
            'title': "Element with event handler has focus outline less than 2px wide",
            'what': "Element with event handler has focus indicator using CSS outline property but with width less than 2 CSS pixels, making it too thin to be reliably perceived by users with low vision or on certain displays",
            'why': "WCAG 2.4.11 requires focus indicators to be at least 2 CSS pixels thick to ensure visibility for users with low vision (20/40 visual acuity), users at distance, users on low-resolution displays, and users in suboptimal conditions. For interactive elements with event handlers (clickable cards, dashboard widgets, interactive containers), thin 1px outlines disappear against complex backgrounds, busy card designs, or gradient containers. On high-DPI displays, 1px may render as less than 1 physical pixel, becoming nearly invisible. For large clickable areas like cards or panels, thin outlines are particularly ineffective as they're too subtle for the element size.",
            'who': "Users with low vision needing thicker indicators, users with moderate visual impairments (20/40 vision) representing WCAG baseline, older users with reduced visual acuity, users viewing on small screens or at distance, users on low-resolution displays, users in bright environments where thin indicators wash out, users with reduced contrast sensitivity, users with attention difficulties needing obvious indicators, keyboard users navigating card-based or widget-based interfaces, and mobile keyboard users on tablets",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Set outline-width to at least 2px: [onclick]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. For better visibility, especially on larger elements like cards, use 3px: [onclick]:focus { outline: 3px solid #0066cc; }. Consider element size - larger clickable areas (cards, panels) benefit from thicker outlines (3-4px). Ensure outline color has 3:1+ contrast. Test by tabbing through interface - focus should be immediately obvious without squinting. For card-based layouts with large clickable areas, consider combining outline with inset box-shadow: [onclick]:focus { outline: 3px solid #0066cc; box-shadow: inset 0 0 0 4px rgba(0,102,204,0.1); } for enhanced visibility."
        },
        'ErrHandlerSingleSideBoxShadow': {
            'title': "Element with event handler uses single-sided box-shadow for focus indicator",
            'what': "Element with event handler uses box-shadow with directional offset (non-zero x or y values) as focus indicator, causing shadow to appear only on one or two sides rather than surrounding the entire interactive element",
            'why': "Focus indicators must clearly surround or highlight the entire interactive element. Single-sided shadows appearing only on bottom or right can be easily missed by users looking at other parts of large elements, users with reduced peripheral vision, or users who have zoomed in. For large interactive elements like clickable cards, dashboard widgets, or interactive panels with event handlers, users viewing only part of the element may not see a single-sided shadow. This is particularly problematic in grid layouts with multiple cards - the shadow might appear to belong to an adjacent card. Single-sided shadows are often interpreted as decorative drop shadows rather than focus indicators.",
            'who': "Keyboard users needing complete perimeter indicators, users with reduced peripheral vision who may only see part of large elements, users zoomed at 200%+ seeing only portions, users with attention difficulties needing unambiguous indicators, users with cognitive disabilities who cannot distinguish decorative shadows from focus indicators, users with low vision needing full-perimeter indicators, users navigating card-based layouts or dashboard interfaces, and mobile keyboard users on tablets",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Modify box-shadow to zero offset for complete perimeter: [onclick]:focus { box-shadow: 0 0 0 3px #0066cc; }. Syntax (0 0 0 3px): 0 horizontal, 0 vertical, 0 blur, 3px spread - creates solid border-like effect on all sides. Better: use outline: [onclick]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. If directional shadow needed for aesthetics, combine both: [onclick]:focus { box-shadow: 0 0 0 2px #0066cc, 2px 2px 4px rgba(0,0,0,0.2); } - first provides accessibility, second provides style. Ensure 3:1+ contrast. Test with card layouts and large interactive elements to verify focus is obvious from all viewing angles and zoom levels."
        },
        'ErrHandlerTransparentOutline': {
            'title': "Element with event handler uses semi-transparent focus outline (alpha < 0.5)",
            'what': "Element with event handler has focus indicator using color with semi-transparent alpha channel (opacity less than 0.5), making final rendered color unpredictable and dependent on background colors beneath the element",
            'why': "Semi-transparent focus indicators change appearance based on what's behind them. With alpha less than 0.5, even bright colors become faint. For interactive elements with event handlers (cards, widgets, containers), these often appear in varying contexts - different backgrounds, over images, in themed sections, in overlays. Automated testing cannot verify contrast with transparent colors. Focus indicator might pass testing but fail for users when interactive elements appear over different backgrounds. For card-based layouts where cards may float over various page backgrounds, transparent indicators create unpredictable accessibility.",
            'who': "Users with low vision needing high-contrast indicators that transparent colors may not provide, users with color vision deficiencies who cannot perceive subtle transparent indicators, users in bright environments where low-opacity indicators wash out, accessibility testers unable to verify compliance with transparent indicators, developers unable to guarantee WCAG conformance across all contexts, users with attention difficulties needing strong indicators, users navigating card-based or widget-based interfaces, and mobile keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Use fully opaque colors (alpha = 1.0): [onclick]:focus { outline: 2px solid rgb(0, 102, 204); outline-offset: 2px; } or [onclick]:focus { outline: 2px solid #0066cc; }. Choose colors with verified 3:1+ contrast against all backgrounds where interactive elements appear. If transparency desired for aesthetic glow, use supplementary with opaque primary: [onclick]:focus { outline: 2px solid #0066cc; outline-offset: 2px; box-shadow: 0 0 8px rgba(0,102,204,0.3); }. Never rely on transparency alone. Test interactive elements in all contexts: light/dark backgrounds, over images, in modals, with user stylesheets. For card layouts, test against all page backgrounds where cards appear."
        },
        'WarnHandlerDefaultFocus': {
            'title': "Element with event handler relies on default browser focus styles which vary across browsers",
            'what': "Element with event handler has no custom focus styles and relies entirely on browser default focus indicators, which vary significantly across browsers, operating systems, and versions, and may not work with non-standard interactive elements",
            'why': "Browser default focus styles are designed for standard interactive elements (buttons, links, form controls). For non-standard elements with event handlers (div with onclick), browsers may provide no default focus indication at all, or provide inconsistent indication. Even when defaults exist, they vary dramatically - Chrome vs Firefox vs Safari show different outlines, some browsers show nothing for non-standard elements. Relying on defaults means no guarantee of accessibility - your interactive elements might have focus indication in Chrome but none in Safari. For modern JavaScript interfaces with event handlers on divs/spans, browser defaults are typically insufficient or absent entirely.",
            'who': "Users with low vision needing consistent focus indicators across browsers, keyboard users needing reliable indication regardless of browser choice, users with color vision deficiencies who may not perceive certain default colors, quality assurance teams unable to ensure consistent accessibility, users on different browsers/platforms, users of assistive technology that behaves differently with default versus custom focus, users navigating JavaScript-heavy interfaces with event handlers on non-standard elements, and international users on various devices",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Define explicit custom focus styles: [onclick]:focus, [onkeydown]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Choose colors with verified 3:1+ contrast. Test across Chrome, Firefox, Safari, Edge on Windows and macOS, and mobile browsers. Ensure focus works with all interactive element types. Better approach: use semantic HTML elements (button, a) that have reliable browser defaults, then customize those. If using event handlers on non-standard elements, ensure: (1) explicit focus styles are defined, (2) tabindex is added for keyboard access, (3) keyboard event handlers are implemented, (4) appropriate ARIA roles are added. Document focus standards in design system. Use CSS custom properties for consistency."
        },
        'WarnHandlerNoBorderOutline': {
            'title': "Element with event handler uses border/box-shadow changes but no separate outline for focus",
            'what': "Element with event handler indicates focus using border thickness changes, border color changes, or box-shadow, but does not use CSS outline property which is specifically designed for focus indication and does not affect layout",
            'why': "While border or box-shadow can work for focus indication, outline is specifically designed for this purpose and has advantages: no layout shift (borders increase element size), follows element shape naturally, easily offset with outline-offset, more predictable across browsers. For interactive elements with event handlers (clickable cards, dashboard widgets), border-based focus indicators can cause layout shifts that move adjacent cards or widgets, creating jarring user experience. In grid layouts, border changes can cause reflow affecting entire rows. Box-shadow doesn't cause layout shift but may be clipped by overflow:hidden on parent containers, common in card-based layouts.",
            'who': "All keyboard users benefit from stable focus indicators, users with attention/cognitive difficulties distracted by layout shifts, users with motor impairments who lose position when content shifts, users with low vision using zoom experiencing jarring movements from reflow, developers maintaining card-based or grid layouts wanting predictable behavior, users navigating dashboard interfaces with multiple widgets, and users with vestibular disorders sensitive to unexpected content movement",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.7'],
            'remediation': "Replace border-based or box-shadow-based focus with outline: [onclick]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Provides clear indication without layout shift. If box-shadow or border preferred for aesthetic reasons, ensure: (1) zero offset for complete coverage (box-shadow: 0 0 0 3px #color), (2) sufficient thickness (at least 2px), (3) 3:1+ contrast, (4) not clipped by parent overflow:hidden. Can combine outline with box-shadow for enhanced visibility: [onclick]:focus { outline: 2px solid #0066cc; outline-offset: 2px; box-shadow: 0 0 0 4px rgba(0,102,204,0.2); }. Test by tabbing through card grids or widget layouts to verify no layout shift occurs and focus is immediately visible."
        },
        'WarnTabindexDefaultFocus': {
            'title': "Element with tabindex relies on default browser focus styles which may not work for non-standard elements",
            'what': "Element with tabindex has no custom focus styles and relies on browser default focus indicators, which do not adapt to background colors and may have insufficient contrast or no indication at all for non-standard interactive elements",
            'why': "The primary problem with default browser focus outlines is that they don't adapt to the background color behind them, creating contrast failures. A blue default outline may be invisible on a blue background, or a black outline invisible on dark backgrounds. This is the main reason default focus indicators fail accessibility requirements. Additionally, browser defaults are inconsistent - Chrome, Firefox, and Safari show different outlines (or no outline) for non-standard elements like divs or spans with tabindex. A custom focusable element might have visible focus in one browser but not another, and even when visible, may fail contrast requirements depending on the background.",
            'who': "Keyboard users who lose track of focus position when the outline blends into the background, users with low vision who cannot see low-contrast default outlines, users with color vision deficiencies who may not perceive certain default colors against certain backgrounds, users navigating custom widgets with tabindex across different browsers, and quality assurance teams unable to ensure consistent, contrast-compliant focus indicators",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Define explicit custom focus styles with guaranteed contrast: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; background-color: white; } or use high-contrast combinations that work on any background. For maximum reliability, use a combination of outline and box-shadow to create a \"halo\" effect: [tabindex]:focus { outline: 2px solid white; box-shadow: 0 0 0 4px #0066cc; outline-offset: 0; }. This white inner ring + colored outer ring pattern ensures visibility on both light and dark backgrounds. Test your focus indicators on all background colors used in your design. Verify 3:1+ contrast ratio between the focus indicator and adjacent colors. Test across Chrome, Firefox, Safari, Edge on Windows and macOS. For elements that move over varied backgrounds (like draggable items), use the dual-color halo technique."
        },
        'WarnTabindexNoBorderOutline': {
            'title': "Element with tabindex uses border/box-shadow changes but no separate outline for focus",
            'what': "Element with tabindex indicates focus using border thickness changes, border color changes, or box-shadow, but does not use CSS outline property which is designed for focus indication and does not affect layout",
            'why': "While border or box-shadow can work, outline is specifically designed for focus and has advantages: no layout shift (borders increase element size, potentially affecting custom widget layouts), follows element shape naturally, easily offset with outline-offset, more predictable across browsers. For custom widgets with tabindex (tab panels, accordions, custom controls), border-based focus indicators can cause layout shifts that disrupt widget appearance or cause reflow. In tab panels, border changes on focus might push tab content or affect tab width calculations. Box-shadow doesn't cause layout shift but may be clipped by overflow:hidden common in custom widget containers.",
            'who': "All keyboard users benefit from stable focus indicators, users with attention/cognitive difficulties distracted by layout shifts when tabbing through widgets, users with motor impairments who lose position when content shifts, users with low vision using zoom experiencing jarring movements, developers maintaining custom widgets wanting predictable focus behavior, users navigating tab panels and accordions, users with vestibular disorders sensitive to unexpected movement, and users of screen magnification who need stable focus tracking",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.7'],
            'remediation': "Replace border-based or box-shadow-based focus with outline: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. Provides clear indication without layout shift. If box-shadow or border preferred, ensure: (1) zero offset for complete coverage (box-shadow: 0 0 0 3px #color), (2) sufficient thickness (at least 2px), (3) 3:1+ contrast, (4) not clipped by parent overflow:hidden. Can combine: [tabindex]:focus { outline: 2px solid #0066cc; outline-offset: 2px; box-shadow: 0 0 0 4px rgba(0,102,204,0.2); }. Test by tabbing through custom widgets to verify: (1) no layout shift occurs, (2) focus is immediately visible, (3) widget functionality not disrupted by focus indicator. For tab panels, ensure tabs don't resize on focus. For accordions, ensure headers don't shift on focus."
        },
        'ErrTableMissingCaption': {
            'title': "Data table lacks caption element to describe its content",
            'what': "Data table lacks caption element to describe its content",
            'why': "Without captions, users may not understand the table\'s purpose or content before navigating through it.",
            'who': "Screen reader users who need table context, users with cognitive disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add <caption> element as first child of table describing what data the table contains."
        },
        'ErrTableNoColumnHeaders': {
            'title': "Data table has no column headers (th elements)",
            'what': "Data table has no column headers (th elements)",
            'why': "Without headers, screen reader users cannot understand what each column represents when navigating cells.",
            'who': "Screen reader users navigating tables, users who need to understand data relationships.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Use <th> elements for column headers in first row, add scope=\"col\" to clarify header relationships."
        },
        'ErrTextContrastAA': {
            'title': "Normal text ({fontSize}px) fails WCAG AA contrast: {ratio}:1 (required: 4.5:1)",
            'what': "Normal text fails WCAG AA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This normal-sized text ({fontSize}px) with a contrast ratio of {ratio}:1 does not meet WCAG Level AA requirements. Normal text requires a minimum contrast ratio of 4.5:1 to pass Level AA. The foreground color ({fg}) against the background ({bg}) doesn\'t provide enough distinction for users with visual impairments.",
            'who': "Users with low vision who need higher contrast to distinguish text, users with color blindness, older users experiencing age-related vision changes, and users viewing content in bright sunlight or on low-quality displays",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AA requires at least 4.5:1 for normal text ({fontSize}px). To fix, darken the foreground color from {fg} or lighten the background from {bg}. Consider using #595959 or darker on white background, or #FFFFFF on backgrounds darker than #767676."
        },
        'ErrTextContrastAAA': {
            'title': "Normal text ({fontSize}px) fails WCAG AAA contrast: {ratio}:1 (required: 7:1)",
            'what': "Normal text fails WCAG AAA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This normal-sized text ({fontSize}px) with a contrast ratio of {ratio}:1 does not meet WCAG Level AAA enhanced requirements. Normal text requires a minimum contrast ratio of 7:1 to pass Level AAA. The foreground color ({fg}) against the background ({bg}) doesn\'t provide optimal distinction for maximum accessibility.",
            'who': "Users with moderate visual impairments, including those with low vision, color blindness, or contrast sensitivity who benefit from enhanced contrast for optimal readability",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.6'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AAA requires at least 7:1 for normal text ({fontSize}px). To fix, use high contrast combinations like #333333 or darker on white background, or white text on backgrounds darker than #565656."
        },
        'ErrTimersWithoutControls': {
            'title': "Time-based content lacks user controls",
            'what': "Time-based content lacks user controls",
            'why': "Users need control over timed content to have enough time to read and interact with it.",
            'who': "Users with cognitive disabilities, users with reading disabilities, screen reader users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.2.1'],
            'remediation': "Provide controls to pause, stop, or extend time limits; avoid unnecessary time constraints."
        },
        'ErrTitleAsOnlyLabel': {
            'title': "Form element is using title attribute as its only accessible label, which is insufficient for accessibility",
            'what': "Form element is using title attribute as its only accessible label, which is insufficient for accessibility",
            'why': "When title is the only labeling mechanism for a form field, many users cannot determine what information to enter. Title attributes are not announced by screen readers when navigating forms in normal mode, don\'t appear on mobile devices, cannot be accessed by keyboard users, and disappear too quickly for many users to read. This makes the form field essentially unlabeled for a large portion of users, preventing them from completing forms successfully.",
            'who': "Screen reader users who won\'t hear the field\'s purpose when navigating the form, mobile users who cannot see title tooltips at all, keyboard users who cannot hover to see the tooltip, users with motor disabilities who struggle with precise hovering, users with cognitive disabilities who need persistent labels as memory aids, and voice control users who cannot reference fields without visible labels",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1', '1.3.1', '4.1.2'],
            'remediation': "Add a proper visible <label> element associated with the form field using the \'for\' attribute. If space is limited, use placeholder text in addition to (not instead of) a label. For complex layouts, consider using aria-labelledby to reference existing visible text. If you must use aria-label, ensure it\'s descriptive and consider adding visible text for sighted users. Never rely solely on title attributes for labeling form fields - they should only supplement proper labels, not replace them."
        },
        'ErrTitleAttrFound': {
            'title': "Title attribute used - fundamentally inaccessible to assistive technology",
            'what': "Title attribute used - fundamentally inaccessible to assistive technology",
            'why': "Title attributes fail WCAG Conformance requirement 5.2.4 as they are not accessible with regular assistive technology. For screen magnifier users at high magnification, tooltip content extends off-screen and disappears when mouse moves to read it, making content completely inaccessible",
            'who': "Screen magnifier users (tooltip goes off-screen at high magnification), mobile and touch screen users (no hover), keyboard-only users (cannot trigger tooltip), screen reader users (inconsistent support), users with motor disabilities (tooltip disappears when mouse moves), users with cognitive disabilities (tooltip disappears too quickly)",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['5.2.4', '4.1.2'],
            'remediation': "Never use title attributes. Use visible text, proper <label> elements for forms, aria-label for icons, or visible helper text. For abbreviations, provide full text on first use or use <dfn> element"
        },
        'ErrTransparentFocusIndicator': {
            'title': "Focus indicator uses transparent or nearly transparent color, making it effectively invisible",
            'what': "Focus indicator uses transparent or nearly transparent color, making it effectively invisible",
            'why': "A transparent focus indicator is functionally the same as no focus indicator - users cannot see where keyboard focus is located. This might occur from using rgba with 0 or very low alpha values, setting outline-color to transparent, or using colors that match the background. The focus indicator exists technically but provides no practical benefit to users trying to navigate.",
            'who': "Keyboard users who need visible focus indicators to navigate, users with low vision who need clear visual cues, users with color blindness who may already struggle with certain color combinations, and users with cognitive disabilities who need obvious focus indicators",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Use opaque colors with sufficient contrast for focus indicators. Replace transparent outlines with visible colors, ensure at least 3:1 contrast ratio between focus indicator and background, use solid colors or high alpha values (0.7 or higher) for rgba colors. Test focus indicators on different backgrounds across your site. Consider using box-shadow or background changes as additional focus indicators."
        },
        'ErrUnlabelledField': {
            'title': "Form input element lacks an accessible name through <label>, aria-label, aria-labelledby, or other labeling methods, leaving the field\'s purpose undefined for assistive technologies",
            'what': "Form input element lacks an accessible name through <label>, aria-label, aria-labelledby, or other labeling methods, leaving the field\'s purpose undefined for assistive technologies",
            'why': "Without labels, users cannot determine what information to enter, leading to form errors, abandoned transactions, and inability to complete critical tasks. Screen readers announce only the field type like \"edit\" or \"combo box\" without context, forcing users to guess based on surrounding content that may not be programmatically associated. This creates barriers for independent form completion and may result in users submitting incorrect information or being unable to proceed.",
            'who': "Blind and low vision users using screen readers who hear no field description when navigating forms, users with cognitive disabilities who need clear labels to understand what information is required, users with motor disabilities using voice control who cannot reference unlabeled fields by name, mobile users where placeholder text may disappear on focus, and users who rely on browser autofill features that depend on proper field labeling",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.3.2', '4.1.2'],
            'remediation': "Add explicit <label> elements with for attribute matching the input\'s id (preferred method), use aria-label for simple labels when visual text isn\'t needed, implement aria-labelledby to reference existing visible text, ensure placeholder text is not the only labeling method as it disappears on input, wrap inputs and label text together for implicit association, and verify all form controls including select elements, textareas, and custom widgets have accessible names"
        },
        'ErrVideoIframeMissingTitle': {
            'title': "Video iframe lacks title attribute",
            'what': "Video iframe lacks title attribute",
            'why': "Without titles, screen reader users don\'t know what video content is embedded.",
            'who': "Screen reader users who need to understand embedded content.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Add descriptive title attribute to video iframes describing the video content."
        },
        'ErrWrongTabindexForInteractiveElement': {
            'title': "Inappropriate tabindex on interactive element",
            'what': "Inappropriate tabindex on interactive element",
            'why': "Tab order doesn\'t match visual order",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Let natural tab order work, avoid tabindex"
        },
        'InfoFieldLabelledUsingAriaLabel': {
            'title': "Field is labeled using aria-label=\"{found}\", which is valid but may have usability considerations",
            'what': "Field is labeled using aria-label=\"{found}\", which is valid but may have usability considerations",
            'why': "While aria-label=\"{found}\" is a valid way to label this form field, it has limitations: the label \"{found}\" is not visible on screen which can confuse sighted users, voice control users cannot reference the field by the visible text \"{found}\", the label won\'t be automatically translated by browser translation tools, and users with cognitive disabilities benefit from visible labels as memory aids.",
            'who': "Sighted users who can\'t see \"{found}\" as a label, voice control users who can\'t say \"click {found}\", users relying on browser translation, users with cognitive disabilities who benefit from persistent visible labels",
            'impact': ImpactScale.INFO.value,
            'wcag': ['3.3.2'],
            'remediation': "Consider if a visible label showing \"{found}\" would better serve all users. If space permits, use a visible <label> element with the text \"{found}\". If aria-label must be used, ensure \"{found}\" is clear and descriptive. Consider adding visible helper text or placeholder text to provide visual context."
        },
        'InfoHeadingNearLengthLimit': {
            'title': "Heading is {length} characters, approaching recommended limit of {limit}",
            'what': "Heading is {length} characters long, approaching the recommended limit of {limit} characters",
            'why': "Long headings (currently {length} characters) are more difficult to scan and understand quickly. While not yet exceeding the {limit} character limit, shorter headings improve readability and comprehension.",
            'who': "Users with cognitive disabilities who benefit from concise headings, users scanning content quickly, screen reader users who must listen to full heading text.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Consider shortening the heading from {length} to under {nearLimit} characters for optimal readability while maintaining clarity. Current text: \"{text}\""
        },
        'WarnNoColorSchemeSupport': {
            'title': "Site doesn\'t support OS color scheme preferences (dark mode/light mode)",
            'what': "Site doesn\'t support prefers-color-scheme media query to adapt to user\'s operating system color scheme preferences",
            'why': "Many users with light sensitivity, photophobia, or visual impairments require dark mode to comfortably use digital interfaces. Users who have configured their operating system to use dark mode expect websites to honor that preference. Without dark mode support, these users experience eye strain, headaches, and difficulty reading content. Similarly, users in bright environments may prefer light mode for better readability. By not supporting color scheme preferences, the site fails to provide an accessibility-supported experience for users who require these accommodations.",
            'who': "Users with light sensitivity or photophobia who require dark mode, users with migraines triggered by bright screens, users with visual impairments who find dark backgrounds easier to read, users working in low-light environments, users who have configured OS-level dark mode for accessibility reasons, users with astigmatism who experience less blur with dark backgrounds, elderly users who prefer high contrast dark themes",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.3', '5.2.4'],
            'remediation': "Implement CSS prefers-color-scheme media query to detect and support user\'s OS color preference. Add @media (prefers-color-scheme: dark) { } rules with appropriate color adjustments for dark mode. Ensure sufficient contrast ratios are maintained in both light and dark themes (4.5:1 for normal text, 3:1 for large text). Test with actual OS dark mode enabled across different browsers and devices. Consider using CSS custom properties (variables) to make theme switching more maintainable. Example: @media (prefers-color-scheme: dark) { body { background: #1a1a1a; color: #e0e0e0; } }"
        },
        'WarnNoContrastSupport': {
            'title': "Site doesn\'t support OS high contrast mode preferences",
            'what': "Site doesn\'t support prefers-contrast media query to adapt to user\'s operating system high contrast mode preferences",
            'why': "Many users with low vision, color vision deficiencies, or visual impairments require high contrast mode to read digital content. Users who have configured their operating system to use high contrast mode (or request increased contrast) expect websites to honor that preference. High contrast mode significantly increases the contrast ratio between text and backgrounds, making content more readable for users with reduced visual acuity. Without high contrast support, these users experience difficulty reading text, distinguishing interface elements, and navigating the site. By not supporting contrast preferences, the site fails to provide an accessibility-supported experience for users who require these accommodations.",
            'who': "Users with low vision who require high contrast to read text, users with color vision deficiencies (color blindness) who need stronger contrast, users with cataracts or other vision conditions that reduce contrast sensitivity, elderly users with age-related vision decline, users with light sensitivity who need higher contrast in certain lighting conditions, users working in bright sunlight who need increased contrast, users with astigmatism who benefit from higher contrast ratios, users who have configured OS-level high contrast mode for accessibility reasons",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.3', '5.2.4'],
            'remediation': "Implement CSS prefers-contrast media query to detect and support user\'s OS contrast preference. Add @media (prefers-contrast: more) { } rules with increased contrast ratios for high contrast mode. Ensure significantly higher contrast ratios in high contrast mode (ideally 7:1 or higher for normal text). Test with actual OS high contrast mode enabled across different browsers and operating systems (Windows High Contrast Mode, macOS Increase Contrast). Consider using CSS custom properties (variables) to make contrast adjustments more maintainable. Example: @media (prefers-contrast: more) { body { background: #000; color: #fff; } a { color: #0ff; text-decoration: underline; } }. Ensure all UI elements including borders, buttons, and form controls have sufficient contrast in high contrast mode."
        },
        'RegionLandmarkAccessibleNameIsBlank': {
            'title': "Region landmark has blank accessible name",
            'what': "Region landmark has blank accessible name",
            'why': "Blank labels provide no information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label text"
        },
        'ErrHeadingAccessibleNameMismatch': {
            'title': "Visible heading text doesn\'t match its accessible name",
            'what': "Visible heading text doesn\'t match its accessible name",
            'why': "Voice control users may not be able to reference the heading by its visible text",
            'who': "Voice control users, screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.5.3'],
            'remediation': "Ensure visible text starts the accessible name (e.g., visible 'Support' should be at the start of aria-label, like 'Support: Customer Service')"
        },
        'WarnAnchorTargetTabindex': {
            'title': "Anchor target element has unnecessary tabindex",
            'what': "Anchor target element has unnecessary tabindex",
            'why': "Elements that are link targets don\'t need tabindex; adding it may create confusion.",
            'who': "Keyboard users encountering unexpected tab stops.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.1.1'],
            'remediation': "Remove tabindex from elements that are only link targets, not interactive controls."
        },
        'WarnBannerLandmarkAccessibleNameUsesBanner': {
            'title': "Banner landmark uses generic term \"banner\" in label",
            'what': "Banner landmark uses generic term \"banner\" in label",
            'why': "Redundant labeling",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive label or rely on implicit role"
        },
        'WarnButtonGenericText': {
            'title': "Button uses generic text like \"Click here\", \"Submit\", or \"OK\" without context",
            'what': "Button uses generic text like \"Click here\", \"Submit\", or \"OK\" without context",
            'why': "Screen reader users often navigate by pulling up a list of all buttons on a page. Generic button text provides no information about what the button does when heard out of context. Users cannot determine the button\'s purpose without additional exploration, slowing navigation and potentially causing errors.",
            'who': "Screen reader users navigating by buttons list, users with cognitive disabilities who need clear labels, and screen magnifier users who may not see surrounding context",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive button text that explains the action (e.g., \"Submit registration form\" instead of \"Submit\", \"Download PDF report\" instead of \"Download\"). The button text should make sense when read in isolation. If visual design constraints require short text, use aria-label to provide a more descriptive accessible name."
        },
        'WarnColorOnlyLink': {
            'title': "Link distinguished only by color without underline or other indicator",
            'what': "Link distinguished only by color without underline or other indicator",
            'why': "Users who cannot perceive color differences cannot identify links in text.",
            'who': "Colorblind users, users with low vision, users of monochrome displays.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.1'],
            'remediation': "Add underlines to links, use other visual indicators beyond color, ensure 3:1 contrast with surrounding text."
        },
        'WarnColorRelatedStyleDefinedExplicitlyInElement': {
            'title': "Color-related CSS properties found in inline style attributes on HTML elements",
            'what': "Color-related CSS properties found in inline style attributes on HTML elements",
            'why': "Inline color styles bypass user stylesheets and browser extensions that help users with visual disabilities customize colors for better readability. Users who need high contrast, inverted colors, or specific color schemes cannot easily override inline styles. This also makes it difficult to implement dark mode, maintain consistent theming, or allow user color preferences.",
            'who': "Users with low vision who need high contrast or specific color combinations, users with color blindness who need to adjust problematic color pairs, users with dyslexia who benefit from specific background colors, users with light sensitivity who need dark themes, and users who rely on browser extensions for color customization",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3', '1.4.8'],
            'remediation': "Move color-related styles (color, background-color, border-color, etc.) to external CSS files using classes. This allows users to override styles with their own stylesheets, enables easier theme switching, improves maintainability, and supports user preference media queries like prefers-color-scheme. Use CSS custom properties (variables) for colors to make customization even easier."
        },
        'WarnColorRelatedStyleDefinedExplicitlyInStyleTag': {
            'title': "Color-related CSS found in <style> tags within the HTML document instead of external stylesheets",
            'what': "Color-related CSS found in <style> tags within the HTML document instead of external stylesheets",
            'why': "Embedded styles in <style> tags are harder for users to override than external stylesheets and may not be cached efficiently. Users with visual disabilities who need custom color schemes must use more aggressive CSS overrides. This approach also makes it difficult to maintain consistent theming across pages and prevents users from disabling styles entirely if needed.",
            'who': "Users with low vision requiring custom color schemes, users with photosensitivity needing to modify bright colors, users with color blindness who need to adjust color combinations, and users who benefit from consistent, predictable styling across pages",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3', '1.4.8'],
            'remediation': "Move color styles to external CSS files linked with <link> tags. Organize colors using CSS custom properties for easy theming. Implement user preference support with @media (prefers-color-scheme) and similar queries. Consider providing theme switcher functionality. Ensure your external stylesheets are properly cached for performance."
        },
        'WarnComplementaryLandmarkAccessibleNameUsesComplementary': {
            'title': "Complementary landmark label uses generic term \"complementary\"",
            'what': "Complementary landmark label uses generic term \"complementary\"",
            'why': "Generic labels don\'t describe specific content",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive labels like \"Related articles\" or \"Sidebar\""
        },
        'WarnComplementaryLandmarkHasNoLabel': {
            'title': "Complementary landmark lacks a label",
            'what': "Complementary landmark lacks a label",
            'why': "Hard to distinguish multiple complementary sections",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add aria-label or aria-labelledby to identify the purpose"
        },
        'WarnContentInfoLandmarkHasNoLabel': {
            'title': "Contentinfo landmark lacks a label",
            'what': "Contentinfo landmark lacks a label",
            'why': "May be harder to identify purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add descriptive label if multiple contentinfo exist"
        },
        'WarnContentOutsideLandmarks': {
            'title': "Content exists outside of landmark regions - DEPRECATED, use ErrContentOutsideLandmarks",
            'what': "Content exists outside of landmark regions",
            'why': "Content outside landmarks is harder to find and navigate for screen reader users.",
            'who': "Screen reader users who navigate by landmarks.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure all content is within appropriate landmarks (header, nav, main, footer, aside)."
        },
        'ErrContentOutsideLandmarks': {
            'title': "Content exists outside of landmark regions, making it invisible to screen reader landmark navigation",
            'what': "Page content exists outside of any landmark regions (main, navigation, complementary, contentinfo, banner), preventing screen reader users from finding it through landmark navigation",
            'why': "This fails WCAG 5.2.4 Accessibility Supported because screen reader users rely on landmark navigation as their primary method for understanding page structure and quickly jumping between major page regions. When content exists outside landmarks, it becomes invisible to landmark navigation - users cannot find it using NVDA's 'D' key, JAWS' semicolon key, or VoiceOver's rotor. These users must read the entire page linearly or tab through every element to discover this content, defeating the purpose of semantic HTML structure. All meaningful page content should be contained within appropriate landmarks so that screen reader users can efficiently navigate and access it using their primary navigation patterns.",
            'who': "Screen reader users who use landmark navigation (NVDA 'D' key, JAWS ';' key, VoiceOver rotor) to quickly jump between page regions, users with cognitive disabilities who benefit from clear page structure, keyboard users who navigate by landmarks to efficiently access different page sections, mobile screen reader users who use touch gestures to navigate by landmarks",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['5.2.4'],
            'remediation': "Place all meaningful page content within appropriate HTML5 landmarks or ARIA landmark roles: (1) Main content in <main> or role=\"main\"; (2) Site navigation in <nav> or role=\"navigation\"; (3) Page header/masthead in <header> or role=\"banner\" (when direct child of body); (4) Page footer in <footer> or role=\"contentinfo\" (when direct child of body); (5) Complementary content in <aside> or role=\"complementary\"; (6) Search functionality in role=\"search\"; (7) Forms in <form> with accessible name to create form landmark. Acceptable exceptions: skip links at the very top of <body>, hidden content (aria-hidden=\"true\" or display:none), and scripts/noscript elements. Test by navigating the page using only landmark navigation to ensure all content is discoverable. NOTE: This is a WCAG Conformance Requirement 5.2.4 Accessibility Supported failure - the HTML structure is not being used in an accessibility-supported way."
        },
        'WarnContentinfoLandmarkAccessibleNameUsesContentinfo': {
            'title': "Contentinfo landmark uses generic term \"contentinfo\" in label",
            'what': "Contentinfo landmark uses generic term \"contentinfo\" in label",
            'why': "Redundant labeling",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive label or rely on implicit role"
        },
        'WarnCustomBulletStyling': {
            'title': "List uses custom bullet styling that may not be accessible",
            'what': "List item uses {customType} for bullets instead of standard list-style-type. Details: {customDetails}",
            'why': "Custom bullets using CSS ::before pseudo-elements, background images, or embedded images may not be announced correctly by screen readers. While the list structure is preserved, custom visual bullets might not provide the same semantic cues or be available to assistive technologies. This can reduce the clarity of list navigation for screen reader users.",
            'who': "Screen reader users who may miss visual bullet cues, users with custom stylesheets who override author styles, users relying on list semantics for navigation.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Consider using standard list-style-type values (disc, circle, square, decimal, etc.) which are better supported by assistive technologies. If custom bullets are required, use the CSS ::marker pseudo-element instead of ::before, as ::marker is specifically designed for this purpose and has better accessibility support. Ensure the list-style-type property is not set to 'none'. Test with screen readers to verify list navigation works correctly."
        },
        'WarnDeepListNesting': {
            'title': "Lists nested more than 3 levels deep",
            'what': "Lists nested more than 3 levels deep",
            'why': "Deeply nested lists are difficult to understand and navigate.",
            'who': "Screen reader users, users with cognitive disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Simplify list structure, consider alternative presentations for complex hierarchies."
        },
        'WarnElementNotInLandmark': {
            'title': "Important content found outside of any landmark region, making it harder for screen reader users to find and navigate to",
            'what': "Important content found outside of any landmark region, making it harder for screen reader users to find and navigate to",
            'why': "Landmarks create a navigable structure for your page, like a table of contents. Content outside landmarks is like having chapters missing from the table of contents - users may never find it when navigating by landmarks. Screen reader users often jump between landmarks to quickly scan page structure, and content outside landmarks requires them to read through the entire page linearly to discover it. This particularly affects users who are familiar with your site and want to quickly navigate to specific content areas.",
            'who': "Screen reader users who navigate by landmarks to efficiently explore pages, keyboard users using browser extensions for landmark navigation, users with cognitive disabilities who rely on consistent page structure, and power users who use landmarks for quick navigation",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure all meaningful content is contained within appropriate landmark regions. Typically: use <header> or role=\"banner\" for site headers, <nav> or role=\"navigation\" for navigation menus, <main> or role=\"main\" for primary content, <aside> or role=\"complementary\" for sidebar content, <footer> or role=\"contentinfo\" for footers. Decorative content or spacers can remain outside landmarks. Review your page structure to ensure no important content is orphaned outside the landmark structure."
        },
        'ErrEmptyLanguageAttribute': {
            'title': "Element (non-HTML) has a lang attribute present but with no value (lang=\"\"), preventing screen readers from determining language changes",
            'what': "Element (non-HTML) has a lang attribute present but with no value (lang=\"\"), preventing screen readers from determining language changes",
            'why': "An empty lang attribute on elements prevents screen readers from properly switching pronunciation rules for content in different languages. Screen readers cannot adjust pronunciation rules for content sections in different languages. This can make multilingual content difficult or impossible to understand when read aloud.",
            'who': "Screen reader users who need proper language identification for correct pronunciation, multilingual users relying on language switching, users of translation tools, and users with reading disabilities using text-to-speech",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.2'],
            'remediation': "Add a valid language code to the lang attribute (e.g., lang=\"fr\" for French, lang=\"es\" for Spanish). Use the correct ISO 639-1 two-letter code or ISO 639-2 three-letter code. If the language matches the page language, remove the lang attribute entirely rather than leaving it empty."
        },
        'WarnFastInterval': {
            'title': "JavaScript interval running faster than once per second",
            'what': "JavaScript interval running faster than once per second",
            'why': "Rapid updates can be distracting and difficult to process.",
            'who': "Users with cognitive disabilities, users with attention disorders.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.2.2'],
            'remediation': "Slow down update intervals, provide pause controls for rapid updates."
        },
        'WarnFieldLabelledByElementThatIsNotALabel': {
            'title': "Field labeled by element \'{found}\' that is not semantically a label",
            'what': "Field labeled by element \'{found}\' that is not semantically a label",
            'why': "The element with ID \'{found}\' is being used as a label but is not a <label> element. While this can work, non-label elements may not convey proper semantic meaning or behave as users expect.",
            'who': "Screen reader users who may not receive proper label semantics",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Consider using a proper <label> element, or ensure the element \'{found}\' contains appropriate descriptive text for the field"
        },
        'WarnFieldLabelledByMultipleElements': {
            'title': "Field is labeled by {count} elements via aria-labelledby",
            'what': "Field is labeled by {count} elements via aria-labelledby",
            'why': "When {count} elements label a field, they will be concatenated together. The order and combination may not make sense or could be confusing when read as a single label.",
            'who': "Screen reader users who hear all {count} labels concatenated together",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2'],
            'remediation': "Review the {count} labeling elements to ensure they make sense when read together in order. Consider if a single, clear label would be better."
        },
        'ErrInaccessibleFont': {
            'title': "Font '{fontName}' is difficult to read",
            'what': "Using {fontName} font which is known to be difficult to read",
            'why': "This font is categorized as {category}: {reason}. Research shows these fonts are harder to read, especially for users with dyslexia or low vision.",
            'who': "Users with dyslexia, low vision, reading disabilities",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.8'],
            'remediation': "Replace {fontName} with a clear, readable sans-serif font like Arial, Verdana, Helvetica, or Tahoma. Avoid decorative, script, cursive, or highly stylized fonts for body text."
        },
        'WarnFontNotInRecommenedListForA11y': {
            'title': "Font '{fontName}' is not in the recommended list for accessibility - consider using a more accessible alternative",
            'what': "Font '{fontName}' is being used on this page but is not included in the recommended list of accessibility-friendly fonts that are proven to be highly readable for users with dyslexia, low vision, or reading disabilities",
            'why': "While many fonts are technically readable, research and user testing have identified specific fonts that work significantly better for users with reading difficulties. Fonts not on the recommended list may have characteristics that make them harder to read: insufficient distinction between similar characters (like 'I', 'l', '1' or 'O', '0'), inconsistent letter spacing, decorative elements that reduce clarity, condensed widths that crowd characters together, or stylistic choices that increase cognitive load for readers with dyslexia. Recommended fonts like Arial, Verdana, Tahoma, Calibri, Helvetica, Open Sans, and specialized fonts like OpenDyslexic have been specifically evaluated for characteristics like clear character differentiation, generous spacing, consistent stroke weight, and lack of distracting embellishments. Using non-recommended fonts doesn't guarantee accessibility problems, but it increases risk that some users will struggle unnecessarily.",
            'who': "Users with dyslexia (affecting 10-15% of the population) who need clear character distinction and consistent spacing, users with low vision who need high legibility and clear letterforms, users with reading disabilities who benefit from simple, unadorned fonts, older users with age-related vision changes who need maximum clarity, users with cognitive disabilities who benefit from familiar, easy-to-process fonts, users reading in their non-native language who need maximum character clarity, and users with attention difficulties who are distracted by stylistic font features",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8', '1.4.12'],
            'remediation': "Consider replacing '{fontName}' with a font from the recommended accessibility list: Arial, Verdana, Tahoma, Calibri, Helvetica, Open Sans, Roboto, Lato, Noto Sans, or Source Sans Pro for body text. For users with dyslexia specifically, OpenDyslexic, Comic Sans, or Century Gothic are often preferred. The recommended fonts share key characteristics: clear distinction between similar characters, generous spacing, medium to wide width, simple sans-serif design, and consistent stroke weight. If you must use '{fontName}' for branding or design reasons, ensure it meets these criteria: line height of at least 1.5, letter spacing (tracking) of at least 0.12em, clear distinction between I, l, 1 and between O, 0, sufficient x-height for readability at small sizes, and no decorative or script features for body text. Reserve decorative fonts for headings only, never for paragraphs or form labels. Test your font choice with actual users who have dyslexia or low vision when possible. Provide a font switcher allowing users to choose from accessible alternatives if feasible."
        },
        'WarnFormHasNoLabel': {
            'title': "Form element has no accessible name to describe its purpose",
            'what': "Form element has no accessible name to describe its purpose",
            'why': "When a form lacks an accessible name, screen reader users hear only \"form\" without knowing what the form does - is it a search form, login form, contact form, or something else? Users navigating by landmarks or forms need to understand each form\'s purpose to decide whether to interact with it. This is especially important on pages with multiple forms. Without proper labeling, users might fill out the wrong form, skip important forms, or waste time exploring forms to understand their purpose.",
            'who': "Screen reader users navigating by forms or landmarks who need to identify form purposes, users with cognitive disabilities who need clear labels to understand what each form does, and keyboard users who tab through forms and need context about what they\'re interacting with",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add an accessible name to the form element using aria-label (e.g., aria-label=\"Contact form\") or aria-labelledby to reference a visible heading. If the form has a visible heading immediately before it, use aria-labelledby to point to that heading\'s ID. For search forms, \"Search\" is usually sufficient. The label should clearly indicate the form\'s purpose and be unique if there are multiple forms on the page."
        },
        'WarnFormHasNoLabelSoIsNotLandmark': {
            'title': "Form element lacks label so is not exposed as landmark",
            'what': "Form element lacks label so is not exposed as landmark",
            'why': "Forms without accessible names are not landmarks",
            'who': "Screen reader users navigating by landmarks",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby to make it a landmark"
        },
        'WarnFormLandmarkAccessibleNameUsesForm': {
            'title': "Form landmark uses generic term \"form\" in label",
            'what': "Form landmark uses generic term \"form\" in label",
            'why': "Generic labels don\'t describe purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive labels like \"Contact form\" or \"Search form\""
        },
        'WarnGenericAccessibleName': {
            'title': "Element has generic accessible name that doesn\'t describe its purpose",
            'what': "Element has generic accessible name that doesn\'t describe its purpose",
            'why': "Generic names like \"button\" or \"link\" don\'t help users understand element purpose.",
            'who': "Screen reader users, voice control users.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.6'],
            'remediation': "Provide descriptive accessible names that explain the element\'s specific purpose."
        },
        'WarnGenericDocumentLinkText': {
            'title': "Document link uses generic text like \"PDF\" without describing content",
            'what': "Document link uses generic text like \"PDF\" without describing content",
            'why': "Users need to know what document they\'re downloading, not just its format.",
            'who': "All users, especially screen reader users reviewing links.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.4'],
            'remediation': "Include document title and format in link text (e.g., \"Annual Report 2023 (PDF, 2MB)\")."
        },
        'WarnHeadingFoundInLandmarkButIsLabelledByAnAriaLabelledBy': {
            'title': "Landmark has heading but uses different element for label",
            'what': "Landmark has heading but uses different element for label",
            'why': "Confusing when heading doesn\'t match landmark label",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use the heading as the landmark label"
        },
        'WarnHeadingFoundInsideLandmarkButDoesntLabelLandmark': {
            'title': "Heading inside landmark doesn\'t label the landmark",
            'what': "Heading inside landmark doesn\'t label the landmark",
            'why': "Missed opportunity for clear landmark labeling",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Consider using heading as landmark label via aria-labelledby"
        },
        'WarnHeadingInsideDisplayNone': {
            'title': "Heading is hidden with display:none",
            'what': "Heading is hidden with display:none",
            'why': "Hidden headings may affect document structure",
            'who': "Screen reader users (varies by implementation)",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Remove unused headings or make them visible"
        },
        'WarnHeadingOver60CharsLong': {
            'title': "Heading text is {length} characters long, exceeding the recommended {limit} character limit",
            'what': "Heading text is {length} characters long, exceeding the recommended {limit} character limit",
            'why': "This heading has {length} characters which exceeds the {limit} character recommendation. Long headings are harder to scan quickly, more difficult to understand at a glance, and can overwhelm users. Screen reader users hearing the full heading text may struggle to grasp the main point. Long headings also cause layout issues on mobile devices and in navigation menus.",
            'who': "Users with cognitive disabilities who benefit from concise, clear headings, screen reader users who must listen to the entire heading, users scanning the page quickly for information, and mobile users with limited screen space",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Shorten the heading from {length} to under {limit} characters while preserving its meaning. Current text: \"{text}\" - Consider breaking into a shorter heading with explanatory text below, or focus on the key message. Use descriptive but concise language."
        },
        'WarnHighTabindex': {
            'title': "Very high tabindex value used (over 10)",
            'what': "Very high tabindex value used (over 10)",
            'why': "High tabindex values indicate attempts to control tab order that likely create confusing navigation.",
            'who': "Keyboard users experiencing unexpected tab order.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove positive tabindex values, restructure DOM for natural tab order."
        },
        'WarnIframeTitleNotDescriptive': {
            'title': "Iframe has a title attribute but it\'s generic or not descriptive (e",
            'what': "Iframe has a title attribute but it\'s generic or not descriptive (e.g., \"iframe\", \"frame\", \"embedded content\")",
            'why': "Generic iframe titles like \"iframe\" or \"embedded\" provide no useful information about the embedded content. Screen reader users hear these unhelpful titles and must enter the iframe to understand what it contains. With multiple iframes, users cannot distinguish between them or determine which ones are worth exploring. This wastes time and creates confusion, especially if iframes contain important functionality like payment forms or videos.",
            'who': "Screen reader users trying to understand and navigate between multiple iframes, keyboard users who encounter iframes in tab order, users with cognitive disabilities who need clear labeling of all content regions, and users trying to navigate efficiently through complex pages",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Replace generic titles with descriptive ones that explain the iframe\'s content or purpose. Use specific descriptions like title=\"YouTube video: Product demo\", title=\"Customer feedback form\", title=\"Live chat support\", or title=\"Interactive map of office locations\". Each iframe title should be unique if there are multiple iframes. Avoid redundant words like \"iframe\" in the title since the element type is already announced."
        },
        'ErrInvalidLangChange': {
            'title': "Invalid or unrecognized language code",
            'what': "Element has lang=\"{found}\" which is not a valid ISO 639 language code",
            'why': "Invalid language codes on content sections prevent screen readers from switching language processors correctly. This can cause content in foreign languages to be pronounced using the wrong language rules, making it incomprehensible. For example, French text might be read with English pronunciation rules. Users expect language changes to be handled smoothly, and invalid codes break this functionality.",
            'who': "Multilingual screen reader users who need proper language switching, users reading content in multiple languages, users with reading disabilities using assistive tools, and users relying on proper pronunciation for comprehension",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.2'],
            'remediation': "Replace lang=\"{found}\" with a valid ISO 639 language code. Valid formats are two-letter codes (\"en\", \"fr\", \"es\") or two-letter codes with region subtags (\"en-US\", \"fr-CA\", \"es-MX\"). Common corrections: \"fre\" → \"fr\", \"French\" → \"fr\", \"en-us\" → \"en-US\", \"EN-CA\" → \"en-CA\". Test with screen readers to ensure language changes are announced and pronounced correctly."
        },
        'WarnInvalidLangChange': {
            'title': "Invalid or unrecognized language code (deprecated - use ErrInvalidLangChange)",
            'what': "Element has lang=\"{found}\" which is not a valid ISO 639 language code",
            'why': "Invalid language codes on content sections prevent screen readers from switching language processors correctly. This can cause content in foreign languages to be pronounced using the wrong language rules, making it incomprehensible. For example, French text might be read with English pronunciation rules. Users expect language changes to be handled smoothly, and invalid codes break this functionality.",
            'who': "Multilingual screen reader users who need proper language switching, users reading content in multiple languages, users with reading disabilities using assistive tools, and users relying on proper pronunciation for comprehension",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.2'],
            'remediation': "Replace lang=\"{found}\" with a valid ISO 639 language code. Valid formats are two-letter codes (\"en\", \"fr\", \"es\") or two-letter codes with region subtags (\"en-US\", \"fr-CA\", \"es-MX\"). Common corrections: \"fre\" → \"fr\", \"French\" → \"fr\", \"en-us\" → \"en-US\", \"EN-CA\" → \"en-CA\". Test with screen readers to ensure language changes are announced and pronounced correctly."
        },
        'WarnItalicText': {
            'title': "Italic text used extensively which can reduce readability",
            'what': "Italic text used extensively which can reduce readability",
            'why': "Italic text is harder to read, especially for users with dyslexia.",
            'who': "Users with dyslexia, users with low vision.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8'],
            'remediation': "Limit italic text to short emphasis, use bold for stronger emphasis."
        },
        'WarnJustifiedText': {
            'title': "Text uses full justification affecting readability",
            'what': "Text uses full justification affecting readability",
            'why': "Justified text creates uneven spacing that makes reading difficult.",
            'who': "Users with dyslexia, users with cognitive disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.8'],
            'remediation': "Use left-aligned text for body content, avoid full justification."
        },
        'WarnLinkLooksLikeButton': {
            'title': "Link is styled to look like a button but uses anchor element",
            'what': "Link is styled to look like a button but uses anchor element",
            'why': "Links and buttons have different behaviors - links navigate to new locations while buttons trigger actions. When links look like buttons, users may have incorrect expectations about what will happen. Keyboard users expect Space key to activate buttons but it doesn\'t work on links.",
            'who': "Keyboard users who expect button behavior, screen reader users who hear it announced as a link but see it as a button, and users with cognitive disabilities who rely on consistent interactions",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "If the element performs an action (submit form, open dialog), use a button element. If it navigates to a new URL, keep it as a link but consider whether button styling is appropriate. Ensure keyboard behavior matches the element type."
        },
        'WarnInfiniteAnimationSpinner': {
            'title': "Loading spinner animation '{animationName}' runs infinitely without controls",
            'what': "Loading spinner animation '{animationName}' runs infinitely without controls and requires manual inspection to ensure screen reader accessibility",
            'why': "While loading spinners are common and often acceptable, infinite animations without controls can still be problematic if they remain visible for extended periods. Loading spinners should ideally be hidden or stopped once loading completes. Additionally, spinners must be perceivable by screen reader users through proper ARIA attributes. This requires manual inspection to verify that the spinner has: 1) role=\"status\" or role=\"alert\" on a container element, 2) visually hidden text (e.g., \"Loading...\") for screen reader users, and 3) dynamic updates when loading completes. Without these attributes, screen reader users won't know that content is loading, creating a confusing and inaccessible experience.",
            'who': "Users with vestibular disorders, users with ADHD, users with photosensitive epilepsy, users with cognitive disabilities, screen reader users who need audible loading announcements.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.2.2'],
            'remediation': "**1. Visual Control:** Ensure the spinner is hidden (display: none or visibility: hidden) when loading completes, or provide pause/stop controls. Consider respecting prefers-reduced-motion settings to disable animations entirely for users who prefer reduced motion.\n\n**2. Screen Reader Accessibility (Manual Inspection Required):** Verify the spinner includes proper ARIA attributes:\n\n**HTML Structure:**\n```html\n<div class=\"spinner-container\" role=\"status\">\n  <div class=\"spinner\"></div>\n  <span class=\"visually-hidden\">Loading...</span>\n</div>\n```\n\n**Required ARIA Attributes:**\n- `role=\"status\"` on the container to indicate a live region providing status information\n- Visually hidden text inside the container (e.g., \"Loading...\") using a class like `.visually-hidden` or `.sr-only`\n\n**CSS for Visually Hidden Text:**\n```css\n.visually-hidden {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n```\n\n**Dynamic Updates (Optional):** When the spinner completes, update the visually hidden text to \"Content loaded.\" using JavaScript to inform screen reader users that loading has finished.\n\nCurrent animation CSS:\n{animationCSS}"
        },
        'WarnLongAnimation': {
            'title': "Animation duration ({duration}) exceeds 5 seconds",
            'what': "Animation duration ({duration}) exceeds 5 seconds",
            'why': "Long animations can be distracting and may need user controls. Extended animation durations make it harder for users to focus on content and can be overwhelming for users with cognitive disabilities.",
            'who': "Users with attention disorders (ADHD), users with cognitive disabilities, users with vestibular disorders.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.2.2'],
            'remediation': "Shorten animation-duration to 5 seconds or less, or provide pause/stop controls. Consider respecting prefers-reduced-motion media query. Current CSS:\n{animationCSS}"
        },
        'WarnMissingAriaLabelledby': {
            'title': "Form field could benefit from aria-labelledby for complex labeling",
            'what': "Form field could benefit from aria-labelledby for complex labeling",
            'why': "Complex forms may need multiple labels or descriptions for clarity.",
            'who': "Screen reader users needing additional context.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Use aria-labelledby to associate multiple labels or aria-describedby for help text."
        },
        'WarnMissingAriaModal': {
            'title': "Modal dialog missing aria-modal=\"true\"",
            'what': "Modal dialog missing aria-modal=\"true\"",
            'why': "Without aria-modal, screen readers may not properly constrain navigation to the modal.",
            'who': "Screen reader users who may navigate outside the modal accidentally.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-modal=\"true\" to modal containers along with proper focus management."
        },
        'WarnMissingBannerLandmark': {
            'title': "Page missing banner landmark for header content",
            'what': "Page missing banner landmark for header content",
            'why': "Banner landmark helps users quickly navigate to page header/branding.",
            'who': "Screen reader users navigating by landmarks.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Use <header> element or role=\"banner\" for page header content."
        },
        'WarnMissingContentinfoLandmark': {
            'title': "Page missing contentinfo landmark for footer",
            'what': "Page missing contentinfo landmark for footer",
            'why': "Contentinfo landmark helps users find footer information like copyright and links.",
            'who': "Screen reader users navigating by landmarks.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Use <footer> element or role=\"contentinfo\" for page footer."
        },
        'WarnMissingDocumentMetadata': {
            'title': "Document links missing metadata about file type or size",
            'what': "Document links missing metadata about file type or size",
            'why': "Users need to know document details before downloading.",
            'who': "Users on slow connections, mobile users with data limits.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.2'],
            'remediation': "Include file type and size in link text or adjacent text."
        },
        'ErrInPageTargetWrongTabindex': {
            'title': "In-page link target <{element}> has tabindex=\"{currentTabindex}\" but should be tabindex=\"-1\"",
            'what': "This <{element}> element is the target of in-page links (like skip links) and has tabindex=\"{currentTabindex}\", but it should have tabindex=\"-1\" instead. The element is programmatically focusable when users activate the link, but with tabindex=\"{currentTabindex}\" it also appears in the natural tab order, creating an unnecessary and confusing tab stop.",
            'why': "In-page link targets (especially skip link targets) need tabindex=\"-1\" to be focusable programmatically when users activate the link, WITHOUT being in the regular tab order. Using tabindex=\"0\" or positive values adds the element to the tab sequence, creating confusing extra tab stops. Users would tab to a heading or container that isn't normally interactive, wondering why they're focused there.",
            'who': "Keyboard users who encounter unexpected tab stops on non-interactive elements, screen reader users who may get confused by focus landing on content elements, users with cognitive disabilities who need predictable navigation.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3 Focus Order', '2.1.1 Keyboard'],
            'remediation': "Change tabindex=\"{currentTabindex}\" to tabindex=\"-1\" on this element. This allows skip links to focus it programmatically when activated, but keeps it OUT of the natural keyboard tab order. The element will still receive focus when the skip link is clicked, but won't be a tab stop during normal navigation."
        },
        'WarnMissingNegativeTabindex': {
            'title': "In-page link target <{element}> should have tabindex=\"-1\"",
            'what': "This <{element}> element is the target of in-page links but lacks tabindex=\"-1\". Without it, when users activate the link, focus may not move properly to the target content.",
            'why': "In-page link targets (especially skip link targets) should have tabindex=\"-1\" to ensure they can receive programmatic focus when the link is activated. Without this, some browsers may not properly move focus to the target, defeating the purpose of the skip link.",
            'who': "Keyboard users relying on skip links to bypass repetitive content, screen reader users who need focus to move to the target section.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.1 Bypass Blocks'],
            'remediation': "Add tabindex=\"-1\" to this element so it can receive programmatic focus when the in-page link is activated. This ensures skip links work properly across all browsers."
        },
        'WarnMissingRequiredIndication': {
            'title': "Required form fields not clearly indicated",
            'what': "Required form fields not clearly indicated",
            'why': "Users need to know which fields are required before submitting forms.",
            'who': "All users, especially those using screen readers.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.3.2'],
            'remediation': "Mark required fields with aria-required=\"true\" and visual indicators."
        },
        'WarnModalMissingAriaLabelledby': {
            'title': "Modal lacks aria-labelledby pointing to its heading",
            'what': "Modal lacks aria-labelledby pointing to its heading",
            'why': "Screen readers need to announce the modal\'s title when it opens.",
            'who': "Screen reader users who need modal context.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-labelledby pointing to the modal\'s heading element."
        },
        'WarnModalMissingAriaModal': {
            'title': "Modal dialog missing aria-modal attribute",
            'what': "Modal dialog missing aria-modal attribute",
            'why': "aria-modal helps assistive technologies understand modal boundaries.",
            'who': "Screen reader users navigating modal content.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-modal=\"true\" to modal containers."
        },
        'WarnModalNoFocusableElements': {
            'title': "Modal has no focusable elements",
            'what': "Modal has no focusable elements",
            'why': "Modals without focusable elements trap keyboard focus with no actions available.",
            'who': "Keyboard users unable to interact with modal.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1'],
            'remediation': "Ensure modals contain at least one focusable element (close button, form fields, etc.)."
        },
        'WarnMultipleBannerLandmarksButNotAllHaveLabels': {
            'title': "Multiple banner landmarks exist but not all have labels",
            'what': "Multiple banner landmarks exist but not all have labels",
            'why': "Inconsistent labeling makes navigation difficult",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all banner landmarks have labels or reduce to single banner"
        },
        'WarnMultipleComplementaryLandmarksButNotAllHaveLabels': {
            'title': "Multiple complementary landmarks but not all labeled",
            'what': "Multiple complementary landmarks but not all labeled",
            'why': "Inconsistent labeling makes navigation difficult",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all complementary landmarks have unique labels"
        },
        'WarnMultipleContentInfoLandmarksButNotAllHaveLabels': {
            'title': "Multiple contentinfo landmarks exist but not all have labels",
            'what': "Multiple contentinfo landmarks exist but not all have labels",
            'why': "Inconsistent labeling makes navigation difficult",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all contentinfo landmarks have labels or reduce to single contentinfo"
        },
        'WarnMultipleNavLandmarksButNotAllHaveLabels': {
            'title': "Multiple navigation landmarks but not all labeled",
            'what': "Multiple navigation landmarks but not all labeled",
            'why': "Users cannot distinguish between navigation areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Label all navigation landmarks uniquely"
        },
        'WarnMultipleNavNeedsLabel': {
            'title': "Multiple navigation landmarks found without distinguishing labels",
            'what': "Multiple navigation landmarks found without distinguishing labels",
            'why': "When a page has multiple navigation areas (main menu, footer links, breadcrumbs, sidebar navigation), users need to distinguish between them. Without unique labels, screen reader users hear \"navigation\" multiple times with no indication of which navigation area they\'re entering. This creates confusion about which menu contains the desired links and requires users to explore each navigation to understand its purpose.",
            'who': "Screen reader users who need to distinguish between different navigation areas, keyboard users navigating between multiple menus, users with cognitive disabilities who need clear labeling, and frequent users who want to quickly access specific navigation areas",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add unique aria-label attributes to each <nav> element or role=\"navigation\" container. Use descriptive labels like aria-label=\"Main menu\", aria-label=\"Footer links\", aria-label=\"Breadcrumb\", aria-label=\"Related articles\". The labels should clearly indicate the purpose or location of each navigation. Test with screen readers to ensure each navigation is announced with its unique label."
        },
        'WarnMultipleRegionLandmarksButNotAllHaveLabels': {
            'title': "Multiple region landmarks but not all labeled",
            'what': "Multiple region landmarks but not all labeled",
            'why': "Regions without labels are not exposed as landmarks",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all regions have labels or use different elements"
        },
        'WarnMultipleTitleElements': {
            'title': "{count} <title> elements found in the document head, which may cause unpredictable behavior",
            'what': "{count} <title> elements found in the document head, which may cause unpredictable behavior",
            'why': "Having {count} title elements causes browsers to choose unpredictably between them, creating inconsistent page identification. Different browsers and assistive technologies may choose different titles from the {count} available, creating an inconsistent experience. SEO is negatively affected as search engines may index the wrong title.",
            'who': "All users seeing inconsistent titles in browser tabs, screen reader users who may hear different titles than what\'s visually displayed, users bookmarking pages with incorrect titles",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.2'],
            'remediation': "Remove {count-1} duplicate <title> elements, keeping only one in the document head. Check for scripts that might be adding titles dynamically. Ensure your CMS or framework isn\'t creating duplicate titles."
        },
        'WarnNavLandmarkAccessibleNameUsesNavigation': {
            'title': "Navigation landmark uses generic term \"navigation\" in label",
            'what': "Navigation landmark uses generic term \"navigation\" in label",
            'why': "Generic labels don\'t describe specific purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use more descriptive labels like \"Product categories\" or \"User account menu\""
        },
        'WarnNavLandmarkHasNoLabel': {
            'title': "Navigation landmark lacks label",
            'what': "Navigation landmark lacks label",
            'why': "Hard to distinguish multiple navigation areas",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add descriptive aria-label"
        },
        'WarnNegativeTabindex': {
            'title': "Interactive element has negative tabindex",
            'what': "Interactive element has negative tabindex",
            'why': "Negative tabindex removes elements from keyboard navigation, potentially making them inaccessible.",
            'who': "Keyboard users who cannot reach the element.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.1.1'],
            'remediation': "Use tabindex=\"0\" for keyboard-accessible elements, only use -1 for programmatic focus."
        },
        'ErrNegativeTabIndex': {
            'title': "Negative tabindex on interactive element removes it from keyboard navigation sequence",
            'what': "Interactive element (link, button, form control, or custom interactive element) has tabindex=\"-1\", removing it from the natural keyboard tab order and making it only focusable programmatically via JavaScript",
            'why': "Elements with negative tabindex cannot be reached by keyboard users through normal Tab key navigation, even though they appear to be interactive. This creates a confusing and potentially inaccessible experience where visual users see a clickable element but keyboard users cannot activate it. While tabindex=\"-1\" is valid for programmatic focus management (like focusing a dialog or skip link target), it should never be applied to naturally interactive elements like buttons or links. When applied incorrectly, it effectively removes functionality for keyboard users while leaving it available to mouse users, creating an unequal experience. Users may not realize the element is supposed to be interactive since they cannot reach it via keyboard.",
            'who': "Keyboard-only users who cannot reach the element through Tab navigation, users with motor disabilities who rely on keyboard or switch controls, blind users using screen readers with keyboard commands, users with repetitive strain injuries who avoid mouse use, power users who prefer keyboard shortcuts, and users with tremors or precision difficulties who cannot reliably use pointing devices",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '2.1.3'],
            'remediation': "Remove the negative tabindex from naturally interactive elements (links, buttons, form controls) - they already have a natural tab order of 0. Only use tabindex=\"-1\" for elements that should receive programmatic focus but not be in the tab sequence, such as: skip link targets, dialog containers that should trap focus, error message containers that receive focus when displayed, or custom widgets where focus is managed programmatically. Never apply tabindex=\"-1\" to elements users need to interact with directly. If you're using it to control tab order, use tabindex=\"0\" instead (which makes elements keyboard accessible in source order) or restructure your DOM to achieve the desired tab order naturally. Test with keyboard-only navigation (Tab and Shift+Tab) to ensure all interactive elements are reachable."
        },
        'ErrPositiveTabIndex': {
            'title': "Element uses a positive tabindex value (greater than 0) which disrupts natural tab order",
            'what': "Element has tabindex set to a positive integer (1, 2, 3, etc.), which overrides the natural DOM order and creates an artificial, hard-to-maintain tab sequence",
            'why': "Positive tabindex values create a fragmented, unpredictable tab order that often confuses both users and developers. Elements with positive tabindex are visited first in numeric order (tabindex=\"1\", then \"2\", then \"3\"), then normal flow elements (tabindex=\"0\" and naturally focusable elements), then elements with tabindex=\"-1\" are skipped entirely. This creates a disjointed experience where Tab moves in unexpected ways - jumping forward and backward in visual order, skipping apparently interactive elements, then suddenly returning to visit them later. Users develop a mental model of tab order based on visual layout, and positive tabindex violates this expectation. The approach doesn't scale - adding new content requires renumbering existing tabindex values across potentially dozens of elements. Minor DOM changes can completely break tab order.",
            'who': "Keyboard users who expect tab order to follow visual layout and become disoriented by unexpected focus jumps, screen reader users who navigate sequentially and are confused when focus order doesn't match announced content order, users with cognitive disabilities who cannot track non-visual tab sequences, users with attention difficulties who lose their place when focus jumps unexpectedly, mobile keyboard users whose software keyboards appear and disappear as focus moves unpredictably, and developers maintaining codebases where positive tabindex creates brittle, hard-to-debug focus issues",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3', '1.3.2'],
            'remediation': "Remove all positive tabindex values. Instead, restructure your DOM so elements appear in the desired focus order in the source code - browsers will naturally tab through elements in DOM order. Use CSS (flexbox order, grid, or absolute positioning) to change visual presentation without affecting source order. If you absolutely must control focus order, use only tabindex=\"0\" (adds element to natural tab order) or tabindex=\"-1\" (removes from tab sequence for programmatic focus only). Never use positive integers. For complex widgets like data grids or tab panels, implement proper ARIA patterns with roving tabindex managed via JavaScript, where you programmatically move tabindex=\"0\" to the active element and set other elements to tabindex=\"-1\". Test thoroughly with keyboard-only navigation to verify tab order matches visual layout and user expectations."
        },
        'ErrZeroOutlineOffset': {
            'title': "Focus outline has zero outline-offset, causing it to overlap element border and potentially be obscured",
            'what': "Element's focus indicator uses outline with outline-offset of 0px (or no outline-offset specified, which defaults to 0), causing the outline to sit directly against the element's border where it may be difficult to see or get obscured by the element's own styling",
            'why': "When outline-offset is 0, the focus outline draws directly around the element's border box with no gap. For elements with borders, backgrounds, or complex styling, this causes the outline to blend in or disappear entirely. A dark outline against a dark border becomes invisible. The outline can also be covered by pseudo-elements, adjacent elements, or parent containers with specific overflow or clipping rules. Without visual separation between the element and its focus indicator, users may not notice when focus changes, especially with subtle color differences or when the element has decorative borders that compete with the outline for attention. This is particularly problematic for custom-styled buttons, form inputs, and links where borders are common design elements.",
            'who': "Keyboard users who need clear focus indicators to track their position, users with low vision who may not perceive subtle outline differences without visual separation, users with attention difficulties who need obvious focus changes to maintain orientation, users with cognitive disabilities who benefit from distinct focus indicators separated from element borders, users in bright environments where subtle outlines wash out, and users with color vision deficiencies who may not distinguish outline color from border color without spatial separation",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7', '1.4.11'],
            'remediation': "Add outline-offset of at least 2px to create visual separation between the element and its focus indicator: element:focus { outline: 2px solid #0066cc; outline-offset: 2px; }. The offset creates a clear gap where the element's background shows through, making the outline distinct from borders and other styling. For buttons and inputs, 2-3px offset works well. For links, 1-2px is often sufficient. Test your focus indicators across all interactive elements, especially those with borders, to ensure the outline remains visible. Consider using a combination of outline and box-shadow for maximum visibility: element:focus { outline: 2px solid #0066cc; outline-offset: 2px; box-shadow: 0 0 0 4px rgba(0,102,204,0.2); } This creates both a solid outline and a subtle glow effect that work together to ensure visibility in various contexts."
        },
        'WarnNoBannerLandmark': {
            'title': "Page is missing a banner landmark to identify the header/masthead region",
            'what': "Page is missing a banner landmark to identify the header/masthead region",
            'why': "The banner landmark identifies the site header containing the logo, primary navigation, and other site-wide content. Without it, screen reader users cannot quickly jump to the header area using landmark navigation. They must read through content linearly to find navigation and branding elements. This is especially frustrating when users want to access the main navigation or return to the homepage via the logo.",
            'who': "Screen reader users who navigate by landmarks to quickly access header content, keyboard users with assistive technology looking for navigation, users with cognitive disabilities who rely on consistent page structure, and users who frequently need to access header elements like search or main navigation",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Use the HTML5 <header> element at the page level (not within article, aside, main, nav, or section) as it has an implicit banner role. Alternatively, add role=\"banner\" to your header container. Include site-wide elements like logo, primary navigation, site search, and utility navigation within the banner. Ensure only one banner landmark exists per page at the top level."
        },
        'WarnNoContentinfoLandmark': {
            'title': "Page is missing a contentinfo landmark to identify the footer region",
            'what': "Page is missing a contentinfo landmark to identify the footer region",
            'why': "The contentinfo landmark (typically a footer) contains important information about the page or site such as copyright notices, privacy policies, contact information, and site maps. Screen reader users rely on landmarks to quickly navigate to these common elements without having to read through the entire page. When the footer lacks proper landmark markup, users must search manually through the content to find this information, which is inefficient and may cause them to miss important legal notices or helpful links. The contentinfo landmark provides a consistent, predictable way to access this supplementary information across all pages.",
            'who': "Screen reader users who navigate by landmarks to quickly find footer information, keyboard users who want to efficiently skip to footer content, users with cognitive disabilities who rely on consistent page structure, and users who need to frequently access footer links like privacy policies or contact information",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Use the HTML5 <footer> element for your page footer (it has an implicit role of contentinfo when it\'s not nested inside article, aside, main, nav, or section elements). Alternatively, add role=\"contentinfo\" to the container holding your footer content. Ensure there\'s only one contentinfo landmark per page at the top level. The footer should contain information about the page or site, not primary content."
        },
        'WarnNoCurrentPageIndicator': {
            'title': "Navigation doesn\'t indicate current page - DEPRECATED, use ErrNoCurrentPageIndicatorScreenReader and ErrNoCurrentPageIndicatorMagnification",
            'what': "Navigation doesn\'t indicate current page",
            'why': "Users need to know their current location within the site navigation.",
            'who': "Users with cognitive disabilities, screen reader users.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.8'],
            'remediation': "Use aria-current=\"page\" and visual styling to indicate current page in navigation."
        },
        'ErrNoCurrentPageIndicatorScreenReader': {
            'title': "Navigation lacks aria-current=\"page\" indicator, forcing screen reader users through entire menu to discover current location",
            'what': "Navigation menu lacks aria-current=\"page\" attribute on the current page link, preventing screen readers from announcing the user\'s current location in the site navigation",
            'why': "This fails WCAG 5.2.4 Accessibility Supported because a common but problematic design pattern relies on a heading immediately after navigation having the same text as a menu item to indicate current page. While this creates a visual connection for sighted users, it provides a terrible experience for screen reader users who must listen to the entire navigation menu (which can be lengthy with many links and submenus) before discovering the matching heading that reveals their current location. Screen reader users cannot \"glance\" at the menu to see the highlighted item - they must sequentially process every menu item, announcement by announcement, until they hear the subsequent heading. This forces users to rely on inefficient linear navigation when the HTML could natively support immediate location awareness through aria-current=\"page\". The pattern fails Accessibility Supported because it doesn\'t work well with assistive technology - it creates an unnecessarily poor user experience that could be easily avoided with proper semantic markup.",
            'who': "Screen reader users (NVDA, JAWS, VoiceOver, TalkBack) who navigate sequentially through content and cannot visually scan for highlighted menu items, users with cognitive disabilities who need immediate feedback about their current location without processing lengthy navigation lists, mobile screen reader users on touch devices who navigate more slowly through menus, users with reading difficulties who struggle to remember their location while processing long lists of links",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['5.2.4'],
            'remediation': "Add aria-current=\"page\" to the navigation link that corresponds to the current page: <a href=\"/about\" aria-current=\"page\">About Us</a>. Screen readers will announce this as \"About Us, current page\" or similar, immediately informing users of their location without requiring them to listen to subsequent headings or the entire menu. This also enables \"List current page links\" screen reader features. Keep any matching heading for visual users, but don\'t rely on it as the only indicator. Apply visual styling to aria-current=\"page\" links (e.g., [aria-current=\"page\"] { font-weight: bold; text-decoration: underline; }) to create a multi-modal indicator that works for all users. Test by using a screen reader to navigate to the menu - you should hear the current page announced immediately when reaching that link, not after processing the entire menu. NOTE: This is a WCAG Conformance Requirement 5.2.4 Accessibility Supported failure - the heading pattern creates an accessibility-supported implementation gap."
        },
        'ErrNoCurrentPageIndicatorMagnification': {
            'title': "Navigation lacks visual current page indicator, preventing screen magnifier users from knowing their location without panning",
            'what': "Navigation menu lacks visual styling to indicate the current page (typically highlighting, bold text, underline, or background color), forcing screen magnifier users to pan between the menu and page content to determine their location",
            'why': "Screen magnifier users at high magnification levels (200%-400%+) can only see a small portion of the screen at once - typically not enough to view both the navigation menu and the page heading simultaneously. Without a clear visual indicator in the navigation showing which item represents the current page, magnifier users must constantly pan back and forth between the menu area and the page content area to compare the heading text with menu items to figure out where they are in the site structure. This creates significant cognitive load and navigation friction. Sighted users without magnification can instantly glance at the menu to see the highlighted current page, but magnifier users lose this affordance when visual styling is absent. While aria-current=\"page\" helps screen reader users, it provides no visual indication - both programmatic AND visual indicators are needed to serve all users.",
            'who': "Users with low vision using screen magnification software (ZoomText, MAGic, OS zoom features) who cannot see the entire page layout at once, users with tunnel vision or other visual field defects who see limited screen area, older users who use browser zoom and struggle to maintain spatial awareness, users with cognitive disabilities who need strong visual cues to maintain orientation, mobile users who zoom into content and lose contextual awareness",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.6', '2.4.8', '5.2.4'],
            'remediation': "Apply distinctive visual styling to the current page link in navigation - use a combination of multiple visual indicators for robust identification: (1) Background color change: .current-page { background-color: #003366; color: white; }; (2) Border or underline: border-left: 4px solid blue or text-decoration: underline; (3) Font weight: font-weight: bold; (4) Icon or symbol: prepend/append a visual indicator. Combine with aria-current=\"page\" for screen reader users. Ensure visual indicators have sufficient contrast (4.5:1 for text, 3:1 for non-text). The visual distinction should be immediately recognizable when viewing only the navigation area at high magnification. Test by zooming to 400% and viewing only the navigation - the current page should be unmistakably identified without seeing page content. Common pattern: <a href=\"/about\" aria-current=\"page\" class=\"current-page\">About Us</a> with CSS targeting both [aria-current=\"page\"] and .current-page for backwards compatibility."
        },
        'WarnNoCursorPointer': {
            'title': "Clickable element doesn\'t show pointer cursor",
            'what': "Clickable element doesn\'t show pointer cursor",
            'why': "Cursor changes help users identify interactive elements.",
            'who': "Mouse users who rely on cursor changes.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.1.1'],
            'remediation': "Add cursor: pointer CSS to all clickable elements."
        },
        'WarnNoFieldset': {
            'title': "Related form fields not grouped with fieldset",
            'what': "Related form fields not grouped with fieldset",
            'why': "Fieldsets help users understand relationships between form controls.",
            'who': "Screen reader users, users with cognitive disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use fieldset and legend elements to group related form fields like radio buttons."
        },
        'WarnNoLegend': {
            'title': "Fieldset missing legend element",
            'what': "Fieldset missing legend element",
            'why': "Legends provide context for grouped form fields.",
            'who': "Screen reader users who need group labels.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add legend as first child of fieldset to label the group."
        },
        'WarnNoNavigationLandmark': {
            'title': "Page has no navigation landmarks to identify navigation regions",
            'what': "Page has no navigation landmarks to identify navigation regions",
            'why': "Navigation landmarks identify areas containing navigation links, allowing users to quickly jump to menus without reading through other content. Most web pages have multiple navigation areas (main menu, footer links, sidebar navigation, breadcrumbs) but without proper markup, these are just lists of links mixed with other content. Screen reader users must hunt for navigation areas or listen to all links to find what they need. Navigation landmarks make these areas immediately discoverable and allow users to skip between different navigation regions efficiently.",
            'who': "Screen reader users who use landmarks to find navigation menus quickly, keyboard users navigating complex sites with multiple menus, users with cognitive disabilities who need clear identification of navigation areas, and users with motor disabilities who need to minimize unnecessary navigation",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Wrap navigation areas in <nav> elements or add role=\"navigation\" to containers with navigation links. If you have multiple navigation areas, label each one with aria-label to distinguish them (e.g., aria-label=\"Main navigation\", aria-label=\"Footer links\", aria-label=\"Breadcrumb\"). Not every group of links needs to be a navigation landmark - use it for major navigation blocks that users would want to find quickly."
        },
        'WarnPageTitleTooLong': {
            'title': "Page title is {length} characters long, exceeding the recommended {limit} character limit",
            'what': "Page title is {length} characters long, exceeding the recommended {limit} character limit",
            'why': "The title \"{found}\" with {length} characters will get cut off in browser tabs (typically around 30 characters) and search engine results (typically 50-60 characters), losing important information. The most important information might be at the end and never seen. Screen reader users have to listen to lengthy titles repeatedly.",
            'who': "Users with multiple tabs open who see truncated titles, users searching for content who can\'t see full titles in results, screen reader users who must listen to long titles repeatedly, mobile users with even less space for title display",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.2'],
            'remediation': "Shorten the title from {length} to under {limit} characters. Place the most important, unique information first. Remove unnecessary words like \"Welcome to\" or \"This page contains\". Test how titles appear in browser tabs and search results to ensure key information is visible."
        },
        'WarnPageTitleTooShort': {
            'title': "Page title \"{found}\" is only {length} characters, potentially not descriptive enough",
            'what': "Page title \"{found}\" is only {length} characters, potentially not descriptive enough",
            'why': "The title \"{found}\" with only {length} characters doesn\'t provide enough context, especially when users have multiple tabs open or are browsing history. Users can\'t distinguish between different sites with the same generic titles. Screen reader users hearing page titles announced need more descriptive information to understand where they are.",
            'who': "Users with multiple browser tabs who need to distinguish between pages, screen reader users who rely on descriptive titles for context, users browsing history or bookmarks, users with cognitive disabilities who need clear page identification",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.2'],
            'remediation': "Expand \"{found}\" to be more descriptive by including the site name and page purpose. Aim for 20-60 characters that clearly describe the page content. Ensure each page has a unique, descriptive title that makes sense out of context."
        },
        'WarnRegionLandmarkAccessibleNameUsesNavigation': {
            'title': "Region landmark incorrectly uses \"navigation\" in its label",
            'what': "Region landmark incorrectly uses \"navigation\" in its label",
            'why': "Confusing landmark type and purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use appropriate label or change to nav landmark"
        },
        'WarnRegionLandmarkHasNoLabelSoIsNotConsideredALandmark': {
            'title': "Region landmark lacks required label to be considered a landmark",
            'what': "Region landmark lacks required label to be considered a landmark",
            'why': "Regions without labels are not exposed as landmarks",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby, or use a different landmark type"
        },
        'WarnRightAlignedText': {
            'title': "Body text is right-aligned affecting readability",
            'what': "Body text is right-aligned affecting readability",
            'why': "Right-aligned text is difficult to read for extended content.",
            'who': "Users with dyslexia, users with reading disabilities.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8'],
            'remediation': "Use left alignment for body text in left-to-right languages."
        },
        'WarnSVGNoRole': {
            'title': "SVG missing appropriate role attribute",
            'what': "SVG missing appropriate role attribute",
            'why': "SVGs need proper roles to be correctly interpreted by assistive technologies.",
            'who': "Screen reader users.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.1.1'],
            'remediation': "Add role=\"img\" for informative SVGs, use aria-hidden=\"true\" for decorative ones."
        },
        'WarnSmallLineHeight': {
            'title': "Line height less than 1.5x font size",
            'what': "Line height is {lineHeight}px with a ratio of {ratio} for font size {fontSize}px. Best practice recommends line height of at least 1.5 times the font size, especially for blocks of text with multiple adjacent lines.",
            'why': "Tight line spacing makes text difficult to read and track, especially for blocks of text. Adequate line spacing (1.5x or higher) helps users with dyslexia distinguish lines, improves reading comprehension, and reduces eye strain. This fails WCAG 5.2.4 Accessibility Supported because insufficient line height forces users to rely on assistive technologies (custom stylesheets, browser extensions, or reader modes) when they otherwise wouldn't need them. The content should be accessibility-supported by default, not require users to apply technical workarounds to make it readable.",
            'who': "Users with dyslexia who need clear line separation, users with low vision who track lines of text, older users, users with reading disabilities, users who experience eye strain.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['5.2.4'],
            'remediation': "Set line-height to at least 1.5 for blocks of text with multiple lines. For this element with font size {fontSize}px, the line height should be at least {minLineHeight}px (currently {lineHeight}px). Note: While WCAG 1.4.12 requires that user-applied spacing adjustments don't break the layout, providing adequate default line height (5.2.4 Accessibility Supported) prevents users from needing assistive technologies in the first place. Single lines or headings may use tighter spacing."
        },
        'WarnSvgPositiveTabindex': {
            'title': "SVG element uses positive tabindex - verify this is intentional for interactive widget",
            'what': "SVG element uses positive tabindex value (greater than 0), potentially creating custom tab order",
            'why': "While positive tabindex is generally problematic, it can be appropriate within interactive SVG widgets like maps, diagrams, or data visualizations where you need to guide users through different \"journeys\" or metadata. For example, an interactive map might use custom tab order to navigate between different types of geographic features, or a diagram might guide users through different conceptual layers. However, this should only be used when creating a genuinely beneficial navigation experience within a self-contained interactive widget, not for general page layout.",
            'who': "Keyboard users who may benefit from guided navigation within complex interactive graphics, but could be confused if the custom tab order is poorly designed or unnecessary",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Review whether this positive tabindex serves a clear purpose for keyboard navigation within an interactive SVG widget (map, diagram, data visualization). If the SVG is interactive and the tab order creates a logical navigation flow for different content \"journeys\", this usage may be acceptable. If the SVG is decorative or the custom tab order doesn't provide clear value, remove the positive tabindex and use tabindex=\"0\" to add to natural tab order or tabindex=\"-1\" to remove from tab order but allow programmatic focus. Ensure any custom tab order is thoroughly tested with keyboard-only users."
        },
        'WarnTableMissingThead': {
            'title': "Table missing thead element for headers",
            'what': "Table missing thead element for headers",
            'why': "Thead helps screen readers distinguish headers from data rows.",
            'who': "Screen reader users navigating tables.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Wrap header rows in thead element, data rows in tbody."
        },
        'WarnRedundantTitleAttr': {
            'title': "Title attribute duplicates visible text, creating inaccessible tooltip",
            'what': "Element has a title attribute that duplicates or overlaps with visible text content: \"{visibleText}\" with title=\"{title}\"",
            'why': "When the title attribute duplicates visible text, it creates a redundant tooltip that provides no additional value but causes significant accessibility problems. The tooltip cannot be dismissed and disappears when users move their mouse toward it - a critical issue for screen magnifier users who need to move their viewport to read the tooltip text. The tooltip also doesn't appear on touch devices, isn't accessible to keyboard users, and creates a poor experience for users with motor impairments who trigger tooltips accidentally. This redundancy adds no value while creating barriers for many users. The general rule is: never use title attributes except on iframes (where they serve as accessible names) and in the <head> element (where \"title\" has a completely different meaning as the page title element).",
            'who': "Screen magnifier users who cannot read tooltips that disappear when moving the mouse, mobile and touch screen users who never see tooltips, keyboard users who cannot access hover-dependent content, users with motor disabilities who accidentally trigger or cannot maintain hover, users with cognitive disabilities confused by redundant information",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2'],
            'remediation': "Remove the title attribute entirely since the visible text already provides the necessary information. Title attributes should only be used: (1) on <iframe> elements to provide accessible names, or (2) in the <head> element as the page title. For all other use cases, use visible, persistent text that all users can access. If you need supplementary information, use visible helper text, aria-describedby, or clickable info icons instead of title attributes."
        },
        'WarnUnlabelledForm': {
            'title': "Form element lacks accessible name (deprecated - use ErrFormLandmarkMustHaveAccessibleName)",
            'what': "This error code is deprecated. The issue is now reported as ErrFormLandmarkMustHaveAccessibleName.",
            'why': "Forms without accessible names fail to become form landmarks, preventing screen reader users from finding them through landmark navigation.",
            'who': "Screen reader users who rely on landmark navigation.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Add aria-label or aria-labelledby to the form element to provide an accessible name."
        },
        'ErrFormLandmarkMustHaveAccessibleName': {
            'title': "Form element lacks accessible name required to become a form landmark",
            'what': "Form element lacks an accessible name (via aria-label, aria-labelledby, or title attribute), preventing it from becoming a form landmark that screen reader users can navigate to",
            'why': "Without an accessible name, a form element does not become a form landmark in the accessibility tree. This is a WCAG conformance failure through Section 5.2.4 Accessibility Supported - the HTML form element is not being used in an accessibility-supported way. Screen reader users rely on landmark navigation to quickly jump between major page regions, including forms. When a form lacks an accessible name, it becomes invisible to landmark navigation - users cannot find it using NVDA's 'D' key, JAWS' semicolon key, or VoiceOver's rotor. Users must tab through every field to discover the form exists, or stumble upon it while reading the entire page linearly. For pages with multiple forms (login, search, newsletter signup, contact), the inability to distinguish and navigate between forms creates significant barriers. The accessible name also helps users understand the form's purpose before entering it.",
            'who': "Screen reader users who use landmark navigation (e.g., NVDA's 'D' key, JAWS' ';' key, VoiceOver's rotor) to quickly find and move between forms on the page, users with cognitive disabilities who benefit from clear form labels to understand each form's purpose, keyboard users who want to efficiently navigate to specific forms without tabbing through every field, mobile screen reader users who use touch gestures to navigate by landmarks",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['5.2.4'],
            'remediation': "Add an accessible name to the form using one of these methods: (1) aria-label: <form aria-label=\"Contact form\"> - provides a clear, concise label; (2) aria-labelledby: <h2 id=\"contact-heading\">Contact Us</h2> <form aria-labelledby=\"contact-heading\"> - references a visible heading; (3) title attribute: <form title=\"Newsletter signup\"> - less preferred but acceptable. Choose descriptive names that distinguish multiple forms on the same page: 'Login form', 'Search site', 'Newsletter signup', 'Contact form'. The name should be concise (2-4 words) and describe the form's purpose. Avoid generic names like 'Form 1' or 'Main form' that don't convey meaning. For pages with a single form, the name can be general ('Contact form'), but multiple forms require specific, distinguishing names. NOTE: This is a WCAG Conformance Requirement 5.2.4 Accessibility Supported failure, not a specific success criterion failure."
        },
        'WarnUnlabelledRegion': {
            'title': "Region landmark lacks accessible name",
            'what': "Region landmark lacks accessible name",
            'why': "Named regions help users understand content structure.",
            'who': "Screen reader users navigating by landmarks.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby to region landmarks."
        },
        'WarnVagueTitleAttribute': {
            'title': "Title attribute contains vague or generic text that provides no useful information",
            'what': "Title attribute contains vague or generic phrases like 'Click here', 'Link', 'Button', 'Read more', or other uninformative text that doesn't add value",
            'why': "Title attributes fundamentally fail WCAG Conformance requirement 5.2.4 as they are inaccessible to screen magnifier users - at high magnification, tooltip content extends off-screen and disappears when mouse moves, making content completely inaccessible. This warning flags titles with particularly uninformative vague or generic content. While all title attributes are problematic due to magnification issues, vague titles compound the problem by providing no useful information even for users who can access them. Generic phrases like 'Click here', 'Link', or 'Button' represent especially poor quality that demonstrates misunderstanding of accessible design principles",
            'who': "Screen magnifier users at high magnification (fundamental inaccessibility - tooltip goes off-screen), mobile and touch screen users (no hover capability), keyboard-only users (inconsistent access to tooltips), and all users who would benefit from clear, descriptive supplementary information but instead get generic unhelpful phrases",
            'impact': ImpactScale.LOW.value,
            'wcag': ['5.2.4', '3.3.2'],
            'remediation': "Never use title attributes in the first place - they fundamentally fail WCAG 5.2.4 due to screen magnifier inaccessibility. Best solution: Remove the title attribute entirely and use visible text, proper <label> elements for form fields, aria-label for interactive elements like icon buttons, or visible helper text with aria-describedby for supplementary information. If you absolutely must use title attributes despite their accessibility problems (not recommended), at minimum avoid vague generic phrases like 'Click here', 'Link', 'Button', 'Read more', 'Info', 'Details'. But the real solution is to not hide information in tooltips that many users cannot access - make all important information visible and accessible to everyone"
        },
        'WarnVideoAutoplay': {
            'title': "Video has unmuted autoplay",
            'what': "Video has unmuted autoplay which can distract users and interfere with screen readers",
            'why': "Unmuted autoplay violates WCAG 1.4.2 Audio Control. It can interfere with screen readers, distract users, and use bandwidth unexpectedly.",
            'who': "Screen reader users, users with cognitive disabilities, users on limited data plans.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.2'],
            'remediation': "Add muted attribute or remove autoplay entirely. Provide clear play controls for user-initiated playback."
        },
        'WarnVideoMutedAutoplay': {
            'title': "Video has muted autoplay",
            'what': "Video has muted autoplay which can distract neurodiverse users",
            'why': "While muted autoplay passes WCAG 1.4.2, moving content can significantly distract sighted neurodiverse users and prevent them from focusing on page content (Perceivable principle). Visual motion draws attention involuntarily.",
            'who': "Neurodiverse users, users with ADHD, users with attention difficulties, users with vestibular disorders.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.2'],
            'remediation': "Remove autoplay or provide a pause mechanism that is visible and accessible immediately when the page loads. Consider using prefers-reduced-motion CSS media query to respect user preferences."
        },
        'WarnVisualHierarchy': {
            'title': "Visual hierarchy doesn\'t match semantic structure",
            'what': "Visual hierarchy doesn\'t match semantic structure",
            'why': "Mismatch between visual and semantic structure confuses understanding.",
            'who': "Screen reader users, users with cognitive disabilities.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure visual presentation matches HTML semantic structure."
        },
        'WarnZeroOutlineOffset': {
            'title': "Outline offset is set to zero",
            'what': "Outline offset is set to zero",
            'why': "Focus indicator touches element edge",
            'who': "Keyboard users with low vision",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7'],
            'remediation': "Use positive outline-offset value"
        },
        '[unique_identifier]': {
            'title': "[what the issue is]",
            'what': "[what the issue is]",
            'why': "[accessibility impact]",
            'who': "[affected user groups]",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': [],
            'remediation': "[remediation steps]"
        },
        'forms_DiscoNoSubmitButton': {
            'title': "Form may lack clear submit button",
            'what': "Form may lack clear submit button",
            'why': "Users may not know how to submit the form",
            'who': "Users with cognitive disabilities, keyboard users",
            'impact': ImpactScale.INFO.value,
            'wcag': ['3.3.2'],
            'remediation': "Ensure form has clear submit mechanism"
        },
        'forms_DiscoPlaceholderAsLabel': {
            'title': "Placeholder may be used instead of label",
            'what': "Placeholder may be used instead of label",
            'why': "Placeholder text disappears when typing",
            'who': "Users with memory/cognitive issues, screen reader users",
            'impact': ImpactScale.INFO.value,
            'wcag': ['3.3.2'],
            'remediation': "Use proper labels, placeholder for examples only"
        },
        'forms_ErrInputMissingLabel': {
            'title': "Form input element is missing an associated label",
            'what': "Form input element is missing an associated label",
            'why': "Users cannot determine the purpose of the input field",
            'who': "Screen reader users, voice control users, users with cognitive disabilities",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2', '4.1.2'],
            'remediation': "Add a <label> element with matching for/id attributes"
        },
        'forms_ErrNoButtonText': {
            'title': "Button has no accessible text",
            'what': "Button has no accessible text",
            'why': "Users cannot determine button purpose",
            'who': "Screen reader users, voice control users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.6', '4.1.2'],
            'remediation': "Add text content, aria-label, or aria-labelledby to button"
        },
        'forms_WarnGenericButtonText': {
            'title': "Button has generic text \"{text}\"",
            'what': "Button has generic text \"{text}\"",
            'why': "The button text \"{text}\" doesn\'t describe what the button does. When screen reader users navigate by buttons or hear buttons out of context, \"{text}\" provides no information about the button\'s purpose or action.",
            'who': "Screen reader users navigating by buttons who hear \"{text}\" without context, users with cognitive disabilities who need clear action labels",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Change \"{text}\" to describe the specific action, like \"Submit registration\", \"Save changes\", or \"Search products\" instead of just \"{text}\""
        },
        'forms_WarnNoFieldset': {
            'title': "Radio/checkbox group lacks fieldset and legend",
            'what': "Radio/checkbox group lacks fieldset and legend",
            'why': "Group relationship is not clear",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Wrap related inputs in fieldset with legend"
        },
        'forms_WarnRequiredNotIndicated': {
            'title': "Required field not clearly indicated",
            'what': "Required field not clearly indicated",
            'why': "Users don\'t know which fields are mandatory",
            'who': "All users, especially those with cognitive disabilities",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.3.2'],
            'remediation': "Add required attribute and visual indication"
        },
        'ErrStyleAttrColorFont': {
            'title': "Inline style attributes define color or font properties, preventing user customization",
            'what': "Inline style attributes define color or font properties directly on HTML elements, overriding user stylesheets and preventing users from customizing visual presentation",
            'why': "When colors and fonts are hard-coded in inline style attributes, CSS specificity rules make them extremely difficult for users to override with their own stylesheets. Users with low vision who need specific color schemes (high contrast, inverted colors, custom color combinations), users with dyslexia who need particular fonts, and users who need custom text spacing cannot apply their accessibility preferences. Inline styles essentially lock visual presentation, forcing all users to view content exactly as designed regardless of their needs.",
            'who': "Users with low vision who require custom color schemes or high contrast settings, users with dyslexia or reading disabilities who need specific fonts like OpenDyslexic or Comic Sans, users with light sensitivity who need dark mode or specific color combinations, users with cognitive disabilities who need customized text presentation, elderly users who need larger text with specific spacing, and users with color blindness who need adjusted color palettes",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.8', '5.2.4'],
            'remediation': "Move all color and font declarations from inline style attributes to external CSS files or <style> blocks with lower specificity, use CSS classes instead of inline styles (replace style=\"color: red; font-size: 18px;\" with class=\"error-text\"), ensure user stylesheets can override your styles by avoiding !important declarations, test that users can apply custom stylesheets successfully, and reserve inline styles only for layout properties like positioning or dimensions when absolutely necessary"
        },
        'WarnStyleAttrOther': {
            'title': "Inline style attributes define layout properties instead of using CSS classes",
            'what': "Inline style attributes define layout properties (margin, padding, width, display) directly on HTML elements instead of using CSS classes",
            'why': "While layout-related inline styles are less problematic for accessibility than color/font styles, they still reduce maintainability, make responsive design harder to implement, and can interfere with user zoom and customization. Inline layout styles scatter presentation logic throughout HTML making it difficult to create consistent designs or implement site-wide changes. They also make it harder for users with custom stylesheets to adjust spacing or layout for their needs.",
            'who': "Users who need custom stylesheets to adjust layout for readability, users who zoom content and need flexible layouts that adapt properly, developers maintaining the codebase who cannot easily update or debug scattered inline styles, and users with cognitive disabilities who benefit from consistent, predictable layouts",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8'],
            'remediation': "Move layout properties to CSS classes or external stylesheets for better maintainability (replace style=\"margin: 20px; padding: 10px;\" with appropriate CSS classes), use semantic HTML with CSS for layout rather than inline positioning, create reusable utility classes for common spacing patterns, ensure responsive design works properly without inline dimension declarations, and document any truly necessary inline layout styles with comments explaining why they cannot be moved to stylesheets"
        },
        'ErrStyleTagColorFont': {
            'title': "Style tags define color or font properties, making user stylesheet overrides difficult",
            'what': "Style tags in HTML document define color or font properties, making it harder for users to override with custom stylesheets due to specificity and source order",
            'why': "Embedded <style> tags create specificity and cascade issues that can prevent users from successfully applying their own stylesheets for accessibility needs. Colors and fonts defined in <style> tags appear later in the cascade than external stylesheets, often requiring users to add !important to every custom rule or fight complex specificity battles. This creates significant barriers for users who depend on custom styling - those with low vision needing high contrast, users with dyslexia needing specific fonts, or users with light sensitivity needing dark themes. External CSS files load first and are easier to override with user stylesheets.",
            'who': "Users with low vision who need custom color schemes that may be overridden by embedded styles, users with dyslexia or reading disabilities who cannot reliably apply their preferred fonts, users with photosensitivity who need consistent dark mode implementations, users with cognitive disabilities requiring specific visual customizations, and users relying on browser extensions or assistive technology that inject custom CSS which may be defeated by embedded styles",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.8', '5.2.4'],
            'remediation': "Move all color and font definitions from <style> tags to external CSS files that load early in the document head, use external stylesheets with link elements instead of embedded styles (replace <style> with <link rel=\"stylesheet\" href=\"styles.css\">), ensure external stylesheets are loaded before any embedded styles if you must use both, avoid using overly specific selectors or !important that make user overrides difficult, test that user stylesheets successfully override your color and font choices, and reserve <style> tags for critical layout CSS only when external files would cause flash of unstyled content"
        },
        'WarnStyleTagOther': {
            'title': "Style tags define layout properties, which should be in external CSS files",
            'what': "Style tags in HTML document define layout properties, which should preferably be in external CSS files for better maintainability and performance",
            'why': "While layout CSS in <style> tags is less problematic than inline styles, using external CSS files provides better caching, allows CSS to be shared across pages, makes maintenance easier, enables better testing, and improves page load performance. Embedded <style> blocks increase HTML file size, prevent browser caching of styles, make it harder to implement site-wide design changes, and can create flash of unstyled content issues. External CSS also makes it easier to implement responsive design and media queries consistently.",
            'who': "All users benefit from faster page loads through CSS caching, users on slow connections who download unnecessary CSS with every page, users who zoom or need responsive layouts that should be managed centrally, developers maintaining scattered style blocks across multiple pages, and users whose custom stylesheets work more predictably when site styles are in external files",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8'],
            'remediation': "Move layout CSS from <style> tags to external CSS files loaded via <link> elements, combine styles from multiple pages into shared stylesheets to improve caching, use CSS modules or build tools to manage styles systematically, keep <style> tags only for critical above-the-fold CSS if optimizing initial paint time, document any remaining embedded styles with comments explaining why external CSS isn\'t suitable, and ensure responsive design and media queries are managed in external files where they can be easily updated"
        },
    }
    
    # Get the specific description for this error type
    if error_type in descriptions:
        desc = descriptions[error_type].copy()
        
        # Replace metadata placeholders in the description
        for key in ['title', 'what', 'why', 'who', 'remediation']:
            if key in desc and isinstance(desc[key], str):
                # Replace {found} with actual font name for font issues (legacy support)
                if '{found}' in desc[key] and 'found' in metadata:
                    desc[key] = desc[key].replace('{found}', str(metadata.get('found', 'unknown')))

                # Special handling for font size list
                if '{fontSizes_list}' in desc[key] and 'fontSizes' in metadata:
                    sizes = metadata.get('fontSizes', [])
                    desc[key] = desc[key].replace('{fontSizes_list}', ', '.join(sizes) if isinstance(sizes, list) else str(sizes))

                # Special handling for field types summary
                if '{fieldTypes_summary}' in desc[key] and 'fieldTypes' in metadata:
                    field_types = metadata.get('fieldTypes', {})
                    if isinstance(field_types, dict):
                        summary = ', '.join([f"{count} {ftype}" for ftype, count in field_types.items()])
                        desc[key] = desc[key].replace('{fieldTypes_summary}', summary or 'unknown fields')
                    else:
                        desc[key] = desc[key].replace('{fieldTypes_summary}', str(field_types))

                # Special handling for search context in forms
                if '{searchContext_title}' in desc[key]:
                    is_search = metadata.get('isSearchForm', False)
                    if is_search:
                        desc[key] = desc[key].replace('{searchContext_title}', ' [SEARCH FORM]')
                    else:
                        desc[key] = desc[key].replace('{searchContext_title}', '')

                if '{searchContext_description}' in desc[key]:
                    search_ctx = metadata.get('searchContext', '')
                    if 'search' in search_ctx.lower():
                        desc[key] = desc[key].replace('{searchContext_description}',
                            f'This form is identified as a search form ({search_ctx}).')
                    else:
                        desc[key] = desc[key].replace('{searchContext_description}', '')

                if '{searchContext_remediation}' in desc[key]:
                    is_search = metadata.get('isSearchForm', False)
                    if is_search:
                        desc[key] = desc[key].replace('{searchContext_remediation}',
                            'For search forms specifically: verify the form or its container has role="search" so screen reader users can navigate directly to it using landmark navigation, ensure the search input has an appropriate label (visible or aria-label="Search"), and test that search results are announced to screen readers.')
                    else:
                        desc[key] = desc[key].replace('{searchContext_remediation}', '')

                # Special handling for plurals
                if '{sizeCount_plural}' in desc[key] and 'sizeCount' in metadata:
                    count = metadata.get('sizeCount', 0)
                    desc[key] = desc[key].replace('{sizeCount_plural}', 's' if count != 1 else '')

                if '{sizeCount_singular_size}' in desc[key] and 'sizeCount' in metadata:
                    count = metadata.get('sizeCount', 0)
                    desc[key] = desc[key].replace('{sizeCount_singular_size}', 'size' if count == 1 else 'different sizes')

                if '{fieldCount_plural}' in desc[key] and 'fieldCount' in metadata:
                    count = metadata.get('fieldCount', 0)
                    desc[key] = desc[key].replace('{fieldCount_plural}', 's' if count != 1 else '')

                # Special handling for calculated line height minimum
                if '{minLineHeight}' in desc[key] and 'fontSize' in metadata:
                    font_size = float(metadata.get('fontSize', 16))
                    min_line_height = font_size * 1.5
                    desc[key] = desc[key].replace('{minLineHeight}', f"{min_line_height:.2f}")

                # Replace nested metadata placeholders (e.g., {currentElement.tag})
                import re
                nested_pattern = r'\{([^}]+)\}'

                def replace_nested(match):
                    path = match.group(1)

                    # Skip special placeholders already handled
                    if path in ['fontSizes_list', 'sizeCount_plural', 'sizeCount_singular_size', 'fieldCount_plural', 'fieldTypes_summary',
                                'searchContext_title', 'searchContext_description', 'searchContext_remediation', 'minLineHeight']:
                        return match.group(0)

                    parts = path.split('.')

                    # Navigate through nested dict/objects
                    value = metadata
                    for part in parts:
                        if isinstance(value, dict) and part in value:
                            value = value[part]
                        else:
                            return match.group(0)  # Return original if path not found

                    return str(value) if value is not None else match.group(0)

                desc[key] = re.sub(nested_pattern, replace_nested, desc[key])
        
        return desc
    
    # Default fallback
    return {
        'title': f"Accessibility issue: {error_type}",
        'what': f"An accessibility issue of type '{error_type}' was detected.",
        'why': "This issue may create barriers for users with disabilities.",
        'who': "Users with disabilities",
        'impact': ImpactScale.MEDIUM.value,
        'wcag': [],
        'remediation': "Review the specific issue and apply appropriate accessibility fixes."
    }


def format_issue_for_display(issue_code: str, violation_data: Dict[str, Any]) -> Dict[str, str]:
    """
    Format an issue with all its metadata for display
    """
    # Get the detailed description using the metadata
    description = get_detailed_issue_description(issue_code, violation_data)
    
    # Add any additional runtime data
    description['issue_id'] = issue_code
    description['location'] = violation_data.get('xpath', 'Not specified')
    description['element'] = violation_data.get('element', 'Not specified')
    description['url'] = violation_data.get('url', 'Not specified')
    
    return description


# Export total issue count for verification
TOTAL_ISSUES = 287