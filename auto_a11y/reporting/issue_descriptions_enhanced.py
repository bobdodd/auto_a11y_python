"""
Auto-generated issue descriptions from ISSUE_CATALOG_TEMPLATE.md
DO NOT EDIT THIS FILE DIRECTLY - Edit ISSUE_CATALOG_TEMPLATE.md and regenerate
"""

from enum import Enum
from typing import Dict, Any, List


class ImpactScale(Enum):
    """Impact scale for accessibility issues"""
    HIGH = "High"
    MEDIUM = "Medium"  
    LOW = "Low"
    INFO = "Info"


def get_detailed_issue_description(issue_code: str, metadata: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    Get detailed description for an issue code with contextual metadata
    
    Args:
        issue_code: The issue code (e.g., 'headings_ErrEmptyHeading')
        metadata: Additional context about the specific issue instance
        
    Returns:
        Dictionary with detailed description fields
    """
    
    if metadata is None:
        metadata = {}
    
    # Extract the error type from the issue code
    if '_' in issue_code:
        category, error_type = issue_code.split('_', 1)
    else:
        category = 'unknown'
        error_type = issue_code
    
    # Generated descriptions from template
    descriptions = {
        'ErrImageWithNoAlt': {
            'title': "Images are missing alternative text attributes, preventing assistive technologies from conveying their content or purpose to users",
            'what': "Images are missing alternative text attributes, preventing assistive technologies from conveying their content or purpose to users",
            'why': "Screen readers cannot describe image content to users who are blind or have low vision, creating information barriers that may prevent understanding of essential content, navigation, or task completion. This also affects users with cognitive disabilities who benefit from text alternatives and users on slow connections where images fail to load.",
            'who': "Blind users using screen readers, users with low vision using screen readers with magnification, users with cognitive disabilities who rely on text alternatives, voice control users who need text labels to reference elements, and users on slow internet connections",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1 Non-text Content (Level A)'],
            'remediation': "Add descriptive alt attributes for informative images (alt=\"Sales chart showing 40% increase\"), use empty alt attributes for decorative images (alt=\"\"), describe the function for interactive images (alt=\"Search\" not alt=\"magnifying glass icon\"), and provide detailed descriptions via aria-describedby for complex images like charts or diagrams."
        },
        'ErrImageWithEmptyAlt': {
            'title': "Image alt attribute contains only whitespace characters (spaces, tabs, line breaks), providing no accessible name",
            'what': "Image alt attribute contains only whitespace characters (spaces, tabs, line breaks), providing no accessible name",
            'why': "Whitespace-only alt attributes fail to provide any accessible name for the image, causing screen readers to announce unhelpful fallback information like the image filename or \"unlabeled graphic\". Unlike properly empty alt=\"\" which signals decorative content, whitespace alt text creates ambiguity - users cannot determine if they\'re missing important information or if the image is decorative.",
            'who': "Blind and low vision users relying on screen readers who cannot determine the image\'s purpose or content, users with cognitive disabilities who depend on clear labeling to understand page content, and users of voice control software who cannot reference images without accessible names",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.1.1 Non-text Content (Level A)'],
            'remediation': "Determine the image\'s purpose and apply appropriate alt text - for informative images add descriptive alternative text that conveys the same information, for decorative images use alt=\"\" (no spaces) to properly mark them as decorative, for functional images describe the action or destination not the appearance, and remove any whitespace-only alt attributes that serve as ineffective placeholders"
        },
        'ErrImageWithImgFileExtensionAlt': {
            'title': "Alt text contains image filename with file extension (e",
            'what': "Alt text contains image filename with file extension (e.g., \"photo.jpg\", \"IMG_1234.png\", \"banner.gif\"), providing no meaningful description of the image content",
            'why': "Filenames rarely describe image content meaningfully and often contain technical identifiers, underscores, hyphens, or numbers that create a poor listening experience when announced by screen readers. Users hear cryptic strings like \"DSC underscore zero zero four two dot jay peg\" instead of learning what the image actually shows, forcing them to guess at important visual information or miss it entirely.",
            'who': "Blind and low vision users using screen readers who need meaningful descriptions to understand visual content, users with cognitive disabilities who rely on clear, descriptive text to process information, users in low-bandwidth situations where images don\'t load and only alt text is displayed, and search engine users who rely on descriptive alt text for finding relevant content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1 Non-text Content (Level A)'],
            'remediation': "Replace the filename with descriptive text that conveys the image\'s information or purpose (change alt=\"hero-banner-2.jpg\" to alt=\"Students collaborating in the campus library\"), focus on what the image communicates rather than technical details, ensure the description makes sense when read in context with surrounding content, and avoid including file extensions or technical metadata in alt attributes"
        },
        'ErrAltOnElementThatDoesntTakeIt': {
            'title': "Alt attribute placed on HTML elements that don\'t support it (such as div, span, p, or other non-image elements), making the alternative text inaccessible to assistive technologies",
            'what': "Alt attribute placed on HTML elements that don\'t support it (such as div, span, p, or other non-image elements), making the alternative text inaccessible to assistive technologies",
            'why': "The alt attribute is only valid on specific elements (<img>, <area>, <input type=\"image\">) and is ignored when placed on other elements. Screen readers will not announce this misplaced alt text, meaning any important information it contains is completely lost to users who rely on assistive technologies. This often occurs when developers attempt to add accessibility features but use incorrect techniques.",
            'who': "Blind and low vision users using screen readers who cannot access the alternative text content placed in invalid locations, users with cognitive disabilities who may be missing explanatory text, keyboard users who may not receive important contextual information, and users of assistive technologies that rely on proper semantic HTML markup",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.1.1 Non-text Content (Level A)'],
            'remediation': "Remove alt attributes from non-supporting elements and use appropriate alternatives - for background images in CSS use role=\"img\" with aria-label, for clickable elements use aria-label or visually hidden text, for decorative elements ensure they\'re properly hidden with aria-hidden=\"true\", and verify that actual <img> elements are used for content images that need alternative text"
        },
        'DiscoFoundInlineSvg': {
            'title': "Inline SVG element detected that requires manual review to determine appropriate accessibility implementation based on its purpose and complexity",
            'what': "Inline SVG element detected that requires manual review to determine appropriate accessibility implementation based on its purpose and complexity",
            'why': "SVG elements serve diverse purposes from simple icons to complex interactive visualizations, each requiring different accessibility approaches. A decorative border needs different treatment than a data chart, which differs from an interactive map or scientific simulation. Automated tools cannot determine SVG purpose, whether it\'s decorative or informative, static or interactive, or if existing accessibility features adequately support user needs.",
            'who': "Blind and low vision users using screen readers who need text alternatives for graphics or keyboard access to interactive elements, users with motor disabilities who require keyboard navigation for interactive SVG controls, users with cognitive disabilities who benefit from clear labeling and predictable interaction patterns, and users of various assistive technologies that may interpret SVG content differently",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.1.1 Non-text Content (Level A)'],
            'remediation': "Evaluate the SVG\'s purpose and complexity - for simple images add <title> with aria-labelledby or role=\"img\" with aria-label, for decorative graphics use aria-hidden=\"true\", for data visualizations provide <title> and <desc> plus consider adjacent detailed text alternatives, for interactive content ensure all controls are keyboard accessible with proper ARIA labels and focus management, for complex simulations provide instructions and state changes announcements, and test with screen readers to verify the experience matches visual functionality"
        },
        'DiscoFoundSvgImage': {
            'title': "SVG element with role=\"img\" detected that requires manual review to verify appropriate text alternatives are provided",
            'what': "SVG element with role=\"img\" detected that requires manual review to verify appropriate text alternatives are provided",
            'why': "SVG elements with role=\"img\" are explicitly marked as images and treated as a single graphic by assistive technologies, requiring appropriate text alternatives. While the role=\"img\" indicates developer awareness of accessibility needs, manual review is needed to verify that any aria-label, aria-labelledby, or internal <title> elements adequately describe the image\'s content or function, and that the description is appropriate for the SVG\'s context and purpose.",
            'who': "Blind and low vision users using screen readers who depend on text alternatives to understand image content, users with cognitive disabilities who benefit from clear, concise descriptions of visual information, keyboard users who may encounter the SVG in their navigation flow, and users of assistive technologies that treat role=\"img\" SVGs as atomic image elements",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.1.1 Non-text Content (Level A)'],
            'remediation': "Verify the SVG with role=\"img\" has appropriate accessible names through aria-label or aria-labelledby attributes, ensure any <title> or <desc> elements inside the SVG are properly referenced if used for labeling, confirm decorative SVGs are hidden with aria-hidden=\"true\" rather than given role=\"img\", check that the text alternative accurately describes the SVG\'s meaning in context, and test with screen readers to ensure the image is announced with meaningful information"
        },
        'ErrSvgImageNoLabel': {
            'title': "SVG image element lacks accessible text alternatives, making it invisible to screen reader users",
            'what': "SVG image element lacks accessible text alternatives, making it invisible to screen reader users",
            'why': "SVG images without proper labeling are completely inaccessible to screen reader users - they are either skipped entirely or announced as \"graphic\" with no indication of what they represent. Unlike HTML img elements that can use alt attributes, SVGs require different techniques for accessibility. Without proper labeling, users miss important visual information, icons, charts, logos, or interactive graphics that may be essential for understanding or using the page.",
            'who': "Blind and low vision users using screen readers who cannot perceive any information about unlabeled SVG content, users with cognitive disabilities who benefit from text descriptions of complex graphics, keyboard users who may encounter interactive SVGs without understanding their purpose, and users of assistive technologies that need text alternatives for all visual content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1 Non-text Content (Level A)'],
            'remediation': "For simple SVGs, add role=\"img\" and aria-label with descriptive text. For complex SVGs, use <title> as the first child element and reference it with aria-labelledby. For decorative SVGs, use aria-hidden=\"true\" to hide from assistive technologies. For inline SVGs containing text, ensure text is in actual text elements not paths. For interactive SVGs, provide appropriate ARIA labels for all interactive elements. Always test with screen readers to verify SVGs are properly announced."
        },
        'ErrImageWithURLAsAlt': {
            'title': "Alt attribute contains a URL (starting with http://, https://, www",
            'what': "Alt attribute contains a URL (starting with http://, https://, www., or file://) instead of descriptive text about the image content",
            'why': "URLs provide no meaningful information about what an image shows or its purpose on the page. Screen reader users hear lengthy, difficult-to-parse web addresses being spelled out character by character or in chunks like \"h-t-t-p-colon-slash-slash-w-w-w-dot\", creating a frustrating experience that conveys nothing about the actual image content. This often happens when image source URLs are mistakenly copied into alt attributes.",
            'who': "Blind and low vision users using screen readers who need meaningful descriptions instead of technical URLs, users with cognitive disabilities who cannot process or remember long URL strings to understand image content, users in low-bandwidth situations where only alt text displays when images fail to load, and voice control users who cannot effectively reference images labeled with URLs",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1 Non-text Content (Level A)'],
            'remediation': "Replace the URL with descriptive text that conveys what the image shows or its function (change alt=\"https://example.com/images/team-photo.jpg\" to alt=\"Marketing team at annual conference\"), focus on describing the image content rather than its location or technical details, ensure the description makes sense in the page context, and never use the image\'s web address as its alternative text"
        },
        'ErrImageAltContainsHTML': {
            'title': "Image\'s alternative text contains HTML markup tags",
            'what': "Image\'s alternative text contains HTML markup tags",
            'why': "HTML in alt text is not parsed, so screen readers will read the HTML markup as literal characters. Users will hear angle brackets announced as \"less than\" or \"greater than\" and tag names spelled out, creating a confusing experience. For example, alt=\"<b>Team Photo</b>\" would be read as \"less than b greater than Team Photo less than slash b greater than\".",
            'who': "Blind and low vision users using screen readers who will hear nonsense characters and words interspersed with the actual alt text, making it difficult or impossible to understand the image content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1 Non-text Content (Level A)'],
            'remediation': "Remove all HTML markup from alt attributes and use only plain text. If formatting or structure is important to convey, describe it in words rather than using markup (e.g., instead of \"<em>Important</em>\" use \"Important, emphasized\")."
        },
        'ErrUnlabelledField': {
            'title': "Form input element lacks an accessible name through <label>, aria-label, aria-labelledby, or other labeling methods, leaving the field\'s purpose undefined for assistive technologies",
            'what': "Form input element lacks an accessible name through <label>, aria-label, aria-labelledby, or other labeling methods, leaving the field\'s purpose undefined for assistive technologies",
            'why': "Without labels, users cannot determine what information to enter, leading to form errors, abandoned transactions, and inability to complete critical tasks. Screen readers announce only the field type like \"edit\" or \"combo box\" without context, forcing users to guess based on surrounding content that may not be programmatically associated. This creates barriers for independent form completion and may result in users submitting incorrect information or being unable to proceed.",
            'who': "Blind and low vision users using screen readers who hear no field description when navigating forms, users with cognitive disabilities who need clear labels to understand what information is required, users with motor disabilities using voice control who cannot reference unlabeled fields by name, mobile users where placeholder text may disappear on focus, and users who rely on browser autofill features that depend on proper field labeling",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.3.2 Labels or Instructions (Level A)', '4.1.2 Name', 'Role', 'Value (Level A)'],
            'remediation': "Add explicit <label> elements with for attribute matching the input\'s id (preferred method), use aria-label for simple labels when visual text isn\'t needed, implement aria-labelledby to reference existing visible text, ensure placeholder text is not the only labeling method as it disappears on input, wrap inputs and label text together for implicit association, and verify all form controls including select elements, textareas, and custom widgets have accessible names"
        },
        'forms_ErrInputMissingLabel': {
            'title': "Form input element is missing an associated label",
            'what': "Form input element is missing an associated label",
            'why': "Users cannot determine the purpose of the input field",
            'who': "Screen reader users, voice control users, users with cognitive disabilities",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2', '4.1.2'],
            'remediation': "Add a <label> element with matching for/id attributes"
        },
        'ErrEmptyAriaLabelOnField': {
            'title': "Form field has empty aria-label attribute",
            'what': "Form field has empty aria-label attribute",
            'why': "Empty labels provide no information about the field",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Add descriptive text to aria-label or use visible label"
        },
        'ErrEmptyAriaLabelledByOnField': {
            'title': "Form field has empty aria-labelledby attribute",
            'what': "Form field has empty aria-labelledby attribute",
            'why': "Empty labelledby provides no field description",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Reference valid element IDs or use direct labeling"
        },
        'ErrFieldAriaRefDoesNotExist': {
            'title': "aria-labelledby references non-existent element",
            'what': "aria-labelledby references non-existent element",
            'why': "Broken reference means no label for screen readers",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Fix the ID reference or use a different labeling method"
        },
        'ErrFieldReferenceDoesNotExist': {
            'title': "Label for attribute references non-existent field",
            'what': "Label for attribute references non-existent field",
            'why': "Label is not associated with any form field",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Fix the for/id relationship"
        },
        'ErrLabelContainsMultipleFields': {
            'title': "Single label contains multiple form fields",
            'what': "Single label contains multiple form fields",
            'why': "Unclear which field the label describes",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Use separate labels for each field"
        },
        'ErrOrphanLabelWithNoId': {
            'title': "Label element exists but has no for attribute",
            'what': "Label element exists but has no for attribute",
            'why': "Label is not programmatically associated with any field",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add for attribute pointing to field ID"
        },
        'WarnFormHasNoLabel': {
            'title': "Form element has no accessible name to describe its purpose",
            'what': "Form element has no accessible name to describe its purpose",
            'why': "When a form lacks an accessible name, screen reader users hear only \"form\" without knowing what the form does - is it a search form, login form, contact form, or something else? Users navigating by landmarks or forms need to understand each form\'s purpose to decide whether to interact with it. This is especially important on pages with multiple forms. Without proper labeling, users might fill out the wrong form, skip important forms, or waste time exploring forms to understand their purpose.",
            'who': "Screen reader users navigating by forms or landmarks who need to identify form purposes, users with cognitive disabilities who need clear labels to understand what each form does, and keyboard users who tab through forms and need context about what they\'re interacting with",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1 Info and Relationships', '2.4.6 Headings and Labels'],
            'remediation': "Add an accessible name to the form element using aria-label (e.g., aria-label=\"Contact form\") or aria-labelledby to reference a visible heading. If the form has a visible heading immediately before it, use aria-labelledby to point to that heading\'s ID. For search forms, \"Search\" is usually sufficient. The label should clearly indicate the form\'s purpose and be unique if there are multiple forms on the page."
        },
        'forms_WarnRequiredNotIndicated': {
            'title': "Required field not clearly indicated",
            'what': "Required field not clearly indicated",
            'why': "Users don\'t know which fields are mandatory",
            'who': "All users, especially those with cognitive disabilities",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.3.2'],
            'remediation': "Add required attribute and visual indication"
        },
        'forms_WarnGenericButtonText': {
            'title': "Button has generic text like \"Submit\" or \"Click here\"",
            'what': "Button has generic text like \"Submit\" or \"Click here\"",
            'why': "Button purpose is unclear out of context",
            'who': "Screen reader users navigating by buttons",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive button text like \"Submit registration\""
        },
        'forms_WarnNoFieldset': {
            'title': "Radio/checkbox group lacks fieldset and legend",
            'what': "Radio/checkbox group lacks fieldset and legend",
            'why': "Group relationship is not clear",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Wrap related inputs in fieldset with legend"
        },
        'DiscoFormOnPage': {
            'title': "Form detected on page - needs manual testing",
            'what': "Form detected on page - needs manual testing",
            'why': "Forms need comprehensive accessibility testing",
            'who': "All users with disabilities",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Manually test form with keyboard and screen reader"
        },
        'DiscoFormPage': {
            'title': "Page contains forms - needs comprehensive accessibility review",
            'what': "Page contains forms - needs comprehensive accessibility review",
            'why': "Forms are critical interaction points requiring thorough testing",
            'who': "All users with disabilities",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Manually test all forms with keyboard and screen reader"
        },
        'forms_DiscoNoSubmitButton': {
            'title': "Form may lack clear submit button",
            'what': "Form may lack clear submit button",
            'why': "Users may not know how to submit the form",
            'who': "Users with cognitive disabilities, keyboard users",
            'impact': ImpactScale.INFO.value,
            'wcag': ['3.3.2'],
            'remediation': "Ensure form has clear submit mechanism"
        },
        'forms_DiscoPlaceholderAsLabel': {
            'title': "Placeholder may be used instead of label",
            'what': "Placeholder may be used instead of label",
            'why': "Placeholder text disappears when typing",
            'who': "Users with memory/cognitive issues, screen reader users",
            'impact': ImpactScale.INFO.value,
            'wcag': ['3.3.2'],
            'remediation': "Use proper labels, placeholder for examples only"
        },
        'ErrFormEmptyHasNoChildNodes': {
            'title': "Form element is completely empty with no child nodes",
            'what': "Form element is completely empty with no child nodes",
            'why': "Empty forms serve no purpose and confuse assistive technology users",
            'who': "Screen reader users, keyboard users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Remove empty form elements or add appropriate form controls"
        },
        'ErrFormEmptyHasNoInteractiveElements': {
            'title': "Form has content but no interactive elements",
            'what': "Form has content but no interactive elements",
            'why': "Forms without inputs cannot be used for their intended purpose",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Add appropriate input fields, buttons, or other form controls"
        },
        'ErrFieldLabelledUsinAriaLabel': {
            'title': "Field labeled using aria-label instead of visible label",
            'what': "Field labeled using aria-label instead of visible label",
            'why': "Visible labels benefit all users, not just screen reader users",
            'who': "Users with cognitive disabilities, all users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.3.2'],
            'remediation': "Use visible <label> elements instead of aria-label when possible"
        },
        'ErrFielLabelledBySomethingNotALabel': {
            'title': "Field is labeled by an element that is not a proper label",
            'what': "Field is labeled by an element that is not a proper label",
            'why': "Non-label elements may not provide appropriate semantic relationships",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Use proper <label> elements or appropriate ARIA labeling"
        },
        'WarnFieldLabelledByMultipleElements': {
            'title': "Field is labeled by multiple elements via aria-labelledby",
            'what': "Field is labeled by multiple elements via aria-labelledby",
            'why': "Multiple labels may be confusing or incorrectly concatenated",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2'],
            'remediation': "Ensure multiple labels make sense when read together"
        },
        'WarnFieldLabelledByElementThatIsNotALabel': {
            'title': "Field labeled by element that is not semantically a label",
            'what': "Field labeled by element that is not semantically a label",
            'why': "Non-label elements may not convey proper semantic meaning",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Use proper label elements or ensure aria-labelledby references appropriate content"
        },
        'forms_ErrNoButtonText': {
            'title': "Button has no accessible text",
            'what': "Button has no accessible text",
            'why': "Users cannot determine button purpose",
            'who': "Screen reader users, voice control users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.6', '4.1.2'],
            'remediation': "Add text content, aria-label, or aria-labelledby to button"
        },
        'InfoFieldLabelledUsingAriaLabel': {
            'title': "Field is labeled using aria-label, which is valid but may have usability considerations",
            'what': "Field is labeled using aria-label, which is valid but may have usability considerations",
            'why': "While aria-label is a valid way to label form fields, it has limitations: the label is not visible on screen which can confuse sighted users, voice control users cannot reference the field by visible text, the label won\'t be automatically translated by browser translation tools, and users with cognitive disabilities benefit from visible labels as memory aids. This is informational to help you consider if a visible label would be more appropriate.",
            'who': "Sighted users who expect visible labels for context, voice control users who need visible text to reference fields, users relying on browser translation, users with cognitive disabilities who benefit from persistent visible labels, and users who may need to review form data before submission",
            'impact': ImpactScale.INFO.value,
            'wcag': ['3.3.2 Labels or Instructions (Level A)'],
            'remediation': "Consider if a visible label would better serve all users. If space permits, use a visible <label> element. If aria-label must be used, ensure the label text is clear and descriptive. Consider adding visible helper text or placeholder text to provide visual context. For complex forms, visible labels generally provide better usability for all users."
        },
        'ErrNoHeadingsOnPage': {
            'title': "No heading elements (h1-h6) found anywhere on the page",
            'what': "No heading elements (h1-h6) found anywhere on the page",
            'why': "Headings create the structural outline of your content, like a table of contents. They allow users to understand how information is organized and navigate directly to sections of interest. Without any headings, screen reader users cannot use heading navigation shortcuts (one of their primary navigation methods) and must read through all content linearly. This is like forcing someone to read an entire book without chapter titles or section breaks. Users cannot skim content, jump to relevant sections, or understand the information hierarchy. For users with cognitive disabilities, the lack of visual structure makes content overwhelming and hard to process.",
            'who': "Screen reader users who lose a critical navigation method and cannot understand content structure, users with cognitive disabilities who need clear visual organization to process information, users with attention disorders who rely on headings to focus on relevant sections, and users with reading disabilities who use headings to break content into manageable chunks",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1 Info and Relationships', '2.4.6 Headings and Labels'],
            'remediation': "Add semantic heading elements (h1-h6) to structure your content. Start with one h1 that describes the main page topic. Use h2 for major sections, h3 for subsections, and so on. Don\'t skip levels (e.g., h1 to h3). Ensure headings describe the content that follows them. Never use headings just for visual styling - they must represent actual content structure. If you need large text without semantic meaning, use CSS instead."
        },
        'WarnNoH1': {
            'title': "Page is missing an h1 element to identify the main topic",
            'what': "Page is missing an h1 element to identify the main topic",
            'why': "The h1 is the most important heading on a page - it tells users what the page is about, similar to a chapter title in a book. Screen reader users often navigate directly to the h1 first to understand the page purpose. Without it, users must guess the page topic from other cues like the title or URL. The h1 also establishes the starting point for the heading hierarchy. Search engines use the h1 to understand page content, and browser extensions that generate page outlines will be missing the top level. Think of the h1 as answering \"What is this page about?\" - without it, users lack this fundamental context.",
            'who': "Screen reader users who jump to the h1 to understand page purpose, users with cognitive disabilities who need clear indication of page topic, SEO and users finding your content through search engines, users of browser tools that generate page outlines or tables of contents",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1 Info and Relationships', '2.4.6 Headings and Labels'],
            'remediation': "Add exactly one h1 element that describes the main topic or purpose of the page. It should be unique to that page (not the same site-wide). Place it at the beginning of your main content, typically inside the main landmark. The h1 text should make sense if read in isolation and match user expectations based on how they arrived at the page. Don\'t use the site name as the h1 - use the specific page topic."
        },
        'ErrEmptyHeading': {
            'title': "Heading element (h1-h6) contains no text content or only whitespace",
            'what': "Heading element (h1-h6) contains no text content or only whitespace",
            'why': "Empty headings disrupt document structure and navigation. Screen reader users rely on headings to understand page organization and navigate efficiently using heading shortcuts. An empty heading creates a navigation point with no information, confusing users about the page structure. It may indicate missing content or poor markup practices that affect the overall accessibility of the page.",
            'who': "Screen reader users who navigate by headings and cannot determine what section the empty heading represents, users with cognitive disabilities who rely on clear structure to understand content organization, and users of browser plugins or assistive technologies that generate page outlines",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1 Info and Relationships', '2.4.6 Headings and Labels'],
            'remediation': "Either add meaningful text content to the heading that describes the section it introduces, or remove the empty heading element entirely if it serves no structural purpose. Never use headings for visual spacing - use CSS margin/padding instead. Ensure all headings have descriptive text that helps users understand the content structure."
        },
        'ErrSkippedHeadingLevel': {
            'title': "Heading levels are not in sequential order - jumped from h{skippedFrom} to h{skippedTo}, skipping intermediate level(s)",
            'what': "Heading levels are not in sequential order - jumped from h{skippedFrom} to h{skippedTo}, skipping intermediate level(s)",
            'why': "Heading levels create a hierarchical outline of your content, like nested bullet points. Jumping from h{skippedFrom} to h{skippedTo} breaks this logical structure. It\'s like having chapter {skippedFrom}, then jumping to section {skippedTo} without the intermediate section. Screen reader users navigating by headings will be confused about the relationship between sections - is the h{skippedTo} a subsection of something that\'s missing? This broken hierarchy makes it hard to understand how content is organized and can cause users to think content is missing or that they\'ve accidentally skipped something.",
            'who': "Screen reader users navigating by heading structure who rely on levels to understand content relationships, users with cognitive disabilities who need logical, predictable content organization, users of assistive technology that generates document outlines, and developers or content authors maintaining the page who need to understand the intended structure",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1 Info and Relationships'],
            'remediation': "Insert an h{expectedLevel} heading between the h{skippedFrom} and h{skippedTo}, or change the h{skippedTo} to h{expectedLevel} to maintain sequential order. After h{skippedFrom}, use h{expectedLevel} for the next level. Don\'t skip levels when going down the hierarchy. If you need a heading to look smaller visually, use CSS to style it rather than choosing a lower heading level. The heading level should reflect the content\'s logical structure, not its visual appearance."
        },
        'ErrMultipleH1': {
            'title': "Page contains {count} h1 elements instead of just one",
            'what': "Page contains {count} h1 elements instead of just one",
            'why': "Having {count} h1 elements creates confusion about the page\'s main topic. Each h1 represents a primary heading, and multiple h1s suggest multiple main topics, breaking the document hierarchy. Screen readers users won\'t know which h1 represents the actual page topic.",
            'who': "Screen reader users who expect a single h1 to identify the page topic, users navigating by headings who see multiple \"top level\" items, SEO and search engines that look for a single main topic",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Keep only one h1 that represents the main page topic. Change the other {count-1} h1 elements to h2 or appropriate lower levels based on their relationship to the main topic."
        },
        'ErrFoundAriaLevelButNoRoleAppliedAtAll': {
            'title': "aria-level attribute without role=\"heading\"",
            'what': "aria-level attribute without role=\"heading\"",
            'why': "aria-level only works with heading role",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Add role=\"heading\" or use native heading element"
        },
        'ErrFoundAriaLevelButRoleIsNotHeading': {
            'title': "aria-level on element without heading role",
            'what': "aria-level on element without heading role",
            'why': "aria-level requires heading role to work",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Add role=\"heading\" or remove aria-level"
        },
        'ErrInvalidAriaLevel': {
            'title': "Invalid aria-level value (not 1-6)",
            'what': "Invalid aria-level value (not 1-6)",
            'why': "Invalid levels break heading hierarchy",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Use aria-level values 1 through 6 only"
        },
        'ErrRoleOfHeadingButNoLevelGiven': {
            'title': "role=\"heading\" without aria-level",
            'what': "role=\"heading\" without aria-level",
            'why': "Heading level is undefined",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Add aria-level attribute with value 1-6"
        },
        'WarnHeadingOver60CharsLong': {
            'title': "Heading text is {length} characters long: \"{headingText}\"",
            'what': "Heading text is {length} characters long: \"{headingText}\"",
            'why': "This heading has {length} characters. Long headings are harder to scan quickly, more difficult to understand at a glance, and can overwhelm users. Screen reader users hearing the full heading text may struggle to grasp the main point. Long headings also cause layout issues on mobile devices and in navigation menus.",
            'who': "Users with cognitive disabilities who benefit from concise, clear headings, screen reader users who must listen to the entire heading, users scanning the page quickly for information, and mobile users with limited screen space",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Shorten the heading to under 60 characters while preserving its meaning. Current: \"{headingText}\" - Consider breaking into a shorter heading with explanatory text below, or focus on the key message. Use descriptive but concise language."
        },
        'WarnHeadingInsideDisplayNone': {
            'title': "Heading is hidden with display:none",
            'what': "Heading is hidden with display:none",
            'why': "Hidden headings may affect document structure",
            'who': "Screen reader users (varies by implementation)",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Remove unused headings or make them visible"
        },
        'VisibleHeadingDoesNotMatchA11yName': {
            'title': "Visible heading text doesn\'t match its accessible name",
            'what': "Visible heading text doesn\'t match its accessible name",
            'why': "Voice control users may not be able to reference the heading by its visible text",
            'who': "Voice control users, screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3'],
            'remediation': "Ensure visible text matches or is contained within the accessible name"
        },
        'ErrNoMainLandmark': {
            'title': "Page is missing a main landmark region to identify the primary content area",
            'what': "Page is missing a main landmark region to identify the primary content area",
            'why': "Screen reader users rely on landmarks to understand page layout and quickly navigate to important sections. The main landmark allows users to skip repeated content like headers and navigation to jump directly to the unique page content. Without it, users must navigate through all repeated elements on every page, which is time-consuming and frustrating. The main landmark should contain all content that is unique to the page, including the h1 heading.",
            'who': "Blind and low vision users using screen readers who navigate by landmarks, users with motor disabilities who need efficient keyboard navigation to skip repeated content, and users with cognitive disabilities who benefit from clear page structure",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1 Info and Relationships', '2.4.1 Bypass Blocks'],
            'remediation': "Add a <main> element around the primary content area, or use role=\"main\" on an appropriate container element. Ensure there is only one main landmark per page, position it as a top-level landmark (not nested inside other landmarks), and include all unique page content within it, including the h1 heading. The main landmark should not include repeated content like site headers, navigation, or footers."
        },
        'ErrNoBannerLandmarkOnPage': {
            'title': "Page is missing a banner landmark to identify the site header region",
            'what': "Page is missing a banner landmark to identify the site header region",
            'why': "The banner landmark identifies the site header which typically contains the site logo, main navigation, and search functionality. This content appears consistently across pages and users expect to find it at the top. Without proper banner markup, screen reader users cannot quickly jump to the header area using landmark navigation shortcuts. They must instead navigate through all content linearly or guess where the header content begins and ends. This makes it difficult to access primary navigation or return to the site homepage via the logo link, tasks that sighted users can do instantly by looking at the top of the page.",
            'who': "Screen reader users who use landmark navigation to quickly access site navigation and branding, keyboard users who want to efficiently navigate to header elements, users with cognitive disabilities who rely on consistent page structure to orient themselves, and users with low vision using screen magnifiers who need to quickly locate navigation elements",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1 Info and Relationships', '2.4.1 Bypass Blocks'],
            'remediation': "Use the HTML5 <header> element for your site header (it has an implicit role of banner when it\'s not nested inside article, aside, main, nav, or section elements). Alternatively, add role=\"banner\" to the container holding your header content. There should typically be only one banner landmark per page at the top level. Include site-wide content like logo, primary navigation, and site search within the banner landmark."
        },
        'WarnNoBannerLandmark': {
            'title': "Page is missing a banner landmark to identify the header/masthead region",
            'what': "Page is missing a banner landmark to identify the header/masthead region",
            'why': "The banner landmark identifies the site header containing the logo, primary navigation, and other site-wide content. Without it, screen reader users cannot quickly jump to the header area using landmark navigation. They must read through content linearly to find navigation and branding elements. This is especially frustrating when users want to access the main navigation or return to the homepage via the logo.",
            'who': "Screen reader users who navigate by landmarks to quickly access header content, keyboard users with assistive technology looking for navigation, users with cognitive disabilities who rely on consistent page structure, and users who frequently need to access header elements like search or main navigation",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1 Info and Relationships (Level A)', '2.4.1 Bypass Blocks (Level A)'],
            'remediation': "Use the HTML5 <header> element at the page level (not within article, aside, main, nav, or section) as it has an implicit banner role. Alternatively, add role=\"banner\" to your header container. Include site-wide elements like logo, primary navigation, site search, and utility navigation within the banner. Ensure only one banner landmark exists per page at the top level."
        },
        'WarnNoContentinfoLandmark': {
            'title': "Page is missing a contentinfo landmark to identify the footer region",
            'what': "Page is missing a contentinfo landmark to identify the footer region",
            'why': "The contentinfo landmark (typically a footer) contains important information about the page or site such as copyright notices, privacy policies, contact information, and site maps. Screen reader users rely on landmarks to quickly navigate to these common elements without having to read through the entire page. When the footer lacks proper landmark markup, users must search manually through the content to find this information, which is inefficient and may cause them to miss important legal notices or helpful links. The contentinfo landmark provides a consistent, predictable way to access this supplementary information across all pages.",
            'who': "Screen reader users who navigate by landmarks to quickly find footer information, keyboard users who want to efficiently skip to footer content, users with cognitive disabilities who rely on consistent page structure, and users who need to frequently access footer links like privacy policies or contact information",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1 Info and Relationships', '2.4.1 Bypass Blocks'],
            'remediation': "Use the HTML5 <footer> element for your page footer (it has an implicit role of contentinfo when it\'s not nested inside article, aside, main, nav, or section elements). Alternatively, add role=\"contentinfo\" to the container holding your footer content. Ensure there\'s only one contentinfo landmark per page at the top level. The footer should contain information about the page or site, not primary content."
        },
        'WarnNoNavigationLandmark': {
            'title': "Page has no navigation landmarks to identify navigation regions",
            'what': "Page has no navigation landmarks to identify navigation regions",
            'why': "Navigation landmarks identify areas containing navigation links, allowing users to quickly jump to menus without reading through other content. Most web pages have multiple navigation areas (main menu, footer links, sidebar navigation, breadcrumbs) but without proper markup, these are just lists of links mixed with other content. Screen reader users must hunt for navigation areas or listen to all links to find what they need. Navigation landmarks make these areas immediately discoverable and allow users to skip between different navigation regions efficiently.",
            'who': "Screen reader users who use landmarks to find navigation menus quickly, keyboard users navigating complex sites with multiple menus, users with cognitive disabilities who need clear identification of navigation areas, and users with motor disabilities who need to minimize unnecessary navigation",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1 Info and Relationships', '2.4.1 Bypass Blocks'],
            'remediation': "Wrap navigation areas in <nav> elements or add role=\"navigation\" to containers with navigation links. If you have multiple navigation areas, label each one with aria-label to distinguish them (e.g., aria-label=\"Main navigation\", aria-label=\"Footer links\", aria-label=\"Breadcrumb\"). Not every group of links needs to be a navigation landmark - use it for major navigation blocks that users would want to find quickly."
        },
        'ErrMultipleMainLandmarks': {
            'title': "Multiple main landmark regions found on the page",
            'what': "Multiple main landmark regions found on the page",
            'why': "The main landmark should contain THE primary content of the page - having multiple main landmarks is like having multiple \"Chapter 1\" sections in a book. It confuses the page structure and defeats the purpose of landmarks. Screen reader users expecting to jump to the main content won\'t know which landmark contains the actual primary content. They might land in the wrong section, miss important content, or have to check multiple \"main\" areas. This ambiguity makes the landmark system unreliable and forces users back to linear navigation.",
            'who': "Screen reader users relying on the main landmark to skip to primary content, keyboard users using landmark navigation extensions, users with cognitive disabilities who need clear, unambiguous page structure, and developers trying to understand the intended page structure",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1 Info and Relationships'],
            'remediation': "Use only one <main> element or role=\"main\" per page. Identify which content is truly the primary, unique content for that page and wrap only that in the main landmark. If you have multiple important sections, use other appropriate landmarks (article, section) or headings to structure them within the single main landmark. The main should contain all unique page content but exclude repeated elements like headers, navigation, and footers."
        },
        'ErrMultipleBannerLandmarks': {
            'title': "Multiple banner landmarks found",
            'what': "Multiple banner landmarks found",
            'why': "Multiple headers confuse page structure",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use only one banner landmark"
        },
        'ErrMultipleContentinfoLandmarks': {
            'title': "Multiple contentinfo landmarks found",
            'what': "Multiple contentinfo landmarks found",
            'why': "Multiple footers confuse page structure",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use only one contentinfo landmark"
        },
        'ErrBannerLandmarkAccessibleNameIsBlank': {
            'title': "Banner landmark has blank accessible name",
            'what': "Banner landmark has blank accessible name",
            'why': "Multiple banners need labels to distinguish them",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add aria-label or aria-labelledby"
        },
        'ErrNavLandmarkAccessibleNameIsBlank': {
            'title': "Navigation landmark has blank accessible name",
            'what': "Navigation landmark has blank accessible name",
            'why': "Multiple nav areas need labels",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add aria-label like \"Main navigation\" or \"Footer navigation\""
        },
        'WarnNavLandmarkHasNoLabel': {
            'title': "Navigation landmark lacks label",
            'what': "Navigation landmark lacks label",
            'why': "Hard to distinguish multiple navigation areas",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add descriptive aria-label"
        },
        'WarnMultipleNavNeedsLabel': {
            'title': "Multiple navigation landmarks found without distinguishing labels",
            'what': "Multiple navigation landmarks found without distinguishing labels",
            'why': "When a page has multiple navigation areas (main menu, footer links, breadcrumbs, sidebar navigation), users need to distinguish between them. Without unique labels, screen reader users hear \"navigation\" multiple times with no indication of which navigation area they\'re entering. This creates confusion about which menu contains the desired links and requires users to explore each navigation to understand its purpose.",
            'who': "Screen reader users who need to distinguish between different navigation areas, keyboard users navigating between multiple menus, users with cognitive disabilities who need clear labeling, and frequent users who want to quickly access specific navigation areas",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1 Info and Relationships (Level A)'],
            'remediation': "Add unique aria-label attributes to each <nav> element or role=\"navigation\" container. Use descriptive labels like aria-label=\"Main menu\", aria-label=\"Footer links\", aria-label=\"Breadcrumb\", aria-label=\"Related articles\". The labels should clearly indicate the purpose or location of each navigation. Test with screen readers to ensure each navigation is announced with its unique label."
        },
        'ErrMainLandmarkMayNotbeChildOfAnotherLandmark': {
            'title': "Main landmark nested inside another landmark",
            'what': "Main landmark nested inside another landmark",
            'why': "Invalid landmark nesting breaks structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move main outside of other landmarks"
        },
        'ErrBannerLandmarkMayNotBeChildOfAnotherLandmark': {
            'title': "Banner landmark nested inside another landmark",
            'what': "Banner landmark nested inside another landmark",
            'why': "Invalid nesting breaks page structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move banner to top level"
        },
        'ErrNestedNavLandmarks': {
            'title': "Navigation landmarks are nested",
            'what': "Navigation landmarks are nested",
            'why': "Confusing navigation structure",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Flatten navigation structure"
        },
        'ErrElementNotContainedInALandmark': {
            'title': "Content exists outside of any landmark",
            'what': "Content exists outside of any landmark",
            'why': "Content may be missed when navigating by landmarks",
            'who': "Screen reader users using landmark navigation",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure all content is within appropriate landmarks"
        },
        'WarnElementNotInLandmark': {
            'title': "Important content found outside of any landmark region, making it harder for screen reader users to find and navigate to",
            'what': "Important content found outside of any landmark region, making it harder for screen reader users to find and navigate to",
            'why': "Landmarks create a navigable structure for your page, like a table of contents. Content outside landmarks is like having chapters missing from the table of contents - users may never find it when navigating by landmarks. Screen reader users often jump between landmarks to quickly scan page structure, and content outside landmarks requires them to read through the entire page linearly to discover it. This particularly affects users who are familiar with your site and want to quickly navigate to specific content areas.",
            'who': "Screen reader users who navigate by landmarks to efficiently explore pages, keyboard users using browser extensions for landmark navigation, users with cognitive disabilities who rely on consistent page structure, and power users who use landmarks for quick navigation",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1 Info and Relationships (Level A)'],
            'remediation': "Ensure all meaningful content is contained within appropriate landmark regions. Typically: use <header> or role=\"banner\" for site headers, <nav> or role=\"navigation\" for navigation menus, <main> or role=\"main\" for primary content, <aside> or role=\"complementary\" for sidebar content, <footer> or role=\"contentinfo\" for footers. Decorative content or spacers can remain outside landmarks. Review your page structure to ensure no important content is orphaned outside the landmark structure."
        },
        'ErrMainLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Main landmark has both aria-label and aria-labelledby attributes",
            'what': "Main landmark has both aria-label and aria-labelledby attributes",
            'why': "Conflicting labeling methods may cause confusion",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method - either aria-label or aria-labelledby"
        },
        'ErrMainLandmarkHasTabindexOfZeroCanOnlyHaveMinusOneAtMost': {
            'title': "Main landmark has tabindex=\"0\" which is inappropriate",
            'what': "Main landmark has tabindex=\"0\" which is inappropriate",
            'why': "Landmarks should not be in the tab order",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove tabindex or use tabindex=\"-1\" if programmatic focus is needed"
        },
        'ErrMainLandmarkIsHidden': {
            'title': "Main landmark is hidden from view",
            'what': "Main landmark is hidden from view",
            'why': "Hidden main content defeats the purpose of the landmark",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure main landmark is visible or remove if not needed"
        },
        'ErrDuplicateLabelForComplementaryLandmark': {
            'title': "Multiple complementary landmarks have the same label",
            'what': "Multiple complementary landmarks have the same label",
            'why': "Users cannot distinguish between different complementary sections",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each complementary landmark"
        },
        'ErrComplementaryLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Complementary landmark has both aria-label and aria-labelledby",
            'what': "Complementary landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods may cause confusion",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrComplementaryLandmarkMayNotBeChildOfAnotherLandmark': {
            'title': "Complementary landmark is nested inside another landmark",
            'what': "Complementary landmark is nested inside another landmark",
            'why': "Invalid nesting breaks landmark structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move complementary landmark outside of other landmarks"
        },
        'WarnComplementaryLandmarkHasNoLabel': {
            'title': "Complementary landmark lacks a label",
            'what': "Complementary landmark lacks a label",
            'why': "Hard to distinguish multiple complementary sections",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add aria-label or aria-labelledby to identify the purpose"
        },
        'ErrComplementaryLandmarkAccessibleNameIsBlank': {
            'title': "Complementary landmark has blank accessible name",
            'what': "Complementary landmark has blank accessible name",
            'why': "Empty labels provide no information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label text"
        },
        'WarnComplementaryLandmarkAccessibleNameUsesComplementary': {
            'title': "Complementary landmark label uses generic term \"complementary\"",
            'what': "Complementary landmark label uses generic term \"complementary\"",
            'why': "Generic labels don\'t describe specific content",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive labels like \"Related articles\" or \"Sidebar\""
        },
        'ErrDuplicateLabelForNavLandmark': {
            'title': "Multiple navigation landmarks have the same label",
            'what': "Multiple navigation landmarks have the same label",
            'why': "Users cannot distinguish between different navigation areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels like \"Main navigation\" and \"Footer navigation\""
        },
        'ErrNavLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Navigation landmark has both aria-label and aria-labelledby",
            'what': "Navigation landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'WarnNavLandmarkAccessibleNameUsesNavigation': {
            'title': "Navigation landmark uses generic term \"navigation\" in label",
            'what': "Navigation landmark uses generic term \"navigation\" in label",
            'why': "Generic labels don\'t describe specific purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use more descriptive labels like \"Product categories\" or \"User account menu\""
        },
        'ErrCompletelyEmptyNavLandmark': {
            'title': "Navigation landmark contains no content",
            'what': "Navigation landmark contains no content",
            'why': "Empty navigation serves no purpose",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Add navigation content or remove empty landmark"
        },
        'ErrNavLandmarkContainsOnlyWhiteSpace': {
            'title': "Navigation landmark contains only whitespace",
            'what': "Navigation landmark contains only whitespace",
            'why': "Whitespace-only navigation is not functional",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Add navigation links or remove the landmark"
        },
        'ErrDuplicateLabelForRegionLandmark': {
            'title': "Multiple region landmarks have the same label",
            'what': "Multiple region landmarks have the same label",
            'why': "Users cannot distinguish between different regions",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each region"
        },
        'ErrRegionLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Region landmark has both aria-label and aria-labelledby",
            'what': "Region landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'WarnRegionLandmarkHasNoLabelSoIsNotConsideredALandmark': {
            'title': "Region landmark lacks required label to be considered a landmark",
            'what': "Region landmark lacks required label to be considered a landmark",
            'why': "Regions without labels are not exposed as landmarks",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby, or use a different landmark type"
        },
        'RegionLandmarkAccessibleNameIsBlank': {
            'title': "Region landmark has blank accessible name",
            'what': "Region landmark has blank accessible name",
            'why': "Blank labels provide no information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label text"
        },
        'WarnRegionLandmarkAccessibleNameUsesNavigation': {
            'title': "Region landmark incorrectly uses \"navigation\" in its label",
            'what': "Region landmark incorrectly uses \"navigation\" in its label",
            'why': "Confusing landmark type and purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use appropriate label or change to nav landmark"
        },
        'ErrDuplicateLabelForBannerLandmark': {
            'title': "Multiple banner landmarks have the same label",
            'what': "Multiple banner landmarks have the same label",
            'why': "Users cannot distinguish between different banners",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Only one banner should typically exist per page"
        },
        'ErrBannerLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Banner landmark has both aria-label and aria-labelledby",
            'what': "Banner landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'WarnBannerLandmarkAccessibleNameUsesBanner': {
            'title': "Banner landmark uses generic term \"banner\" in label",
            'what': "Banner landmark uses generic term \"banner\" in label",
            'why': "Redundant labeling",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive label or rely on implicit role"
        },
        'WarnMultipleBannerLandmarksButNotAllHaveLabels': {
            'title': "Multiple banner landmarks exist but not all have labels",
            'what': "Multiple banner landmarks exist but not all have labels",
            'why': "Inconsistent labeling makes navigation difficult",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all banner landmarks have labels or reduce to single banner"
        },
        'ErrDuplicateLabelForContentinfoLandmark': {
            'title': "Multiple contentinfo landmarks have the same label",
            'what': "Multiple contentinfo landmarks have the same label",
            'why': "Users cannot distinguish between different footer areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Typically only one contentinfo should exist per page"
        },
        'ErrContentInfoLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Contentinfo landmark has both aria-label and aria-labelledby",
            'what': "Contentinfo landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrContentinfoLandmarkMayNotBeChildOfAnotherLandmark': {
            'title': "Contentinfo landmark is nested inside another landmark",
            'what': "Contentinfo landmark is nested inside another landmark",
            'why': "Invalid nesting breaks landmark structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move contentinfo to top level"
        },
        'WarnContentInfoLandmarkHasNoLabel': {
            'title': "Contentinfo landmark lacks a label",
            'what': "Contentinfo landmark lacks a label",
            'why': "May be harder to identify purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add descriptive label if multiple contentinfo exist"
        },
        'ErrContentInfoLandmarkAccessibleNameIsBlank': {
            'title': "Contentinfo landmark has blank accessible name",
            'what': "Contentinfo landmark has blank accessible name",
            'why': "Blank labels provide no information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label text"
        },
        'WarnContentinfoLandmarkAccessibleNameUsesContentinfo': {
            'title': "Contentinfo landmark uses generic term \"contentinfo\" in label",
            'what': "Contentinfo landmark uses generic term \"contentinfo\" in label",
            'why': "Redundant labeling",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive label or rely on implicit role"
        },
        'WarnMultipleContentInfoLandmarksButNotAllHaveLabels': {
            'title': "Multiple contentinfo landmarks exist but not all have labels",
            'what': "Multiple contentinfo landmarks exist but not all have labels",
            'why': "Inconsistent labeling makes navigation difficult",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all contentinfo landmarks have labels or reduce to single contentinfo"
        },
        'WarnFormHasNoLabelSoIsNotLandmark': {
            'title': "Form element lacks label so is not exposed as landmark",
            'what': "Form element lacks label so is not exposed as landmark",
            'why': "Forms without accessible names are not landmarks",
            'who': "Screen reader users navigating by landmarks",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby to make it a landmark"
        },
        'ErrDuplicateLabelForFormLandmark': {
            'title': "Multiple form landmarks have the same label",
            'what': "Multiple form landmarks have the same label",
            'why': "Users cannot distinguish between different forms",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each form"
        },
        'ErrFormUsesAriaLabelInsteadOfVisibleElement': {
            'title': "Form uses aria-label instead of visible heading or label",
            'what': "Form uses aria-label instead of visible heading or label",
            'why': "Visible labels benefit all users",
            'who': "All users, especially those with cognitive disabilities",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3', '3.3.2'],
            'remediation': "Use visible heading with aria-labelledby"
        },
        'ErrFormUsesTitleAttribute': {
            'title': "Form uses title attribute for labeling",
            'what': "Form uses title attribute for labeling",
            'why': "Title attributes are not reliably accessible",
            'who': "Screen reader users, mobile users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use aria-label or aria-labelledby instead"
        },
        'ErrFormAriaLabelledByIsBlank': {
            'title': "Form aria-labelledby references blank or empty element",
            'what': "Form aria-labelledby references blank or empty element",
            'why': "No accessible name is provided",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Reference element with actual text content"
        },
        'ErrFormAriaLabelledByReferenceDoesNotExist': {
            'title': "Form aria-labelledby references non-existent element",
            'what': "Form aria-labelledby references non-existent element",
            'why': "Broken reference provides no accessible name",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Fix ID reference or use different labeling method"
        },
        'ErrFormAriaLabelledByReferenceDoesNotReferenceAHeading': {
            'title': "Form aria-labelledby doesn\'t reference a heading element",
            'what': "Form aria-labelledby doesn\'t reference a heading element",
            'why': "Best practice is to reference headings for form landmarks",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Reference a heading element when possible"
        },
        'ErrFormAriaLabelledByReferenceDIsHidden': {
            'title': "Form aria-labelledby references hidden element",
            'what': "Form aria-labelledby references hidden element",
            'why': "Hidden elements may not provide accessible names",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Reference visible elements only"
        },
        'ErrFormLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Form landmark has both aria-label and aria-labelledby",
            'what': "Form landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrFormLandmarkAccessibleNameIsBlank': {
            'title': "Form landmark has blank accessible name",
            'what': "Form landmark has blank accessible name",
            'why': "Forms need clear identification",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label describing form purpose"
        },
        'WarnFormLandmarkAccessibleNameUsesForm': {
            'title': "Form landmark uses generic term \"form\" in label",
            'what': "Form landmark uses generic term \"form\" in label",
            'why': "Generic labels don\'t describe purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive labels like \"Contact form\" or \"Search form\""
        },
        'ErrDuplicateLabelForSearchLandmark': {
            'title': "Multiple search landmarks have the same label",
            'what': "Multiple search landmarks have the same label",
            'why': "Users cannot distinguish between different search areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each search landmark"
        },
        'WarnHeadingFoundInsideLandmarkButDoesntLabelLandmark': {
            'title': "Heading inside landmark doesn\'t label the landmark",
            'what': "Heading inside landmark doesn\'t label the landmark",
            'why': "Missed opportunity for clear landmark labeling",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Consider using heading as landmark label via aria-labelledby"
        },
        'WarnHeadingFoundInLandmarkButIsLabelledByAnAriaLabelledBy': {
            'title': "Landmark has heading but uses different element for label",
            'what': "Landmark has heading but uses different element for label",
            'why': "Confusing when heading doesn\'t match landmark label",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use the heading as the landmark label"
        },
        'WarnMultipleComplementaryLandmarksButNotAllHaveLabels': {
            'title': "Multiple complementary landmarks but not all labeled",
            'what': "Multiple complementary landmarks but not all labeled",
            'why': "Inconsistent labeling makes navigation difficult",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all complementary landmarks have unique labels"
        },
        'WarnMultipleNavLandmarksButNotAllHaveLabels': {
            'title': "Multiple navigation landmarks but not all labeled",
            'what': "Multiple navigation landmarks but not all labeled",
            'why': "Users cannot distinguish between navigation areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Label all navigation landmarks uniquely"
        },
        'WarnMultipleRegionLandmarksButNotAllHaveLabels': {
            'title': "Multiple region landmarks but not all labeled",
            'what': "Multiple region landmarks but not all labeled",
            'why': "Regions without labels are not exposed as landmarks",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all regions have labels or use different elements"
        },
        'ErrTextContrastAA': {
            'title': "Text fails WCAG AA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'what': "Text fails WCAG AA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This text with a contrast ratio of {ratio}:1 does not meet WCAG Level AA requirements. Normal text requires a minimum contrast ratio of 4.5:1 to pass Level AA. The foreground color ({fg}) against the background ({bg}) doesn\'t provide enough distinction for users with visual impairments.",
            'who': "Users with low vision who need higher contrast to distinguish text, users with color blindness, older users experiencing age-related vision changes, and users viewing content in bright sunlight or on low-quality displays",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3 Contrast (Minimum)'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AA requires at least 4.5:1 for normal text ({fontSize}px). To fix, darken the foreground color from {fg} or lighten the background from {bg}. Consider using #595959 or darker on white background, or #FFFFFF on backgrounds darker than #767676."
        },
        'ErrLargeTextContrastAA': {
            'title': "Large text fails WCAG AA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'what': "Large text fails WCAG AA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This large text ({fontSize}px) with a contrast ratio of {ratio}:1 does not meet WCAG Level AA requirements. Large text (24px+ or 18.66px+ bold) requires a minimum contrast ratio of 3:1 to pass Level AA. The foreground color ({fg}) against background ({bg}) doesn\'t provide enough distinction.",
            'who': "Users with low vision, color blindness, or age-related vision changes who struggle to distinguish text with insufficient contrast, even when the text is larger",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3 Contrast (Minimum)'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AA requires at least 3:1 for large text. To fix, adjust the foreground color from {fg} or the background from {bg}. Consider using #949494 or darker on white background for large text."
        },
        'ErrTextContrastAAA': {
            'title': "Text fails WCAG AAA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'what': "Text fails WCAG AAA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This text with a contrast ratio of {ratio}:1 does not meet WCAG Level AAA enhanced requirements. Normal text requires a minimum contrast ratio of 7:1 to pass Level AAA. The foreground color ({fg}) against the background ({bg}) doesn\'t provide optimal distinction for maximum accessibility.",
            'who': "Users with moderate visual impairments, including those with low vision, color blindness, or contrast sensitivity who benefit from enhanced contrast for optimal readability",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.6 Contrast (Enhanced)'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AAA requires at least 7:1 for normal text ({fontSize}px). To fix, use high contrast combinations like #333333 or darker on white background, or white text on backgrounds darker than #565656."
        },
        'ErrLargeTextContrastAAA': {
            'title': "Large text fails WCAG AAA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'what': "Large text fails WCAG AAA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This large text ({fontSize}px) with a contrast ratio of {ratio}:1 does not meet WCAG Level AAA enhanced requirements. Large text (24px+ or 18.66px+ bold) requires a minimum contrast ratio of 4.5:1 to pass Level AAA for enhanced accessibility.",
            'who': "Users with moderate visual impairments who benefit from enhanced contrast even for large text, ensuring optimal readability in all conditions",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.6 Contrast (Enhanced)'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AAA requires at least 4.5:1 for large text. To fix, adjust colors to achieve higher contrast, such as #767676 or darker on white background for large text at Level AAA."
        },
        'ErrColorStyleDefinedExplicitlyInElement': {
            'title': "Color-related styles defined inline",
            'what': "Color-related styles defined inline",
            'why': "Harder to maintain consistent color scheme",
            'who': "Users needing high contrast modes",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3'],
            'remediation': "Use CSS classes instead of inline styles"
        },
        'ErrColorStyleDefinedExplicitlyInStyleTag': {
            'title': "Color-related styles defined in style tag",
            'what': "Color-related styles defined in style tag",
            'why': "Embedded color styles harder to override for user preferences",
            'who': "Users with custom stylesheets, high contrast mode users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3'],
            'remediation': "Use external stylesheets for better maintainability"
        },
        'WarnColorRelatedStyleDefinedExplicitlyInElement': {
            'title': "Color-related CSS properties found in inline style attributes on HTML elements",
            'what': "Color-related CSS properties found in inline style attributes on HTML elements",
            'why': "Inline color styles bypass user stylesheets and browser extensions that help users with visual disabilities customize colors for better readability. Users who need high contrast, inverted colors, or specific color schemes cannot easily override inline styles. This also makes it difficult to implement dark mode, maintain consistent theming, or allow user color preferences.",
            'who': "Users with low vision who need high contrast or specific color combinations, users with color blindness who need to adjust problematic color pairs, users with dyslexia who benefit from specific background colors, users with light sensitivity who need dark themes, and users who rely on browser extensions for color customization",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3 Contrast (Minimum)', '1.4.8 Visual Presentation'],
            'remediation': "Move color-related styles (color, background-color, border-color, etc.) to external CSS files using classes. This allows users to override styles with their own stylesheets, enables easier theme switching, improves maintainability, and supports user preference media queries like prefers-color-scheme. Use CSS custom properties (variables) for colors to make customization even easier."
        },
        'WarnColorRelatedStyleDefinedExplicitlyInStyleTag': {
            'title': "Color-related CSS found in <style> tags within the HTML document instead of external stylesheets",
            'what': "Color-related CSS found in <style> tags within the HTML document instead of external stylesheets",
            'why': "Embedded styles in <style> tags are harder for users to override than external stylesheets and may not be cached efficiently. Users with visual disabilities who need custom color schemes must use more aggressive CSS overrides. This approach also makes it difficult to maintain consistent theming across pages and prevents users from disabling styles entirely if needed.",
            'who': "Users with low vision requiring custom color schemes, users with photosensitivity needing to modify bright colors, users with color blindness who need to adjust color combinations, and users who benefit from consistent, predictable styling across pages",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3 Contrast (Minimum)', '1.4.8 Visual Presentation'],
            'remediation': "Move color styles to external CSS files linked with <link> tags. Organize colors using CSS custom properties for easy theming. Implement user preference support with @media (prefers-color-scheme) and similar queries. Consider providing theme switcher functionality. Ensure your external stylesheets are properly cached for performance."
        },
        'ErrNoPrimaryLangAttr': {
            'title': "HTML element is missing the required lang attribute to identify the page\'s primary language",
            'what': "HTML element is missing the required lang attribute to identify the page\'s primary language",
            'why': "Both assistive technologies and browsers render text more accurately when the language is identified. Screen readers need to know which language pronunciation rules to use - without this, they may mispronounce words, use wrong inflections, or attempt to read content in the wrong language entirely. This can make content completely incomprehensible. Visual browsers need language information to display characters and scripts correctly, and search engines use it for proper indexing.",
            'who': "Screen reader users who may hear garbled pronunciation if the page language doesn\'t match their assistive technology\'s default language, users relying on automatic translation tools, users of voice assistants, and users with dyslexia using reading assistance tools",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1 Language of Page'],
            'remediation': "Add the lang attribute to the html element with the appropriate ISO 639-1 language code (e.g., lang=\"en\" for English, lang=\"es\" for Spanish, lang=\"fr\" for French). If the page uses multiple languages equally, use the language that appears first or is used for navigation."
        },
        'ErrEmptyLangAttr': {
            'title': "Lang attribute is empty",
            'what': "Lang attribute is empty",
            'why': "Empty lang provides no language information",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Add valid language code to lang attribute"
        },
        'ErrPrimaryLangUnrecognized': {
            'title': "Language code not recognized",
            'what': "Language code not recognized",
            'why': "Invalid language codes prevent proper pronunciation",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 639-1 language codes"
        },
        'ErrIncorrectlyFormattedPrimaryLang': {
            'title': "Language code incorrectly formatted",
            'what': "Language code incorrectly formatted",
            'why': "Malformed codes may not work properly",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1'],
            'remediation': "Use correct format: \"en-US\" or \"en\""
        },
        'ErrElementPrimaryLangNotRecognized': {
            'title': "Element has unrecognized language code",
            'what': "Element has unrecognized language code",
            'why': "Language changes won\'t be announced properly",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1', '3.1.2'],
            'remediation': "Use valid language codes"
        },
        'ErrEmptyLanguageAttribute': {
            'title': "HTML element has a lang attribute present but with no value (lang=\"\"), preventing screen readers from determining the page language",
            'what': "HTML element has a lang attribute present but with no value (lang=\"\"), preventing screen readers from determining the page language",
            'why': "An empty lang attribute is worse than no lang attribute because it explicitly tells assistive technologies there\'s no language specified, potentially causing screen readers to use incorrect pronunciation rules or fail to switch language synthesizers. This can make content completely unintelligible when read aloud.",
            'who': "Blind and low vision users using screen readers who need proper language identification for correct pronunciation, multilingual users who rely on automatic language switching in assistive technologies, users with dyslexia using reading tools that depend on language settings, and users of translation services",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1 Language of Page (Level A)'],
            'remediation': "Add a valid language code to the lang attribute (e.g., lang=\"en\" for English, lang=\"es\" for Spanish, lang=\"fr\" for French). Use the correct ISO 639-1 two-letter code or ISO 639-2 three-letter code. For the HTML element, always specify the primary document language. If the language is truly unknown, remove the lang attribute entirely rather than leaving it empty."
        },
        'ErrInvalidLanguageCode': {
            'title': "Language attribute contains invalid code \'{found}\' that doesn\'t conform to ISO 639 standards",
            'what': "Language attribute contains invalid code \'{found}\' that doesn\'t conform to ISO 639 standards",
            'why': "The language code \'{found}\' is not recognized as a valid ISO 639 language code. This prevents assistive technologies from properly processing content, causing screen readers to mispronounce words, use incorrect inflection patterns, or fail to switch language engines. This can make content difficult or impossible to understand when read aloud, especially if the content is in a non-English language but gets read with English pronunciation rules.",
            'who': "Blind and low vision users relying on screen readers for accurate pronunciation, multilingual users who need proper language identification for comprehension, users with reading disabilities using text-to-speech tools, and international users accessing content in multiple languages",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1 Language of Page (Level A)', '3.1.2 Language of Parts (Level AA)'],
            'remediation': "Replace \'{found}\' with a valid ISO 639-1 or ISO 639-2 language code. If \'{found}\' appears to be English, use \"en\". Common corrections: \"english\" → \"en\", \"spanish\" → \"es\", \"french\" → \"fr\", \"deutsch\" → \"de\", \"eng\" → \"en\". For regional variants use BCP 47 format (e.g., \"en-US\", \"en-GB\", \"es-MX\"). Check the official ISO 639 registry for the correct code."
        },
        'ErrNoPageLanguage': {
            'title': "HTML element is missing the lang attribute, preventing assistive technologies from determining the primary language of the page",
            'what': "HTML element is missing the lang attribute, preventing assistive technologies from determining the primary language of the page",
            'why': "Without a declared language, screen readers cannot determine which pronunciation rules and voice synthesizer to use, often defaulting to the user\'s system language which may be incorrect. This causes mispronunciation, incorrect inflection, and can make content unintelligible, especially for pages in languages different from the user\'s default settings.",
            'who': "Blind and low vision users using screen readers who need correct pronunciation for comprehension, international users accessing content in different languages, users with dyslexia or reading disabilities using assistive reading tools, and users of automatic translation services",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1 Language of Page (Level A)'],
            'remediation': "Add the lang attribute to the <html> element with the appropriate language code (e.g., <html lang=\"en\"> for English, <html lang=\"fr\"> for French). Use ISO 639-1 two-letter codes for modern languages. For XHTML, also include xml:lang with the same value. Ensure the declared language matches the actual primary language of your content. For multilingual pages, use the language that represents the majority of the content."
        },
        'ErrPrimaryLangAndXmlLangMismatch': {
            'title': "lang and xml:lang attributes don\'t match",
            'what': "lang and xml:lang attributes don\'t match",
            'why': "Conflicting language information",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Ensure both attributes have same value"
        },
        'ErrHreflangNotOnLink': {
            'title': "hreflang attribute on non-link element",
            'what': "hreflang attribute on non-link element",
            'why': "hreflang only works on links",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Move hreflang to anchor elements only"
        },
        'WarnEmptyLangAttribute': {
            'title': "Language attribute exists but appears to be empty or contains only whitespace",
            'what': "Language attribute exists but appears to be empty or contains only whitespace",
            'why': "An empty or whitespace-only lang attribute is ambiguous - it\'s unclear if the language is truly unknown or if this is an error. Screen readers may use fallback behavior that doesn\'t match the actual content language. This is less severe than a completely empty lang=\"\" but still prevents proper language identification. Browsers and assistive technologies cannot determine the intended language for pronunciation and processing.",
            'who': "Screen reader users who need proper language identification for correct pronunciation, multilingual users relying on language switching, users of translation tools, and users with reading disabilities using text-to-speech",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1 Language of Page (Level A)'],
            'remediation': "Either add a valid language code to the attribute (e.g., lang=\"en\") or remove the attribute entirely if the language is unknown. Check for common causes like template variables that didn\'t populate, CMS configuration issues, or JavaScript that clears lang attributes. Ensure any whitespace is removed and a valid ISO 639 language code is provided."
        },
        'WarnInvalidLangChange': {
            'title': "Language change indicated but with invalid or unrecognized language code",
            'what': "Language change indicated but with invalid or unrecognized language code",
            'why': "Invalid language codes on content sections prevent screen readers from switching language processors correctly. This can cause content in foreign languages to be pronounced using the wrong language rules, making it incomprehensible. For example, French text might be read with English pronunciation rules. Users expect language changes to be handled smoothly, and invalid codes break this functionality.",
            'who': "Multilingual screen reader users who need proper language switching, users reading content in multiple languages, users with reading disabilities using assistive tools, and users relying on proper pronunciation for comprehension",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.2 Language of Parts (Level AA)'],
            'remediation': "Verify all lang attributes on elements use valid ISO 639 language codes. Common fixes include correcting typos (\"fre\" → \"fr\"), using standard codes instead of full names (\"French\" → \"fr\"), and ensuring region codes are properly formatted (\"en-us\" → \"en-US\"). Test with screen readers to ensure language changes are announced and pronounced correctly."
        },
        'ErrRegionQualifierForPrimaryLangNotRecognized': {
            'title': "Region qualifier in primary language code not recognized (e",
            'what': "Region qualifier in primary language code not recognized (e.g., \"en-XY\")",
            'why': "Invalid region codes may cause incorrect pronunciation",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 3166-1 region codes like \"en-US\", \"en-GB\""
        },
        'ErrEmptyXmlLangAttr': {
            'title': "xml:lang attribute is empty",
            'what': "xml:lang attribute is empty",
            'why': "Empty xml:lang provides no language information",
            'who': "Screen reader users using XML/XHTML parsers",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Add valid language code to xml:lang attribute"
        },
        'ErrPrimaryXmlLangUnrecognized': {
            'title': "xml:lang language code not recognized",
            'what': "xml:lang language code not recognized",
            'why': "Invalid xml:lang codes prevent proper pronunciation",
            'who': "Screen reader users in XML/XHTML contexts",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 639-1 language codes"
        },
        'ErrRegionQualifierForPrimaryXmlLangNotRecognized': {
            'title': "Region qualifier in xml:lang not recognized",
            'what': "Region qualifier in xml:lang not recognized",
            'why': "Invalid region codes in xml:lang may cause issues",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 3166-1 region codes"
        },
        'ErrElementLangEmpty': {
            'title': "Element has empty lang attribute",
            'what': "Element has empty lang attribute",
            'why': "Empty lang on elements provides no language change information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.2'],
            'remediation': "Add valid language code or remove empty lang attribute"
        },
        'ErrElementRegionQualifierNotRecognized': {
            'title': "Element lang attribute has unrecognized region qualifier",
            'what': "Element lang attribute has unrecognized region qualifier",
            'why': "Invalid region codes may affect pronunciation",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.2'],
            'remediation': "Use valid ISO 3166-1 region codes"
        },
        'ErrHreflangAttrEmpty': {
            'title': "hreflang attribute is empty on link",
            'what': "hreflang attribute is empty on link",
            'why': "Empty hreflang provides no language information for the linked resource",
            'who': "Screen reader users, search engines",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Add valid language code or remove empty hreflang attribute"
        },
        'ErrPrimaryHrefLangNotRecognized': {
            'title': "hreflang language code not recognized",
            'what': "hreflang language code not recognized",
            'why': "Invalid hreflang codes provide incorrect information about linked resources",
            'who': "Screen reader users, search engines",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 639-1 language codes"
        },
        'ErrRegionQualifierForHreflangUnrecognized': {
            'title': "hreflang region qualifier not recognized",
            'what': "hreflang region qualifier not recognized",
            'why': "Invalid region codes in hreflang attributes",
            'who': "Screen reader users, search engines",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 3166-1 region codes"
        },
        'ErrOutlineIsNoneOnInteractiveElement': {
            'title': "Interactive element has CSS outline:none removing the default focus indicator",
            'what': "Interactive element has CSS outline:none removing the default focus indicator",
            'why': "People with mobility disabilities use keyboard or keyboard-alternate devices to navigate rather than a mouse. Visible focus indicators are essential as they perform the same function as a mouse cursor. Without focus indicators, users cannot tell where they are on the page or when interactive elements are focused. This makes keyboard navigation impossible and can completely prevent access to functionality.",
            'who': "Sighted users with motor disabilities navigating with keyboard or keyboard-alternate devices, users who prefer keyboard navigation for efficiency, users with temporary injuries preventing mouse use, and users of assistive technologies that rely on keyboard navigation",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7 Focus Visible'],
            'remediation': "Never use outline:none without providing an alternative visible focus indicator. The focus indicator must be clearly visible with at least 3:1 contrast ratio with the background, be at least 2 pixels thick, and ideally be offset from the element to maximize visibility. Consider using CSS :focus-visible for better control over when focus indicators appear."
        },
        'ErrNoOutlineOffsetDefined': {
            'title': "No outline offset defined for focus",
            'what': "No outline offset defined for focus",
            'why': "Focus indicator may be hard to see",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7'],
            'remediation': "Add outline-offset for better visibility"
        },
        'WarnZeroOutlineOffset': {
            'title': "Outline offset is set to zero",
            'what': "Outline offset is set to zero",
            'why': "Focus indicator touches element edge",
            'who': "Keyboard users with low vision",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7'],
            'remediation': "Use positive outline-offset value"
        },
        'ErrPositiveTabindex': {
            'title': "Element uses a positive tabindex value (greater than 0)",
            'what': "Element uses a positive tabindex value (greater than 0)",
            'why': "Positive tabindex values override the natural tab order of the page, creating an unpredictable navigation experience. When you use tabindex=\"1\" or higher, that element jumps to the front of the tab order, regardless of where it appears visually. This breaks the expected top-to-bottom, left-to-right flow that keyboard users rely on. Users might tab from the header straight to a random form field in the middle of the page, then jump to the footer, then back to the navigation. This confusing order makes it easy to miss content, difficult to predict where focus will go next, and nearly impossible to maintain as the page evolves.",
            'who': "Keyboard users who expect logical, predictable navigation order, screen reader users who rely on consistent focus flow, users with motor disabilities who need efficient keyboard navigation, users with cognitive disabilities who are confused by unpredictable focus movement, and developers maintaining the code who must manage complex tabindex values",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3 Focus Order'],
            'remediation': "Remove positive tabindex values and use only tabindex=\"0\" (adds element to natural tab order) or tabindex=\"-1\" (removes from tab order but allows programmatic focus). Let the DOM order determine tab order - if elements need to be reached in a different order, rearrange them in the HTML. If visual order must differ from DOM order for design reasons, consider using CSS Grid or Flexbox with the order property, but be cautious as this can still cause accessibility issues."
        },
        'ErrNegativeTabindex': {
            'title': "Negative tabindex on interactive element",
            'what': "Negative tabindex on interactive element",
            'why': "Element removed from tab order",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Use tabindex=\"0\" for interactive elements"
        },
        'ErrTabindexOfZeroOnNonInteractiveElement': {
            'title': "tabindex=\"0\" on non-interactive element",
            'what': "tabindex=\"0\" on non-interactive element",
            'why': "Non-interactive elements in tab order",
            'who': "Keyboard users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove tabindex from non-interactive elements"
        },
        'ErrWrongTabindexForInteractiveElement': {
            'title': "Inappropriate tabindex on interactive element",
            'what': "Inappropriate tabindex on interactive element",
            'why': "Tab order doesn\'t match visual order",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Let natural tab order work, avoid tabindex"
        },
        'ErrTTabindexOnNonInteractiveElement': {
            'title': "Tabindex attribute on non-interactive element",
            'what': "Tabindex attribute on non-interactive element",
            'why': "Non-interactive elements should not be in tab order unless they serve a specific purpose",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove tabindex from non-interactive elements or make them properly interactive"
        },
        'ErrInvalidTabindex': {
            'title': "Element has a tabindex attribute with an invalid value (non-numeric or decimal)",
            'what': "Element has a tabindex attribute with an invalid value (non-numeric or decimal)",
            'why': "Invalid tabindex values are ignored by browsers, potentially making interactive elements unreachable by keyboard or creating unpredictable focus behavior. This can completely block keyboard users from accessing functionality. The element might be skipped during tabbing, receive focus unexpectedly, or behave differently across browsers.",
            'who': "Keyboard users who cannot reach or interact with the element, screen reader users who may miss important interactive controls, users with motor disabilities relying on keyboard navigation, and users who cannot use a mouse",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3 Focus Order (Level A)'],
            'remediation': "Use only valid integer values for tabindex: \"0\" to include in natural tab order, \"-1\" to remove from tab order but allow programmatic focus, or remove the tabindex attribute entirely if the element shouldn\'t be focusable. Never use decimal values (1.5), text (\"first\"), or empty values (tabindex=\"\")."
        },
        'ErrNoFocusIndicator': {
            'title': "Interactive element has no visible focus indicator when focused, making keyboard navigation impossible to track",
            'what': "Interactive element has no visible focus indicator when focused, making keyboard navigation impossible to track",
            'why': "Focus indicators show keyboard users where they are on the page - without them, it\'s like navigating in the dark. Users cannot see which element will be activated when they press Enter or Space, making it impossible to navigate confidently. They might activate the wrong control, skip important content, or become completely lost on the page. This is especially critical for forms where activating the wrong button could submit incomplete data or cancel an operation.",
            'who': "Keyboard users who need to see their current position, users with attention or memory disabilities who lose track of focus position, users with low vision who need clear visual indicators, users with motor disabilities who need to carefully track navigation, and any user who temporarily cannot use a mouse",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7 Focus Visible (Level AA)'],
            'remediation': "Ensure all interactive elements have a visible focus indicator using CSS :focus styles. Add outline, border, background color, or box-shadow changes. Make focus indicators clearly visible with sufficient color contrast (3:1 minimum). Never use outline: none without providing an alternative indicator. Consider using :focus-visible for keyboard-only focus styles. Test by tabbing through your entire page to ensure every interactive element shows focus clearly."
        },
        'ErrTransparentFocusIndicator': {
            'title': "Focus indicator uses transparent or nearly transparent color, making it effectively invisible",
            'what': "Focus indicator uses transparent or nearly transparent color, making it effectively invisible",
            'why': "A transparent focus indicator is functionally the same as no focus indicator - users cannot see where keyboard focus is located. This might occur from using rgba with 0 or very low alpha values, setting outline-color to transparent, or using colors that match the background. The focus indicator exists technically but provides no practical benefit to users trying to navigate.",
            'who': "Keyboard users who need visible focus indicators to navigate, users with low vision who need clear visual cues, users with color blindness who may already struggle with certain color combinations, and users with cognitive disabilities who need obvious focus indicators",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7 Focus Visible (Level AA)'],
            'remediation': "Use opaque colors with sufficient contrast for focus indicators. Replace transparent outlines with visible colors, ensure at least 3:1 contrast ratio between focus indicator and background, use solid colors or high alpha values (0.7 or higher) for rgba colors. Test focus indicators on different backgrounds across your site. Consider using box-shadow or background changes as additional focus indicators."
        },
        'WarnFontNotInRecommenedListForA11y': {
            'title': "Font not in recommended accessibility list",
            'what': "Font not in recommended accessibility list",
            'why': "Some fonts are harder to read",
            'who': "Users with dyslexia, low vision",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8'],
            'remediation': "Use clear, simple fonts like Arial, Verdana"
        },
        'WarnFontsizeIsBelow16px': {
            'title': "Font size below 16px",
            'what': "Font size below 16px",
            'why': "Small text is hard to read",
            'who': "Users with low vision, older users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.4'],
            'remediation': "Use minimum 16px for body text"
        },
        'DiscoFontFound': {
            'title': "Font \'{found}\' detected in use on the page for accessibility review",
            'what': "Font \'{found}\' detected in use on the page for accessibility review",
            'why': "Tracking font usage helps identify typography choices that may affect readability. Font \'{found}\' has been detected on this page. While not inherently an accessibility issue, certain fonts can be harder to read for users with dyslexia, low vision, or reading disabilities. This discovery item documents which fonts are in use so they can be evaluated for legibility, character distinction, and overall readability as part of a comprehensive accessibility review.",
            'who': "This information helps accessibility auditors and developers understand the typography landscape of the page, particularly relevant for users with dyslexia who benefit from clear sans-serif fonts, users with low vision who need good character distinction, and users with reading disabilities who benefit from consistent, readable typefaces",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "No action required - this is informational only. The font \'{found}\' is currently in use. For accessibility best practices, consider using fonts with clear character distinction (avoiding ambiguous characters like I/l/1), adequate spacing between letters, and good readability at various sizes. Popular accessible fonts include Arial, Verdana, Tahoma, and specialized dyslexia-friendly fonts like OpenDyslexic. Document your font choices and test readability with actual users when possible."
        },
        'WarnTitleAttrFound': {
            'title': "Title attribute is being used on an element, which has significant accessibility limitations",
            'what': "Title attribute is being used on an element, which has significant accessibility limitations",
            'why': "Title attributes are problematic for accessibility: they don\'t appear on mobile devices or touch screens, keyboard users cannot access them without a mouse, screen readers handle them inconsistently (some ignore them, some read them), they disappear quickly making them hard to read for users with motor or cognitive disabilities, they cannot be styled or resized for users with low vision, and they\'re not translated by browser translation tools. Using title attributes for important information excludes many users from accessing that content.",
            'who': "Mobile and touch screen users who never see title tooltips, keyboard-only users who cannot hover to trigger tooltips, screen reader users who may not hear title content reliably, users with motor disabilities who cannot hover precisely, users with cognitive disabilities who need more time to read, users with low vision who cannot resize tooltip text, and users relying on translation tools",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2 Labels or Instructions (Level A)', '4.1.2 Name', 'Role', 'Value (Level A)'],
            'remediation': "Replace title attributes with visible, persistent text that all users can access. For form fields, use visible <label> elements or aria-label. For links and buttons, ensure the visible text is descriptive. For abbreviations, provide the full text on first use. For supplementary information, use visible helper text, details/summary elements, or clickable info icons. Only use title attributes for progressive enhancement where the information duplicates visible content. Never rely on title alone for important information."
        },
        'ErrTitleAsOnlyLabel': {
            'title': "Form element is using title attribute as its only accessible label, which is insufficient for accessibility",
            'what': "Form element is using title attribute as its only accessible label, which is insufficient for accessibility",
            'why': "When title is the only labeling mechanism for a form field, many users cannot determine what information to enter. Title attributes are not announced by screen readers when navigating forms in normal mode, don\'t appear on mobile devices, cannot be accessed by keyboard users, and disappear too quickly for many users to read. This makes the form field essentially unlabeled for a large portion of users, preventing them from completing forms successfully.",
            'who': "Screen reader users who won\'t hear the field\'s purpose when navigating the form, mobile users who cannot see title tooltips at all, keyboard users who cannot hover to see the tooltip, users with motor disabilities who struggle with precise hovering, users with cognitive disabilities who need persistent labels as memory aids, and voice control users who cannot reference fields without visible labels",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1 Non-text Content (Level A)', '1.3.1 Info and Relationships (Level A)', '4.1.2 Name', 'Role', 'Value (Level A)'],
            'remediation': "Add a proper visible <label> element associated with the form field using the \'for\' attribute. If space is limited, use placeholder text in addition to (not instead of) a label. For complex layouts, consider using aria-labelledby to reference existing visible text. If you must use aria-label, ensure it\'s descriptive and consider adding visible text for sighted users. Never rely solely on title attributes for labeling form fields - they should only supplement proper labels, not replace them."
        },
        'ErrTitleAttrFound': {
            'title': "Title attribute used for important information",
            'what': "Title attribute used for important information",
            'why': "Title attributes are not reliably accessible",
            'who': "Mobile users, keyboard users, some screen readers",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2', '4.1.2'],
            'remediation': "Use visible text or proper labels instead"
        },
        'ErrEmptyTitleAttr': {
            'title': "Empty title attribute",
            'what': "Empty title attribute",
            'why': "Empty titles provide no information",
            'who': "Users expecting tooltip information",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2'],
            'remediation': "Remove empty title attributes"
        },
        'ErrIframeWithNoTitleAttr': {
            'title': "Iframe element is missing the required title attribute",
            'what': "Iframe element is missing the required title attribute",
            'why': "Iframes embed external content like videos, maps, or forms within your page. Without a title attribute, screen reader users hear only \"iframe\" with no indication of what content it contains. This is like having a door with no label - users don\'t know what\'s behind it. They must enter the iframe and explore its content to understand its purpose, which is time-consuming and may be confusing if the iframe content lacks context. For pages with multiple iframes, users cannot distinguish between them or decide which ones are worth exploring.",
            'who': "Screen reader users who need to understand what each iframe contains before deciding whether to interact with it, keyboard users navigating through iframes who need context about embedded content, users with cognitive disabilities who need clear labeling of all page regions, and users on slow connections who may experience delays loading iframe content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.1 Bypass Blocks', '4.1.2 Name', 'Role', 'Value'],
            'remediation': "Add a title attribute to every iframe that concisely describes its content or purpose (e.g., title=\"YouTube video: Product demonstration\", title=\"Google Maps: Office location\", title=\"Payment form\"). The title should be unique if there are multiple iframes. Keep it brief but descriptive enough that users understand what the iframe contains without having to enter it. For decorative iframes (rare), you can use title=\"\" and add tabindex=\"-1\" to remove it from tab order."
        },
        'ErrEmptyPageTitle': {
            'title': "Page title element is empty",
            'what': "Page title element is empty",
            'why': "Empty titles provide no information about page content",
            'who': "Screen reader users, users with cognitive disabilities",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.2'],
            'remediation': "Add descriptive text to title element"
        },
        'WarnPageTitleTooShort': {
            'title': "Page title is very short (under 10 characters), potentially not descriptive enough",
            'what': "Page title is very short (under 10 characters), potentially not descriptive enough",
            'why': "Very short page titles like \"Home\", \"About\", or \"Contact\" don\'t provide enough context, especially when users have multiple tabs open or are browsing history. Users can\'t distinguish between different sites with the same generic titles. Screen reader users hearing page titles announced need more descriptive information to understand where they are. Search results become less useful when titles aren\'t descriptive.",
            'who': "Users with multiple browser tabs who need to distinguish between pages, screen reader users who rely on descriptive titles for context, users browsing history or bookmarks, users finding content through search engines, and users with cognitive disabilities who need clear page identification",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.2 Page Titled (Level A)'],
            'remediation': "Expand short titles to be more descriptive by including the site name and page purpose (change \"Home\" to \"ACME Corp - Home\", \"About\" to \"About Our Services - ACME Corp\"). Aim for 20-60 characters that clearly describe the page content. Ensure each page has a unique, descriptive title that makes sense out of context."
        },
        'WarnPageTitleTooLong': {
            'title': "Page title exceeds 60 characters, which may be truncated in browser tabs and search results",
            'what': "Page title exceeds 60 characters, which may be truncated in browser tabs and search results",
            'why': "Long titles get cut off in browser tabs (typically around 30 characters) and search engine results (typically 50-60 characters), losing important information. Users see \"This is a very long page title that...\" instead of the complete title. The most important information might be at the end and never seen. Screen reader users have to listen to lengthy titles repeatedly when navigating between windows.",
            'who': "Users with multiple tabs open who see truncated titles, users searching for content who can\'t see full titles in results, screen reader users who must listen to long titles repeatedly, mobile users with even less space for title display, and users trying to share links where long titles may be problematic",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.2 Page Titled (Level A)'],
            'remediation': "Keep titles concise, ideally under 60 characters. Place the most important, unique information first. Use a format like \"Page Topic - Category - Site Name\" with the most specific information first. Remove unnecessary words like \"Welcome to\" or \"This page contains\". Test how titles appear in browser tabs and search results to ensure key information is visible."
        },
        'WarnMultipleTitleElements': {
            'title': "Multiple <title> elements found in the document head, which may cause unpredictable behavior",
            'what': "Multiple <title> elements found in the document head, which may cause unpredictable behavior",
            'why': "When multiple title elements exist, browsers may use only the first or last one unpredictably, causing inconsistent page identification. This often happens with content management systems or when scripts dynamically add titles. Different browsers and assistive technologies may choose different titles, creating an inconsistent experience. SEO is negatively affected as search engines may index the wrong title.",
            'who': "All users seeing inconsistent titles in browser tabs, screen reader users who may hear different titles than what\'s visually displayed, users bookmarking pages with incorrect titles, search engine users finding pages with wrong titles, and developers debugging title-related issues",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.2 Page Titled (Level A)'],
            'remediation': "Remove all duplicate <title> elements, keeping only one in the document head. Check for scripts that might be adding titles dynamically. Ensure your CMS or framework isn\'t creating duplicate titles. If using a single-page application, manage title changes through a single mechanism. Validate that only one title element exists after the page fully loads."
        },
        'WarnIframeTitleNotDescriptive': {
            'title': "Iframe has a title attribute but it\'s generic or not descriptive (e",
            'what': "Iframe has a title attribute but it\'s generic or not descriptive (e.g., \"iframe\", \"frame\", \"embedded content\")",
            'why': "Generic iframe titles like \"iframe\" or \"embedded\" provide no useful information about the embedded content. Screen reader users hear these unhelpful titles and must enter the iframe to understand what it contains. With multiple iframes, users cannot distinguish between them or determine which ones are worth exploring. This wastes time and creates confusion, especially if iframes contain important functionality like payment forms or videos.",
            'who': "Screen reader users trying to understand and navigate between multiple iframes, keyboard users who encounter iframes in tab order, users with cognitive disabilities who need clear labeling of all content regions, and users trying to navigate efficiently through complex pages",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.1 Bypass Blocks (Level A)', '4.1.2 Name', 'Role', 'Value (Level A)'],
            'remediation': "Replace generic titles with descriptive ones that explain the iframe\'s content or purpose. Use specific descriptions like title=\"YouTube video: Product demo\", title=\"Customer feedback form\", title=\"Live chat support\", or title=\"Interactive map of office locations\". Each iframe title should be unique if there are multiple iframes. Avoid redundant words like \"iframe\" in the title since the element type is already announced."
        },
        'ErrAriaLabelMayNotBeFoundByVoiceControl': {
            'title': "aria-label doesn\'t match visible text",
            'what': "aria-label doesn\'t match visible text",
            'why': "Voice control users can\'t activate element",
            'who': "Voice control users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3'],
            'remediation': "Ensure aria-label includes visible text"
        },
        'ErrLabelMismatchOfAccessibleNameAndLabelText': {
            'title': "Accessible name doesn\'t match visible label",
            'what': "Accessible name doesn\'t match visible label",
            'why': "Confusing for voice control users",
            'who': "Voice control users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3'],
            'remediation': "Make accessible name match visible text"
        },
        'DiscoStyleAttrOnElements': {
            'title': "Inline styles detected",
            'what': "Inline styles detected",
            'why': "May affect responsive design and user customization",
            'who': "Users with custom stylesheets",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Consider moving to CSS classes"
        },
        'DiscoStyleElementOnPage': {
            'title': "Style element found in page",
            'what': "Style element found in page",
            'why': "Embedded styles harder to override",
            'who': "Users needing custom styles",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Consider external stylesheets"
        },
        'DiscoFoundJS': {
            'title': "JavaScript detected on page",
            'what': "JavaScript detected on page",
            'why': "Functionality should work without JavaScript",
            'who': "Users with JavaScript disabled",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Ensure progressive enhancement"
        },
        'ErrButtonTextLowContrast': {
            'title': "Button text has insufficient color contrast with button background",
            'what': "Button text has insufficient color contrast with button background",
            'why': "Users with low vision, color blindness, or viewing the page in bright sunlight may not be able to read button labels if contrast is insufficient. This prevents users from understanding button purpose and can make critical functions inaccessible. Buttons are action triggers, so being unable to read them can prevent task completion.",
            'who': "Users with low vision, color blindness, age-related vision changes, and anyone viewing content in poor lighting conditions or on low-quality displays",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3 Contrast (Minimum)'],
            'remediation': "Ensure button text has at least 4.5:1 contrast ratio with the button background for normal text, or 3:1 for large text (18pt or 14pt bold). For Level AAA compliance, use 7:1 for normal text. Test in different states (hover, focus, active) as contrast requirements apply to all states. Avoid using color alone to indicate button state."
        },
        'ErrButtonNoVisibleFocus': {
            'title': "Button lacks visible focus indicator when focused",
            'what': "Button lacks visible focus indicator when focused",
            'why': "Keyboard users need visible focus indicators to know which element is currently selected. Without clear focus indication on buttons, users cannot tell which button will be activated when they press Enter or Space, leading to errors and inability to use the interface effectively.",
            'who': "Users with motor disabilities using keyboard navigation, users who cannot use a mouse, power users who prefer keyboard navigation, and users of assistive technologies",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7 Focus Visible'],
            'remediation': "Ensure buttons have a clearly visible focus indicator with at least 3:1 contrast against the background. The indicator should be at least 2 pixels thick and not rely on color alone. Never remove focus indicators without providing an alternative. Consider using :focus-visible for refined focus management."
        },
        'WarnButtonGenericText': {
            'title': "Button uses generic text like \"Click here\", \"Submit\", or \"OK\" without context",
            'what': "Button uses generic text like \"Click here\", \"Submit\", or \"OK\" without context",
            'why': "Screen reader users often navigate by pulling up a list of all buttons on a page. Generic button text provides no information about what the button does when heard out of context. Users cannot determine the button\'s purpose without additional exploration, slowing navigation and potentially causing errors.",
            'who': "Screen reader users navigating by buttons list, users with cognitive disabilities who need clear labels, and screen magnifier users who may not see surrounding context",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.6 Headings and Labels'],
            'remediation': "Use descriptive button text that explains the action (e.g., \"Submit registration form\" instead of \"Submit\", \"Download PDF report\" instead of \"Download\"). The button text should make sense when read in isolation. If visual design constraints require short text, use aria-label to provide a more descriptive accessible name."
        },
        'ErrLinkTextNotDescriptive': {
            'title': "Link text does not adequately describe the link\'s destination or purpose",
            'what': "Link text does not adequately describe the link\'s destination or purpose",
            'why': "Users need to understand where a link will take them before activating it. Vague link text like \"click here\" or \"read more\" provides no information about the destination. Screen reader users often navigate by pulling up a list of all links, where non-descriptive text becomes meaningless out of context.",
            'who': "Screen reader users navigating by links list, users with cognitive disabilities who need clear navigation cues, and users with motor disabilities who need to make informed decisions before activating links",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.4 Link Purpose (In Context)'],
            'remediation': "Write link text that describes the destination or action (e.g., \"Download 2024 annual report\" instead of \"Download\"). Avoid generic phrases. If design constraints require short link text, provide additional context through aria-label or aria-describedby, or ensure surrounding text provides context."
        },
        'ErrLinkOpensNewWindowNoWarning': {
            'title': "Link opens in new window/tab without warning users",
            'what': "Link opens in new window/tab without warning users",
            'why': "Unexpectedly opening new windows can disorient users, especially those using screen readers or magnification. Users may not realize a new window opened and become confused when the back button doesn\'t work. This is particularly problematic for users with cognitive disabilities or those unfamiliar with browser behaviors.",
            'who': "Screen reader users who may not notice the context change, users with cognitive disabilities who may become disoriented, users with motor disabilities who have difficulty managing multiple windows, and novice computer users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.2.2 On Input'],
            'remediation': "Add visible text or an icon indicating the link opens in a new window. Include this information in the accessible name (e.g., \"Annual report (opens in new window)\"). Consider whether opening in a new window is necessary - often it\'s better to open in the same window and let users control this behavior."
        },
        'WarnLinkLooksLikeButton': {
            'title': "Link is styled to look like a button but uses anchor element",
            'what': "Link is styled to look like a button but uses anchor element",
            'why': "Links and buttons have different behaviors - links navigate to new locations while buttons trigger actions. When links look like buttons, users may have incorrect expectations about what will happen. Keyboard users expect Space key to activate buttons but it doesn\'t work on links.",
            'who': "Keyboard users who expect button behavior, screen reader users who hear it announced as a link but see it as a button, and users with cognitive disabilities who rely on consistent interactions",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1 Info and Relationships'],
            'remediation': "If the element performs an action (submit form, open dialog), use a button element. If it navigates to a new URL, keep it as a link but consider whether button styling is appropriate. Ensure keyboard behavior matches the element type."
        },
        'DiscoPDFLinksFound': {
            'title': "Links to PDF documents detected on page",
            'what': "Links to PDF documents detected on page",
            'why': "PDF documents often have accessibility issues and may not be accessible to all users",
            'who': "Screen reader users, users with disabilities who have difficulty with PDF formats",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.1.1', '1.3.1', '2.1.1', '2.4.1'],
            'remediation': "Ensure PDFs are accessible (tagged, structured, with text content) or provide HTML alternatives"
        },
        'ErrNoPageTitle': {
            'title': "Page has no <title> element in the document head",
            'what': "Page has no <title> element in the document head",
            'why': "The page title is the first thing screen reader users hear when a page loads, and it appears in browser tabs, bookmarks, and search results. Without a title, users cannot identify the page in their browser history, distinguish between multiple open tabs, or understand what page they\'re on when arriving from a link. Screen reader users announcing \"Untitled document\" have no context about where they are. This is like opening a book with no title on the cover or spine - you don\'t know what you\'re reading until you dive into the content. The title is critical for orientation and navigation.",
            'who': "Screen reader users who rely on titles for page identification and orientation, users with cognitive disabilities who need clear page identification, users managing multiple browser tabs who need to distinguish between pages, users with memory issues using browser history to return to pages, and all users when bookmarking or sharing pages",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.2 Page Titled'],
            'remediation': "Add a <title> element within the <head> section of your HTML. Create descriptive, unique titles that identify both the page content and the site. Use a consistent pattern like \"Page Topic - Site Name\". Put the unique page information first since it\'s most important. Keep titles concise (under 60 characters) but descriptive. Avoid generic titles like \"Home\" or \"Page 1\". The title should make sense when read out of context in a list of bookmarks or search results."
        },
        'ErrMultiplePageTitles': {
            'title': "Multiple title elements found in document",
            'what': "Multiple title elements found in document",
            'why': "Multiple titles may confuse assistive technologies",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.2'],
            'remediation': "Use only one title element per page"
        },
        '[unique_identifier]': {
            'title': "[what the issue is]",
            'what': "[what the issue is]",
            'why': "[accessibility impact]",
            'who': "[affected user groups]",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['[comma-separated list]'],
            'remediation': "[remediation steps]"
        },
    }
    
    # Get the specific description for this error type
    if error_type in descriptions:
        desc = descriptions[error_type].copy()
        
        # Replace metadata placeholders in the description
        for key in ['title', 'what', 'why', 'who', 'remediation']:
            if key in desc and isinstance(desc[key], str):
                # Replace {found} with actual font name for font issues
                if '{found}' in desc[key] and 'found' in metadata:
                    desc[key] = desc[key].replace('{found}', str(metadata.get('found', 'unknown')))
                # Replace other metadata placeholders
                for meta_key, meta_value in metadata.items():
                    placeholder = '{' + meta_key + '}'
                    if placeholder in desc[key]:
                        desc[key] = desc[key].replace(placeholder, str(meta_value))
        
        return desc
    
    # Default fallback
    return {
        'title': f"Accessibility issue: {error_type}",
        'what': f"An accessibility issue of type '{error_type}' was detected.",
        'why': "This issue may create barriers for users with disabilities.",
        'who': "Users with disabilities",
        'impact': ImpactScale.MEDIUM.value,
        'wcag': [],
        'remediation': "Review the specific issue and apply appropriate accessibility fixes."
    }


def format_issue_for_display(issue_code: str, violation_data: Dict[str, Any]) -> Dict[str, str]:
    """
    Format an issue with all its metadata for display
    """
    # Get the detailed description using the metadata
    description = get_detailed_issue_description(issue_code, violation_data)
    
    # Add any additional runtime data
    description['issue_id'] = issue_code
    description['location'] = violation_data.get('xpath', 'Not specified')
    description['element'] = violation_data.get('element', 'Not specified')
    description['url'] = violation_data.get('url', 'Not specified')
    
    return description
