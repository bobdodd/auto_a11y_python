"""
Report formatters for different output formats
"""

import json
import csv
from typing import Dict, Any, List
from datetime import datetime
from pathlib import Path
import logging
from io import StringIO

logger = logging.getLogger(__name__)


class BaseFormatter:
    """Base class for report formatters"""
    
    def __init__(self, config: Dict[str, Any]):
        """Initialize formatter with config"""
        self.config = config
        self.extension = 'txt'
    
    def format_page_report(self, data: Dict[str, Any]) -> str:
        """Format page report data"""
        raise NotImplementedError
    
    def format_website_report(self, data: Dict[str, Any]) -> str:
        """Format website report data"""
        raise NotImplementedError
    
    def format_project_report(self, data: Dict[str, Any]) -> str:
        """Format project report data"""
        raise NotImplementedError
    
    def format_summary_report(self, data: Dict[str, Any]) -> str:
        """Format summary report data"""
        raise NotImplementedError


class HTMLFormatter(BaseFormatter):
    """HTML report formatter"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.extension = 'html'
    
    def format_page_report(self, data: Dict[str, Any]) -> str:
        """Generate HTML report for a page"""
        
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Accessibility Report - {data['page']['url']}</title>
    {self._get_css()}
</head>
<body>
    <div class="container">
        <header>
            <h1>Accessibility Report</h1>
            <div class="metadata">
                <p><strong>Page:</strong> <a href="{data['page']['url']}" target="_blank">{data['page']['url']}</a></p>
                <p><strong>Website:</strong> {data['website']['name']}</p>
                <p><strong>Project:</strong> {data['project']['name']}</p>
                <p><strong>Generated:</strong> {data['generated_at']}</p>
            </div>
        </header>
        
        {self._format_summary_section(data['statistics'])}
        
        {self._format_violations_section(data['violations'])}
        
        {self._format_warnings_section(data['warnings'])}
        
        {self._format_ai_findings_section(data.get('ai_findings', []))}
        
        {self._format_passes_section(data['passes'])}
        
        <footer>
            <p>Generated by Auto A11y Python - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </footer>
    </div>
</body>
</html>"""
        
        return html
    
    def format_website_report(self, data: Dict[str, Any]) -> str:
        """Generate HTML report for a website"""
        
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Website Accessibility Report - {data['website']['name']}</title>
    {self._get_css()}
</head>
<body>
    <div class="container">
        <header>
            <h1>Website Accessibility Report</h1>
            <div class="metadata">
                <p><strong>Website:</strong> {data['website']['name']} ({data['website']['base_url']})</p>
                <p><strong>Project:</strong> {data['project']['name']}</p>
                <p><strong>Pages Tested:</strong> {data['statistics']['total_pages']}</p>
                <p><strong>Generated:</strong> {data['generated_at']}</p>
            </div>
        </header>
        
        <section class="summary">
            <h2>Summary</h2>
            <div class="stats-grid">
                <div class="stat-card violations">
                    <h3>{data['statistics']['total_violations']}</h3>
                    <p>Total Violations</p>
                </div>
                <div class="stat-card warnings">
                    <h3>{data['statistics']['total_warnings']}</h3>
                    <p>Total Warnings</p>
                </div>
                <div class="stat-card passes">
                    <h3>{data['statistics']['total_passes']}</h3>
                    <p>Total Passes</p>
                </div>
                <div class="stat-card average">
                    <h3>{data['statistics']['average_violations']:.1f}</h3>
                    <p>Avg Violations/Page</p>
                </div>
            </div>
        </section>
        
        {self._format_violation_types_section(data['violation_types'])}
        
        {self._format_pages_table(data['pages'])}
        
        <footer>
            <p>Generated by Auto A11y Python - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </footer>
    </div>
</body>
</html>"""
        
        return html
    
    def format_project_report(self, data: Dict[str, Any]) -> str:
        """Generate HTML report for a project"""
        
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Accessibility Report - {data['project']['name']}</title>
    {self._get_css()}
</head>
<body>
    <div class="container">
        <header>
            <h1>Project Accessibility Report</h1>
            <div class="metadata">
                <p><strong>Project:</strong> {data['project']['name']}</p>
                <p><strong>Description:</strong> {data['project'].get('description', 'N/A')}</p>
                <p><strong>Generated:</strong> {data['generated_at']}</p>
            </div>
        </header>
        
        <section class="summary">
            <h2>Project Summary</h2>
            <div class="stats-grid">
                <div class="stat-card">
                    <h3>{data['statistics']['total_websites']}</h3>
                    <p>Websites</p>
                </div>
                <div class="stat-card">
                    <h3>{data['statistics']['total_pages']}</h3>
                    <p>Pages Tested</p>
                </div>
                <div class="stat-card violations">
                    <h3>{data['statistics']['total_violations']}</h3>
                    <p>Total Violations</p>
                </div>
                <div class="stat-card average">
                    <h3>{data['statistics']['average_violations_per_page']:.1f}</h3>
                    <p>Avg Violations/Page</p>
                </div>
            </div>
        </section>
        
        {self._format_websites_section(data['websites'])}
        
        <footer>
            <p>Generated by Auto A11y Python - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </footer>
    </div>
</body>
</html>"""
        
        return html
    
    def format_summary_report(self, data: Dict[str, Any]) -> str:
        """Generate executive summary report"""
        
        projects_html = ""
        for project in data['projects']:
            projects_html += f"""
            <tr>
                <td>{project['name']}</td>
                <td>{project['websites']}</td>
                <td>{project['pages_tested']}</td>
                <td class="violations">{project['violations']}</td>
            </tr>"""
        
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Accessibility Executive Summary</title>
    {self._get_css()}
</head>
<body>
    <div class="container">
        <header>
            <h1>Accessibility Executive Summary</h1>
            <p class="generated">Generated: {data['generated_at']}</p>
        </header>
        
        <section class="overview">
            <h2>Overview</h2>
            <div class="stats-grid">
                <div class="stat-card">
                    <h3>{len(data['projects'])}</h3>
                    <p>Projects</p>
                </div>
                <div class="stat-card">
                    <h3>{data['total_pages_tested']}</h3>
                    <p>Pages Tested</p>
                </div>
                <div class="stat-card violations">
                    <h3>{data['total_violations']}</h3>
                    <p>Total Violations</p>
                </div>
            </div>
        </section>
        
        <section class="projects">
            <h2>Projects</h2>
            <table>
                <thead>
                    <tr>
                        <th>Project</th>
                        <th>Websites</th>
                        <th>Pages Tested</th>
                        <th>Violations</th>
                    </tr>
                </thead>
                <tbody>
                    {projects_html}
                </tbody>
            </table>
        </section>
        
        <footer>
            <p>Generated by Auto A11y Python - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </footer>
    </div>
</body>
</html>"""
        
        return html
    
    def _get_css(self) -> str:
        """Get CSS styles for HTML reports"""
        return """
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        header {
            border-bottom: 2px solid #007bff;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        h1 { color: #007bff; margin-bottom: 10px; }
        h2 { color: #333; margin: 20px 0 15px; border-bottom: 1px solid #e0e0e0; padding-bottom: 5px; }
        h3 { color: #555; margin: 15px 0 10px; }
        
        .metadata {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }
        .metadata p { margin: 5px 0; }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .stat-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border: 1px solid #dee2e6;
        }
        .stat-card h3 {
            font-size: 2em;
            color: #007bff;
            margin: 0;
        }
        .stat-card.violations h3 { color: #dc3545; }
        .stat-card.warnings h3 { color: #ffc107; }
        .stat-card.passes h3 { color: #28a745; }
        
        .violation, .warning, .pass, .ai-finding {
            background: #fff;
            border-left: 4px solid #dc3545;
            padding: 15px;
            margin: 15px 0;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .warning { border-left-color: #ffc107; }
        .pass { border-left-color: #28a745; }
        .ai-finding { border-left-color: #6f42c1; }
        
        .violation h4, .warning h4, .pass h4, .ai-finding h4 {
            margin-bottom: 10px;
            color: #333;
        }
        
        .impact {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 3px;
            font-size: 0.85em;
            font-weight: bold;
            margin-left: 10px;
        }
        .impact.critical { background: #dc3545; color: white; }
        .impact.serious { background: #fd7e14; color: white; }
        .impact.moderate { background: #ffc107; color: #333; }
        .impact.minor { background: #6c757d; color: white; }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }
        th {
            background: #f8f9fa;
            font-weight: bold;
            color: #495057;
        }
        tr:hover { background: #f8f9fa; }
        
        .code {
            background: #f4f4f4;
            padding: 10px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            overflow-x: auto;
            margin: 10px 0;
        }
        
        footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #dee2e6;
            text-align: center;
            color: #6c757d;
        }
        
        a { color: #007bff; text-decoration: none; }
        a:hover { text-decoration: underline; }
    </style>
        """
    
    def _format_summary_section(self, stats: Dict) -> str:
        """Format summary statistics section"""
        return f"""
        <section class="summary">
            <h2>Summary</h2>
            <div class="stats-grid">
                <div class="stat-card violations">
                    <h3>{stats['violations']}</h3>
                    <p>Violations</p>
                </div>
                <div class="stat-card warnings">
                    <h3>{stats['warnings']}</h3>
                    <p>Warnings</p>
                </div>
                <div class="stat-card passes">
                    <h3>{stats['passes']}</h3>
                    <p>Passes</p>
                </div>
                <div class="stat-card">
                    <h3>{stats['duration_ms']}ms</h3>
                    <p>Test Duration</p>
                </div>
            </div>
        </section>"""
    
    def _format_violations_section(self, violations: List[Dict]) -> str:
        """Format violations section"""
        if not violations:
            return ""
        
        html = "<section class='violations'><h2>Violations</h2>"
        for v in violations:
            impact_class = v.get('impact', 'moderate').lower()
            html += f"""
            <div class="violation">
                <h4>{v.get('rule_id', 'Unknown')}
                    <span class="impact {impact_class}">{v.get('impact', 'moderate').upper()}</span>
                </h4>
                <p><strong>Description:</strong> {v.get('description', 'No description')}</p>
                <p><strong>WCAG:</strong> {', '.join(v.get('wcag_criteria', []))}</p>
                <p><strong>Elements:</strong> {v.get('node_count', 0)} affected</p>
                {self._format_fix(v.get('suggested_fix'))}
            </div>"""
        html += "</section>"
        return html
    
    def _format_warnings_section(self, warnings: List[Dict]) -> str:
        """Format warnings section"""
        if not warnings:
            return ""
        
        html = "<section class='warnings'><h2>Warnings</h2>"
        for w in warnings:
            html += f"""
            <div class="warning">
                <h4>{w.get('rule_id', 'Unknown')}</h4>
                <p>{w.get('description', 'No description')}</p>
            </div>"""
        html += "</section>"
        return html
    
    def _format_ai_findings_section(self, findings: List) -> str:
        """Format AI findings section"""
        if not findings:
            return ""
        
        html = "<section class='ai-findings'><h2>AI Analysis Findings</h2>"
        for f in findings:
            severity_class = f.severity.value.lower() if hasattr(f, 'severity') else 'moderate'
            html += f"""
            <div class="ai-finding">
                <h4>{f.type if hasattr(f, 'type') else 'AI Finding'}
                    <span class="impact {severity_class}">{f.severity.value.upper() if hasattr(f, 'severity') else 'MODERATE'}</span>
                </h4>
                <p><strong>Description:</strong> {f.description if hasattr(f, 'description') else 'No description'}</p>
                <p><strong>Confidence:</strong> {f.confidence * 100 if hasattr(f, 'confidence') else 85:.0f}%</p>
                {self._format_fix(f.suggested_fix if hasattr(f, 'suggested_fix') else None)}
            </div>"""
        html += "</section>"
        return html
    
    def _format_passes_section(self, passes: List[Dict]) -> str:
        """Format passes section"""
        if not passes:
            return ""
        
        html = "<section class='passes'><h2>Passes</h2><ul>"
        for p in passes[:10]:  # Show first 10 passes
            html += f"<li>{p.get('rule_id', 'Unknown')}: {p.get('description', 'Passed')}</li>"
        if len(passes) > 10:
            html += f"<li>... and {len(passes) - 10} more</li>"
        html += "</ul></section>"
        return html
    
    def _format_fix(self, fix: str) -> str:
        """Format suggested fix"""
        if not fix:
            return ""
        return f'<p><strong>Suggested Fix:</strong> {fix}</p>'
    
    def _format_violation_types_section(self, violation_types: Dict) -> str:
        """Format violation types section"""
        html = "<section class='violation-types'><h2>Violation Types</h2><table>"
        html += "<thead><tr><th>Rule</th><th>Count</th><th>Description</th><th>Pages Affected</th></tr></thead><tbody>"
        
        sorted_types = sorted(violation_types.items(), key=lambda x: x[1]['count'], reverse=True)
        for rule_id, info in sorted_types[:20]:  # Show top 20
            pages_summary = f"{len(set(info['pages']))} pages"
            html += f"""
            <tr>
                <td>{rule_id}</td>
                <td>{info['count']}</td>
                <td>{info['description']}</td>
                <td>{pages_summary}</td>
            </tr>"""
        
        html += "</tbody></table></section>"
        return html
    
    def _format_pages_table(self, page_results: List[Dict]) -> str:
        """Format pages table"""
        html = "<section class='pages'><h2>Pages</h2><table>"
        html += "<thead><tr><th>Page</th><th>Violations</th><th>Warnings</th><th>Last Tested</th></tr></thead><tbody>"
        
        for pr in page_results:
            page = pr['page']
            test = pr['test_result']
            html += f"""
            <tr>
                <td><a href="{page.url}" target="_blank">{page.url}</a></td>
                <td class="violations">{test.violation_count}</td>
                <td class="warnings">{test.warning_count}</td>
                <td>{test.test_date}</td>
            </tr>"""
        
        html += "</tbody></table></section>"
        return html
    
    def _format_websites_section(self, websites: List[Dict]) -> str:
        """Format websites section"""
        html = "<section class='websites'><h2>Websites</h2>"
        
        for wd in websites:
            website = wd['website']
            pages = wd['pages']
            
            total_violations = sum(p['test_result'].violation_count for p in pages)
            total_warnings = sum(p['test_result'].warning_count for p in pages)
            
            html += f"""
            <div class="website">
                <h3>{website.name} - {website.base_url}</h3>
                <p>Pages: {len(pages)} | Violations: {total_violations} | Warnings: {total_warnings}</p>
            </div>"""
        
        html += "</section>"
        return html


class JSONFormatter(BaseFormatter):
    """JSON report formatter"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.extension = 'json'
    
    def format_page_report(self, data: Dict[str, Any]) -> str:
        """Generate JSON report for a page"""
        return json.dumps(data, indent=2, default=str)
    
    def format_website_report(self, data: Dict[str, Any]) -> str:
        """Generate JSON report for a website"""
        return json.dumps(data, indent=2, default=str)
    
    def format_project_report(self, data: Dict[str, Any]) -> str:
        """Generate JSON report for a project"""
        return json.dumps(data, indent=2, default=str)
    
    def format_summary_report(self, data: Dict[str, Any]) -> str:
        """Generate JSON summary report"""
        return json.dumps(data, indent=2, default=str)


class CSVFormatter(BaseFormatter):
    """CSV report formatter"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.extension = 'csv'
    
    def format_page_report(self, data: Dict[str, Any]) -> str:
        """Generate CSV report for a page"""
        output = StringIO()
        writer = csv.writer(output)
        
        # Write header
        writer.writerow(['Type', 'Rule ID', 'Description', 'Impact', 'WCAG', 'Elements', 'Fix'])
        
        # Write violations
        for v in data['violations']:
            writer.writerow([
                'Violation',
                v.get('rule_id', ''),
                v.get('description', ''),
                v.get('impact', ''),
                ', '.join(v.get('wcag_criteria', [])),
                v.get('node_count', 0),
                v.get('suggested_fix', '')
            ])
        
        # Write warnings
        for w in data['warnings']:
            writer.writerow([
                'Warning',
                w.get('rule_id', ''),
                w.get('description', ''),
                '',
                '',
                w.get('node_count', 0),
                ''
            ])
        
        return output.getvalue()
    
    def format_website_report(self, data: Dict[str, Any]) -> str:
        """Generate CSV report for a website"""
        output = StringIO()
        writer = csv.writer(output)
        
        # Write header
        writer.writerow(['Page URL', 'Violations', 'Warnings', 'Passes', 'Last Tested'])
        
        # Write page data
        for pr in data['pages']:
            page = pr['page']
            test = pr['test_result']
            writer.writerow([
                page.url,
                test.violation_count,
                test.warning_count,
                test.pass_count,
                test.test_date
            ])
        
        return output.getvalue()
    
    def format_project_report(self, data: Dict[str, Any]) -> str:
        """Generate CSV report for a project"""
        output = StringIO()
        writer = csv.writer(output)
        
        # Write header
        writer.writerow(['Website', 'Base URL', 'Pages', 'Total Violations', 'Total Warnings'])
        
        # Write website data
        for wd in data['websites']:
            website = wd['website']
            pages = wd['pages']
            
            total_violations = sum(p['test_result'].violation_count for p in pages)
            total_warnings = sum(p['test_result'].warning_count for p in pages)
            
            writer.writerow([
                website.name,
                website.base_url,
                len(pages),
                total_violations,
                total_warnings
            ])
        
        return output.getvalue()
    
    def format_summary_report(self, data: Dict[str, Any]) -> str:
        """Generate CSV summary report"""
        output = StringIO()
        writer = csv.writer(output)
        
        # Write header
        writer.writerow(['Project', 'Websites', 'Pages Tested', 'Violations'])
        
        # Write project data
        for project in data['projects']:
            writer.writerow([
                project['name'],
                project['websites'],
                project['pages_tested'],
                project['violations']
            ])
        
        return output.getvalue()


class PDFFormatter(BaseFormatter):
    """PDF report formatter (uses HTML + conversion)"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.extension = 'pdf'
        self.html_formatter = HTMLFormatter(config)
    
    def format_page_report(self, data: Dict[str, Any]) -> str:
        """Generate HTML for PDF conversion"""
        return self.html_formatter.format_page_report(data)
    
    def format_website_report(self, data: Dict[str, Any]) -> str:
        """Generate HTML for PDF conversion"""
        return self.html_formatter.format_website_report(data)
    
    def format_project_report(self, data: Dict[str, Any]) -> str:
        """Generate HTML for PDF conversion"""
        return self.html_formatter.format_project_report(data)
    
    def format_summary_report(self, data: Dict[str, Any]) -> str:
        """Generate HTML for PDF conversion"""
        return self.html_formatter.format_summary_report(data)
    
    def save_pdf(self, html_content: str, filepath: Path):
        """
        Save HTML as PDF (requires wkhtmltopdf or similar)
        
        For now, just save as HTML with .pdf extension
        In production, use a proper HTML to PDF converter
        """
        # For now, save as HTML
        # In production, use pdfkit, weasyprint, or similar
        logger.warning("PDF generation not fully implemented - saving as HTML")
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(html_content)