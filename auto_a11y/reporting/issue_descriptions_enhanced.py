"""
Auto-generated issue descriptions from ISSUE_CATALOG_BY_TOUCHPOINT.md
DO NOT EDIT THIS FILE DIRECTLY - Edit ISSUE_CATALOG_BY_TOUCHPOINT.md and regenerate
Generated with all 287 issues from the catalog
"""

from enum import Enum
from typing import Dict, Any, List


class ImpactScale(Enum):
    """Impact scale for accessibility issues"""
    HIGH = "High"
    MEDIUM = "Medium"  
    LOW = "Low"
    INFO = "Info"


def get_detailed_issue_description(issue_code: str, metadata: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    Get detailed description for an issue code with contextual metadata
    
    Args:
        issue_code: The issue code (e.g., 'headings_ErrEmptyHeading')
        metadata: Additional context about the specific issue instance
        
    Returns:
        Dictionary with detailed description fields
    """
    
    if metadata is None:
        metadata = {}
    
    # Extract the error type from the issue code
    # Handle AI_ prefixed codes specially
    if issue_code.startswith('AI_'):
        error_type = issue_code  # Use full code for AI issues
        category = 'AI'
    elif '_' in issue_code:
        # Find the actual error code (starts with Err, Warn, Info, Disco, or AI)
        parts = issue_code.split('_')
        error_type = issue_code  # Default to full code
        category = 'unknown'
        
        for i, part in enumerate(parts):
            if part.startswith(('Err', 'Warn', 'Info', 'Disco')):
                # Found the error code, join from here to end
                error_type = '_'.join(parts[i:])
                # Everything before is the category
                category = '_'.join(parts[:i]) if i > 0 else 'unknown'
                break
    else:
        category = 'unknown'
        error_type = issue_code
    
    # Generated descriptions from template
    descriptions = {        'AI_ErrAccordionWithoutARIA': {
            'title': "Accordion element \"{element_text}\" lacks proper ARIA markup",
            'what': "Accordion element \"{element_text}\" lacks proper ARIA markup",
            'why': "Without aria-expanded and proper roles, users cannot determine if sections are expanded or collapsed",
            'who': "Screen reader users, keyboard users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2', '1.3.1'],
            'remediation': "Add button role to headers, aria-expanded to indicate state, and aria-controls to link headers to panels"
        },
        'AI_ErrAmbiguousLinkText': {
            'title': "Link text \"{element_text}\" is ambiguous without surrounding context",
            'what': "Link text \"{element_text}\" is ambiguous without surrounding context",
            'why': "Screen reader users navigating by links won\'t understand the link\'s purpose",
            'who': "Screen reader users navigating out of context",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.4'],
            'remediation': "Use descriptive link text that makes sense without context, or add aria-label"
        },
        'AI_ErrCarouselWithoutARIA': {
            'title': "Carousel/slider \"{element_text}\" lacks proper ARIA markup and controls",
            'what': "Carousel/slider \"{element_text}\" lacks proper ARIA markup and controls",
            'why': "Without proper ARIA and controls, users cannot understand or control the carousel\'s behavior",
            'who': "Screen reader users, keyboard users, users with motor impairments",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2', '2.2.2'],
            'remediation': "Add role=\"region\", aria-label, aria-live for updates, and accessible previous/next controls"
        },
        'AI_ErrClickableWithoutKeyboard': {
            'title': "Element with onclick handler is not keyboard accessible",
            'what': "Element with onclick handler is not keyboard accessible",
            'why': "Keyboard users cannot activate this control",
            'who': "Keyboard users, users who cannot use a mouse",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1'],
            'remediation': "Add tabindex=\"0\" and implement onkeypress/onkeydown handlers for Enter and Space keys"
        },
        'AI_ErrDialogWithoutARIA': {
            'title': "{element_tag} element \"{element_text}\" appears to be a dialog/modal but lacks proper ARIA markup",
            'what': "{element_tag} element \"{element_text}\" appears to be a dialog/modal but lacks proper ARIA markup",
            'why': "Without proper ARIA attributes, screen readers cannot announce the dialog\'s purpose, state, or provide proper navigation",
            'who': "Screen reader users, keyboard users who need focus management",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2', '2.4.3'],
            'remediation': "Add role=\"dialog\", aria-modal=\"true\", aria-label or aria-labelledby, and implement focus trap"
        },
        'AI_ErrDropdownWithoutARIA': {
            'title': "Dropdown menu \"{element_text}\" lacks proper ARIA markup",
            'what': "Dropdown menu \"{element_text}\" lacks proper ARIA markup",
            'why': "Without aria-expanded, aria-haspopup, and proper roles, users cannot understand the dropdown\'s state or navigate it properly",
            'who': "Screen reader users, keyboard users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2', '1.3.1'],
            'remediation': "Add aria-haspopup=\"true\", aria-expanded state, and role=\"menu\" with role=\"menuitem\" for options"
        },
        'AI_ErrEmptyHeading': {
            'title': "Heading element {element_tag} at level {heading_level} is empty or contains no text",
            'what': "Heading element {element_tag} at level {heading_level} is empty or contains no text",
            'why': "Empty headings break document structure and confuse screen reader users who navigate by headings",
            'who': "Screen reader users, users who navigate by headings",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Remove empty heading or add meaningful text content"
        },
        'AI_ErrHeadingLevelMismatch': {
            'title': "Heading level {current_level} doesn\'t match visual hierarchy (should be level {suggested_level})",
            'what': "Heading level {current_level} doesn\'t match visual hierarchy (should be level {suggested_level})",
            'why': "Incorrect heading levels create confusing document structure for screen reader users",
            'who': "Screen reader users, users who navigate by headings",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Adjust heading level to match the visual hierarchy of the page"
        },
        'AI_ErrInteractiveElementIssue': {
            'title': "Interactive {element_tag} element \"{element_text}\" has accessibility issues",
            'what': "Interactive {element_tag} element \"{element_text}\" has accessibility issues",
            'why': "Interactive elements without proper semantic markup or keyboard support create barriers for assistive technology users",
            'who': "Keyboard users, screen reader users, voice control users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2'],
            'remediation': "Use semantic HTML elements or add appropriate ARIA roles and keyboard support"
        },
        'AI_ErrLinkWithoutText': {
            'title': "Link element has no accessible text",
            'what': "Link element has no accessible text",
            'why': "Screen readers announce this as \"link\" without any context",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.4', '4.1.2'],
            'remediation': "Add link text, aria-label, or aria-labelledby attribute"
        },
        'AI_ErrMenuWithoutARIA': {
            'title': "Navigation menu lacks proper ARIA markup",
            'what': "Navigation menu lacks proper ARIA markup",
            'why': "Screen readers won\'t recognize this as a navigation menu",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add role=\"navigation\" to container and appropriate ARIA attributes for menu items"
        },
        'AI_ErrMissingFocusIndicator': {
            'title': "Interactive element lacks visible focus indicator",
            'what': "Interactive element lacks visible focus indicator",
            'why': "Users can\'t see which element has keyboard focus",
            'who': "Keyboard users, users with attention or memory issues",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Add CSS :focus styles with visible outline, border, or background change"
        },
        'AI_ErrMissingInteractiveRole': {
            'title': "Interactive {element_tag} element lacks appropriate ARIA role",
            'what': "Interactive {element_tag} element lacks appropriate ARIA role",
            'why': "Screen readers won\'t announce this as an interactive control",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add appropriate ARIA role (button, link, checkbox, etc.) to the element"
        },
        'AI_ErrModalFocusTrap': {
            'title': "Modal/dialog \"{element_text}\" does not properly trap focus",
            'what': "Modal/dialog \"{element_text}\" does not properly trap focus",
            'why': "Without focus trapping, keyboard users can navigate outside the modal while it\'s open, causing confusion",
            'who': "Keyboard users, screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.2', '2.4.3'],
            'remediation': "Implement focus trap to keep focus within modal while open, and return focus to trigger element on close"
        },
        'AI_ErrNonSemanticButton': {
            'title': "Clickable {element_tag} element \"{element_text}\" is not a semantic button",
            'what': "Clickable {element_tag} element \"{element_text}\" is not a semantic button",
            'why': "Non-semantic buttons are not keyboard accessible and invisible to screen readers",
            'who': "Keyboard users, screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2'],
            'remediation': "Replace {element_tag} with <button> element or add role=\"button\" and tabindex=\"0\""
        },
        'AI_ErrReadingOrderMismatch': {
            'title': "Visual reading order doesn\'t match DOM order - content may be read out of sequence",
            'what': "Visual reading order doesn\'t match DOM order - content may be read out of sequence",
            'why': "Screen readers follow DOM order, which may not match the visual layout, causing confusion",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.2', '2.4.3'],
            'remediation': "Reorder DOM elements to match the visual reading flow or use CSS flexbox/grid with proper order"
        },
        'AI_ErrSkippedHeading': {
            'title': "Heading level skipped from h{current_level} to h{next_level}",
            'what': "Heading level skipped from h{current_level} to h{next_level}",
            'why': "Skipped heading levels break the logical document structure and make navigation difficult",
            'who': "Screen reader users, users who navigate by headings",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Use sequential heading levels without skipping (h1, h2, h3, not h1, h3)"
        },
        'AI_ErrTabsWithoutARIA': {
            'title': "Tab interface \"{element_text}\" lacks proper ARIA markup",
            'what': "Tab interface \"{element_text}\" lacks proper ARIA markup",
            'why': "Without role=\"tablist\", role=\"tab\", and aria-selected attributes, screen readers cannot convey tab relationships and states",
            'who': "Screen reader users, keyboard users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1', '4.1.2', '1.3.1'],
            'remediation': "Add role=\"tablist\" to container, role=\"tab\" to tabs, role=\"tabpanel\" to panels, and manage aria-selected states"
        },
        'AI_ErrToggleWithoutState': {
            'title': "Toggle button doesn\'t indicate its state (expanded/collapsed)",
            'what': "Toggle button doesn\'t indicate its state (expanded/collapsed)",
            'why': "Users don\'t know the current state of the control",
            'who': "Screen reader users, cognitive disability users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-expanded=\"true/false\" and update it when state changes"
        },
        'AI_ErrVisualHeadingNotMarked': {
            'title': "Text \"{visual_text}\" appears visually as a heading but is not marked up with proper heading tags",
            'what': "Text \"{visual_text}\" appears visually as a heading but is not marked up with proper heading tags",
            'why': "Screen reader users won\'t recognize this text as a heading, breaking navigation and document structure",
            'who': "Screen reader users, users who navigate by headings",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.1', '2.4.6'],
            'remediation': "Use appropriate HTML heading tags (h1-h6) for text that serves as headings"
        },
        'AI_InfoVisualCue': {
            'title': "Information conveyed only through visual cues (color, position, size)",
            'what': "Information conveyed only through visual cues (color, position, size)",
            'why': "Users who can\'t perceive visual cues miss important information",
            'who': "Blind users, colorblind users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.3', '1.4.1'],
            'remediation': "Provide text alternatives or additional cues beyond just visual ones"
        },
        'AI_WarnMixedLanguage': {
            'title': "Mixed language content detected without proper language declarations",
            'what': "Mixed language content detected without proper language declarations",
            'why': "Screen readers may pronounce text incorrectly without language declarations",
            'who': "Screen reader users who speak multiple languages",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.2'],
            'remediation': "Add lang attributes to elements containing different languages"
        },
        'AI_WarnModalMissingLabel': {
            'title': "Modal dialog lacks accessible name or description",
            'what': "Modal dialog lacks accessible name or description",
            'why': "Screen readers won\'t announce what the dialog is for",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-label or aria-labelledby to the dialog element"
        },
        'AI_WarnModalWithoutFocusTrap': {
            'title': "Modal dialog doesn\'t trap focus within the dialog",
            'what': "Modal dialog doesn\'t trap focus within the dialog",
            'why': "Keyboard users can tab out of the modal into the page behind it",
            'who': "Keyboard users, screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.2', '2.4.3'],
            'remediation': "Implement focus trap that keeps tab navigation within the modal"
        },
        'AI_WarnProblematicAnimation': {
            'title': "Animation detected that may cause accessibility issues",
            'what': "Animation detected that may cause accessibility issues",
            'why': "Animations can trigger seizures or make content difficult to read",
            'who': "Users with vestibular disorders, photosensitive epilepsy, or cognitive disabilities",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.2.2', '2.3.1'],
            'remediation': "Provide pause/stop controls and respect prefers-reduced-motion preference"
        },
        'DiscoFontFound': {
            'title': "Font '{fontName}' detected in use on the page for accessibility review",
            'what': "Font '{fontName}' is used at {sizeCount} different size{sizeCount_plural}: {fontSizes_list}",
            'why': "Tracking font usage helps identify typography choices that may affect readability. Font '{fontName}' has been detected on this page. While not inherently an accessibility issue, certain fonts can be harder to read for users with dyslexia, low vision, or reading disabilities. This discovery item documents which fonts are in use and at what sizes so they can be evaluated for legibility, character distinction, and overall readability as part of a comprehensive accessibility review.",
            'who': "This information helps accessibility auditors and developers understand the typography landscape of the page, particularly relevant for users with dyslexia who benefit from clear sans-serif fonts, users with low vision who need good character distinction, and users with reading disabilities who benefit from consistent, readable typefaces",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "No action required - this is informational only. The font '{fontName}' is currently in use at {sizeCount} size{sizeCount_plural}. For accessibility best practices, consider using fonts with clear character distinction (avoiding ambiguous characters like I/l/1), adequate spacing between letters, and good readability at various sizes. Popular accessible fonts include Arial, Verdana, Tahoma, and specialized dyslexia-friendly fonts like OpenDyslexic. Document your font choices and test readability with actual users when possible."
        },
        'DiscoFormOnPage': {
            'title': "Form detected (signature: {formSignature}){searchContext_title} - requires comprehensive manual testing",
            'what': "A form has been detected on this page with {fieldCount} field{fieldCount_plural} ({fieldTypes_summary}). The form submits to '{formAction}' using {formMethod} method. {searchContext_description} Form signature {formSignature} allows tracking this same form across different pages.",
            'why': "Forms are critical interactive components that require comprehensive manual accessibility testing beyond what automated tools can verify. Every form must be tested with keyboard navigation (tab order, enter/space activation, escape to cancel), screen readers (field labels announced correctly, error messages associated with fields, required fields indicated), and various input methods. Forms with poor accessibility create significant barriers - unlabeled fields leave users guessing what to enter, poor error handling prevents users from completing tasks, and keyboard traps can make forms completely unusable. Search forms are especially important as they provide a critical navigation mechanism - users rely on them to find content quickly, and screen reader users often navigate directly to search landmarks. The form signature allows auditors to recognize when the same form appears on multiple pages, ensuring consistent testing and remediation across the site.",
            'who': "Screen reader users who need properly labeled form controls and error associations, keyboard-only users who must navigate and submit forms without a mouse, users with motor disabilities who need adequate time limits and clear focus indicators, users with cognitive disabilities who need clear instructions and helpful error messages, voice control users who need properly exposed form control names, mobile users who need forms that work with assistive technologies on touch devices, and screen reader users who use landmark navigation to jump directly to search forms",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.3.1', '2.1.1', '2.4.3', '3.2.2', '3.3.1', '3.3.2', '3.3.3', '3.3.4', '4.1.2'],
            'remediation': "Manually test this form with keyboard navigation (ensure all fields are reachable via Tab, form can be submitted with Enter, and there are no keyboard traps), screen reader (verify each field has a clear label or aria-label, required fields are indicated, error messages are associated with fields via aria-describedby, and fieldset/legend are used for radio button groups), test error validation (submit invalid data and verify error messages are clear, specific, and programmatically associated with fields), test with form pre-filled (ensure autocomplete attributes are used appropriately), verify timeout warnings for any time limits, and confirm the form works across different devices and assistive technologies. {searchContext_remediation}"
        },
        'DiscoFoundInlineSvg': {
            'title': "Inline SVG element detected that requires manual review to determine appropriate accessibility implementation based on its purpose and complexity",
            'what': "Inline SVG element detected that requires manual review to determine appropriate accessibility implementation based on its purpose and complexity",
            'why': "SVG elements serve diverse purposes from simple icons to complex interactive visualizations, each requiring different accessibility approaches. A decorative border needs different treatment than a data chart, which differs from an interactive map or scientific simulation. Automated tools cannot determine SVG purpose, whether it\'s decorative or informative, static or interactive, or if existing accessibility features adequately support user needs.",
            'who': "Blind and low vision users using screen readers who need text alternatives for graphics or keyboard access to interactive elements, users with motor disabilities who require keyboard navigation for interactive SVG controls, users with cognitive disabilities who benefit from clear labeling and predictable interaction patterns, and users of various assistive technologies that may interpret SVG content differently",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.1.1'],
            'remediation': "Evaluate the SVG\'s purpose and complexity - for simple images add <title> with aria-labelledby or role=\"img\" with aria-label, for decorative graphics use aria-hidden=\"true\", for data visualizations provide <title> and <desc> plus consider adjacent detailed text alternatives, for interactive content ensure all controls are keyboard accessible with proper ARIA labels and focus management, for complex simulations provide instructions and state changes announcements, and test with screen readers to verify the experience matches visual functionality"
        },
        'DiscoFoundJS': {
            'title': "JavaScript detected on page",
            'what': "JavaScript detected on page",
            'why': "Functionality should work without JavaScript",
            'who': "Users with JavaScript disabled",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Ensure progressive enhancement"
        },
        'DiscoNavFound': {
            'title': "Navigation region detected (signature: {navSignature}) - requires manual accessibility review",
            'what': "A navigation region has been detected on this page with {linkCount} link{linkCount_plural}. {navLabel_description} Navigation signature {navSignature} allows tracking this same navigation across different pages.",
            'why': "Navigation regions are critical wayfinding tools that must be keyboard accessible, properly labeled, and work with screen readers. Each navigation area needs verification that links are organized logically, focus order is correct, current page indication is provided (aria-current=\"page\"), and the navigation can be easily understood and operated by all users. Multiple navigation regions must be distinguishable via unique accessible names. The navigation signature allows auditors to recognize when the same navigation structure appears on multiple pages, ensuring consistent testing and remediation across the site.",
            'who': "Screen reader users who navigate by landmarks and need clear labels to distinguish navigation regions, keyboard users who must efficiently tab through navigation links, users with motor disabilities who need consistent and predictable navigation patterns, users with cognitive disabilities who benefit from clear, well-organized navigation structures",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '2.4.3', '4.1.2'],
            'remediation': "Verify navigation has a clear accessible name (aria-label or aria-labelledby) if multiple nav regions exist. Test keyboard navigation through all links (Tab order should be logical). Ensure current page is indicated with aria-current=\"page\". Verify focus indicators are visible. Test with screen reader to confirm navigation is announced correctly and links are understandable out of context."
        },
        'DiscoAsideFound': {
            'title': "Complementary region detected (signature: {asideSignature}) - requires manual accessibility review",
            'what': "A complementary region (<aside> or role=\"complementary\") has been detected on this page. {asideLabel_description} Signature {asideSignature} allows tracking this same region across different pages.",
            'why': "Complementary regions provide supporting content related to the main content. They must be properly labeled when multiple exist, contain relevant supplementary information, and be distinguishable from main content for screen reader users who navigate by landmarks. The signature allows auditors to recognize when the same complementary content appears on multiple pages.",
            'who': "Screen reader users who navigate by landmarks to find supporting content, users with cognitive disabilities who benefit from clear content organization and separation of main vs. supplementary information",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Verify the aside contains truly complementary content (related to but separate from main content). If multiple complementary regions exist on the page, ensure each has a unique accessible name using aria-label or aria-labelledby. Test with screen reader to confirm the region is announced correctly and its purpose is clear."
        },
        'DiscoSectionFound': {
            'title': "Section region detected (signature: {sectionSignature}) - requires manual accessibility review",
            'what': "A section region has been detected on this page. {sectionLabel_description} Signature {sectionSignature} allows tracking this same section across different pages.",
            'why': "Section elements with accessible names become region landmarks. They must have meaningful, unique labels to help screen reader users navigate between distinct areas of content. Sections without accessible names are not landmarks and won't appear in landmark navigation. The signature allows auditors to recognize when the same section structure appears on multiple pages.",
            'who': "Screen reader users who navigate by landmarks to jump between major page sections, users with cognitive disabilities who benefit from clearly labeled and organized content regions",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Verify each section has a descriptive, unique accessible name (aria-label or aria-labelledby) that clearly identifies its purpose. Ensure the label is concise and meaningful. If the section doesn't represent a significant region of content, consider if it should be a landmark at all. Test with screen reader to confirm the region is announced with its label."
        },
        'DiscoHeaderFound': {
            'title': "Banner region detected (signature: {headerSignature}) - requires manual accessibility review",
            'what': "A banner landmark (<header> at top level or role=\"banner\") has been detected on this page. {headerLabel_description} Signature {headerSignature} allows tracking this same banner across different pages.",
            'why': "Banner landmarks identify the main header of the page, typically containing site logo, main navigation, and site-wide utilities. There should be only one banner per page. It must be properly labeled if the site identity isn't obvious, and should not be nested inside other landmarks. The signature allows auditors to recognize when the same banner appears on multiple pages.",
            'who': "Screen reader users who navigate by landmarks to quickly access site-wide navigation and branding, keyboard users who use landmarks for efficient page navigation, users with cognitive disabilities who rely on consistent banner placement for orientation",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Verify there is only one banner landmark per page. Ensure the banner contains site-level content (logo, main nav, site utilities) rather than page-specific content. If multiple headers exist, ensure only the site-level one is a banner. Test with screen reader to confirm banner is announced correctly."
        },
        'DiscoFooterFound': {
            'title': "Contentinfo region detected (signature: {footerSignature}) - requires manual accessibility review",
            'what': "A contentinfo landmark (<footer> at top level or role=\"contentinfo\") has been detected on this page. {footerLabel_description} Signature {footerSignature} allows tracking this same footer across different pages.",
            'why': "Contentinfo landmarks identify site-wide footer information such as copyright, privacy policy, and contact links. There should be only one contentinfo per page. It must contain site-level information rather than page-specific footers, and should not be nested inside other landmarks. The signature allows auditors to recognize when the same footer appears on multiple pages.",
            'who': "Screen reader users who navigate by landmarks to quickly access site-wide footer information and legal links, keyboard users who use landmarks for efficient page navigation, users with cognitive disabilities who rely on consistent footer placement for finding important site information",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Verify there is only one contentinfo landmark per page. Ensure the footer contains site-level information (copyright, privacy, contact) rather than article-specific or section-specific footers. If multiple footers exist, ensure only the site-level one is contentinfo. Test with screen reader to confirm contentinfo is announced correctly."
        },
        'DiscoSearchFound': {
            'title': "Search region detected (signature: {searchSignature}) - requires manual accessibility review",
            'what': "A search landmark (<search> or role=\"search\") has been detected on this page. {searchLabel_description} Signature {searchSignature} allows tracking this same search region across different pages.",
            'why': "Search landmarks identify search functionality on the page. They help screen reader users quickly locate search features. The search region must have a clear accessible name if multiple search regions exist, contain appropriate search form controls, and be easily discoverable through landmark navigation. The signature allows auditors to recognize when the same search region appears on multiple pages.",
            'who': "Screen reader users who navigate by landmarks to quickly find search functionality, keyboard users who use landmarks for efficient page navigation, users with cognitive disabilities who benefit from clearly marked search areas",
            'impact': ImpactScale.INFO.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Verify the search region contains actual search functionality (typically a form with input and submit button). If multiple search regions exist, ensure each has a unique accessible name using aria-label or aria-labelledby. Ensure search form controls are properly labeled and keyboard accessible. Test with screen reader to confirm search region is announced correctly and search controls are accessible."
        },
        'DiscoFoundSvgImage': {
            'title': "SVG element with role=\"img\" detected that requires manual review to verify appropriate text alternatives are provided",
            'what': "SVG element with role=\"img\" detected that requires manual review to verify appropriate text alternatives are provided",
            'why': "SVG elements with role=\"img\" are explicitly marked as images and treated as a single graphic by assistive technologies, requiring appropriate text alternatives. While the role=\"img\" indicates developer awareness of accessibility needs, manual review is needed to verify that any aria-label, aria-labelledby, or internal <title> elements adequately describe the image\'s content or function, and that the description is appropriate for the SVG\'s context and purpose.",
            'who': "Blind and low vision users using screen readers who depend on text alternatives to understand image content, users with cognitive disabilities who benefit from clear, concise descriptions of visual information, keyboard users who may encounter the SVG in their navigation flow, and users of assistive technologies that treat role=\"img\" SVGs as atomic image elements",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.1.1'],
            'remediation': "Verify the SVG with role=\"img\" has appropriate accessible names through aria-label or aria-labelledby attributes, ensure any <title> or <desc> elements inside the SVG are properly referenced if used for labeling, confirm decorative SVGs are hidden with aria-hidden=\"true\" rather than given role=\"img\", check that the text alternative accurately describes the SVG\'s meaning in context, and test with screen readers to ensure the image is announced with meaningful information"
        },
        'DiscoHeadingWithID': {
            'title': "Heading element has an ID attribute that may be used for in-page navigation",
            'what': "Heading element has an ID attribute that may be used for in-page navigation",
            'why': "Headings with IDs are often link targets for navigation, requiring verification that they work correctly and provide meaningful navigation points.",
            'who': "All users who use in-page navigation links, screen reader users who navigate by headings, keyboard users who follow fragment links.",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.3.1'],
            'remediation': "Verify the heading ID is referenced by navigation links, ensure the ID is descriptive and stable, check that the heading text provides clear navigation context."
        },
        'DiscoPDFLinksFound': {
            'title': "Links to PDF documents detected on page",
            'what': "Links to PDF documents detected on page",
            'why': "PDF documents often have accessibility issues and may not be accessible to all users",
            'who': "Screen reader users, users with disabilities who have difficulty with PDF formats",
            'impact': ImpactScale.INFO.value,
            'wcag': ['1.1.1', '1.3.1', '2.1.1', '2.4.1'],
            'remediation': "Ensure PDFs are accessible (tagged, structured, with text content) or provide HTML alternatives"
        },
        'DiscoStyleAttrOnElements': {
            'title': "Inline styles detected",
            'what': "Inline styles detected",
            'why': "May affect responsive design and user customization",
            'who': "Users with custom stylesheets",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Consider moving to CSS classes"
        },
        'DiscoStyleElementOnPage': {
            'title': "Style element found in page",
            'what': "Style element found in page",
            'why': "Embedded styles harder to override",
            'who': "Users needing custom styles",
            'impact': ImpactScale.INFO.value,
            'wcag': [],
            'remediation': "Consider external stylesheets"
        },
        'ErrAltOnElementThatDoesntTakeIt': {
            'title': "Alt attribute placed on HTML elements that don\'t support it (such as div, span, p, or other non-image elements), making the alternative text inaccessible to assistive technologies",
            'what': "Alt attribute placed on HTML elements that don\'t support it (such as div, span, p, or other non-image elements), making the alternative text inaccessible to assistive technologies",
            'why': "The alt attribute is only valid on specific elements (<img>, <area>, <input type=\"image\">) and is ignored when placed on other elements. Screen readers will not announce this misplaced alt text, meaning any important information it contains is completely lost to users who rely on assistive technologies. This often occurs when developers attempt to add accessibility features but use incorrect techniques.",
            'who': "Blind and low vision users using screen readers who cannot access the alternative text content placed in invalid locations, users with cognitive disabilities who may be missing explanatory text, keyboard users who may not receive important contextual information, and users of assistive technologies that rely on proper semantic HTML markup",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.1.1'],
            'remediation': "Remove alt attributes from non-supporting elements and use appropriate alternatives - for background images in CSS use role=\"img\" with aria-label, for clickable elements use aria-label or visually hidden text, for decorative elements ensure they\'re properly hidden with aria-hidden=\"true\", and verify that actual <img> elements are used for content images that need alternative text"
        },
        'ErrAltTooLong': {
            'title': "Alt text exceeds 150 characters, making it difficult for screen reader users to process",
            'what': "Alt text exceeds 150 characters, making it difficult for screen reader users to process",
            'why': "Excessively long alt text creates a poor listening experience and may indicate that complex information should be presented differently.",
            'who': "Screen reader users who must listen to lengthy descriptions, users with cognitive disabilities who may struggle with verbose content.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.1.1'],
            'remediation': "Limit alt text to 150 characters or less, use longdesc or aria-describedby for complex images, provide detailed descriptions in adjacent text content."
        },
        'ErrAriaLabelMayNotBeFoundByVoiceControl': {
            'title': "aria-label doesn\'t match visible text",
            'what': "aria-label doesn\'t match visible text",
            'why': "Voice control users can\'t activate element",
            'who': "Voice control users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3'],
            'remediation': "Ensure aria-label includes visible text"
        },
        'ErrAutoStartTimers': {
            'title': "Timer starts automatically without user control to pause or stop",
            'what': "Timer starts automatically without user control to pause or stop",
            'why': "Auto-starting timers can create stress and barriers for users who need more time to complete tasks or read content.",
            'who': "Users with cognitive disabilities, users with reading disabilities, users with motor impairments who need more time, screen reader users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.2.2'],
            'remediation': "Provide controls to pause, stop, or extend time limits, avoid auto-starting timers unless essential, allow users to control timing of content updates."
        },
        'ErrBannerLandmarkAccessibleNameIsBlank': {
            'title': "Banner landmark has blank accessible name",
            'what': "Banner landmark has blank accessible name",
            'why': "Multiple banners need labels to distinguish them",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add aria-label or aria-labelledby"
        },
        'ErrBannerLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Banner landmark has both aria-label and aria-labelledby",
            'what': "Banner landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrBannerLandmarkMayNotBeChildOfAnotherLandmark': {
            'title': "Banner landmark nested inside another landmark",
            'what': "Banner landmark nested inside another landmark",
            'why': "Invalid nesting breaks page structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move banner to top level"
        },
        'ErrButtonNoVisibleFocus': {
            'title': "Button lacks visible focus indicator when focused",
            'what': "Button lacks visible focus indicator when focused",
            'why': "Keyboard users need visible focus indicators to know which element is currently selected. Without clear focus indication on buttons, users cannot tell which button will be activated when they press Enter or Space, leading to errors and inability to use the interface effectively.",
            'who': "Users with motor disabilities using keyboard navigation, users who cannot use a mouse, power users who prefer keyboard navigation, and users of assistive technologies",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Ensure buttons have a clearly visible focus indicator with at least 3:1 contrast against the background. The indicator should be at least 2 pixels thick and not rely on color alone. Never remove focus indicators without providing an alternative. Consider using :focus-visible for refined focus management."
        },
        'ErrButtonTextLowContrast': {
            'title': "Button text has insufficient color contrast with button background",
            'what': "Button text has insufficient color contrast with button background",
            'why': "Users with low vision, color blindness, or viewing the page in bright sunlight may not be able to read button labels if contrast is insufficient. This prevents users from understanding button purpose and can make critical functions inaccessible. Buttons are action triggers, so being unable to read them can prevent task completion.",
            'who': "Users with low vision, color blindness, age-related vision changes, and anyone viewing content in poor lighting conditions or on low-quality displays",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3'],
            'remediation': "Ensure button text has at least 4.5:1 contrast ratio with the button background for normal text, or 3:1 for large text (18pt or 14pt bold). For Level AAA compliance, use 7:1 for normal text. Test in different states (hover, focus, active) as contrast requirements apply to all states. Avoid using color alone to indicate button state."
        },
        'ErrColorStyleDefinedExplicitlyInElement': {
            'title': "Color-related styles defined inline",
            'what': "Color-related styles defined inline",
            'why': "Harder to maintain consistent color scheme",
            'who': "Users needing high contrast modes",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3'],
            'remediation': "Use CSS classes instead of inline styles"
        },
        'ErrColorStyleDefinedExplicitlyInStyleTag': {
            'title': "Color-related styles defined in style tag",
            'what': "Color-related styles defined in style tag",
            'why': "Embedded color styles harder to override for user preferences",
            'who': "Users with custom stylesheets, high contrast mode users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3'],
            'remediation': "Use external stylesheets for better maintainability"
        },
        'ErrComplementaryLandmarkAccessibleNameIsBlank': {
            'title': "Complementary landmark has blank accessible name",
            'what': "Complementary landmark has blank accessible name",
            'why': "Empty labels provide no information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label text"
        },
        'ErrComplementaryLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Complementary landmark has both aria-label and aria-labelledby",
            'what': "Complementary landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods may cause confusion",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrComplementaryLandmarkMayNotBeChildOfAnotherLandmark': {
            'title': "Complementary landmark is nested inside another landmark",
            'what': "Complementary landmark is nested inside another landmark",
            'why': "Invalid nesting breaks landmark structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move complementary landmark outside of other landmarks"
        },
        'ErrCompletelyEmptyNavLandmark': {
            'title': "Navigation landmark contains no content",
            'what': "Navigation landmark contains no content",
            'why': "Empty navigation serves no purpose",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Add navigation content or remove empty landmark"
        },
        'ErrContentInfoLandmarkAccessibleNameIsBlank': {
            'title': "Contentinfo landmark has blank accessible name",
            'what': "Contentinfo landmark has blank accessible name",
            'why': "Blank labels provide no information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label text"
        },
        'ErrContentInfoLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Contentinfo landmark has both aria-label and aria-labelledby",
            'what': "Contentinfo landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrContentObscuring': {
            'title': "Dialog/overlay obscures interactive content",
            'what': "Dialog or overlay at {dialogXpath} obscures {obscuredCount} interactive element(s) at {breakpoint}px viewport width, preventing users from accessing them",
            'why': "When content is covered by other elements, users cannot access or interact with it, creating complete barriers to functionality. The dialog is positioned over interactive elements that users need to access. This issue is viewport-specific and may only appear at certain screen sizes.",
            'who': "All users at this viewport size, particularly keyboard users who cannot use mouse to work around layout issues, screen reader users who may not know content is obscured, mobile users with limited screen space.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3', '2.1.2'],
            'remediation': "Fix z-index and positioning issues to prevent the dialog from covering interactive content at the {breakpoint}px viewport width. Ensure modals and overlays don\'t cover content inappropriately. Use responsive CSS to adjust dialog positioning at different breakpoints. Consider repositioning the dialog, making it dismissible, or redesigning the layout for this screen size. Test that all content remains accessible when the dialog is visible across all responsive breakpoints."
        },
        'ErrContentinfoLandmarkMayNotBeChildOfAnotherLandmark': {
            'title': "Contentinfo landmark is nested inside another landmark",
            'what': "Contentinfo landmark is nested inside another landmark",
            'why': "Invalid nesting breaks landmark structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move contentinfo to top level"
        },
        'ErrDivMapMissingAttributes': {
            'title': "Map container div is missing required accessibility attributes",
            'what': "Map container div is missing required accessibility attributes",
            'why': "Maps without proper accessibility attributes are completely inaccessible to screen reader users who cannot perceive the visual information.",
            'who': "Blind and low vision users, users who rely on screen readers to understand map content and functionality.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Add appropriate ARIA labels and descriptions, provide text alternatives for map information, ensure all map controls are keyboard accessible."
        },
        'ErrDuplicateLabelForBannerLandmark': {
            'title': "Multiple banner landmarks have the same label",
            'what': "Multiple banner landmarks have the same label",
            'why': "Users cannot distinguish between different banners",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Only one banner should typically exist per page"
        },
        'ErrDuplicateLabelForComplementaryLandmark': {
            'title': "Multiple complementary landmarks have the same label",
            'what': "Multiple complementary landmarks have the same label",
            'why': "Users cannot distinguish between different complementary sections",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each complementary landmark"
        },
        'ErrDuplicateLabelForContentinfoLandmark': {
            'title': "Multiple contentinfo landmarks have the same label",
            'what': "Multiple contentinfo landmarks have the same label",
            'why': "Users cannot distinguish between different footer areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Typically only one contentinfo should exist per page"
        },
        'ErrDuplicateLabelForFormLandmark': {
            'title': "Multiple form landmarks have the same label",
            'what': "Multiple form landmarks have the same label",
            'why': "Users cannot distinguish between different forms",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each form"
        },
        'ErrDuplicateLabelForNavLandmark': {
            'title': "Multiple navigation landmarks have the same label",
            'what': "Multiple navigation landmarks have the same label",
            'why': "Users cannot distinguish between different navigation areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels like \"Main navigation\" and \"Footer navigation\""
        },
        'ErrDuplicateLabelForRegionLandmark': {
            'title': "Multiple region landmarks have the same label",
            'what': "Multiple region landmarks have the same label",
            'why': "Users cannot distinguish between different regions",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each region"
        },
        'ErrDuplicateLabelForSearchLandmark': {
            'title': "Multiple search landmarks have the same label",
            'what': "Multiple search landmarks have the same label",
            'why': "Users cannot distinguish between different search areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Provide unique labels for each search landmark"
        },
        'ErrDuplicateLandmarkWithoutName': {
            'title': "Found {totalCount} {role} landmarks - this one lacks unique accessible name",
            'what': "Found {totalCount} <{element}> elements with role=\"{role}\" on this page, but this instance lacks a unique accessible name to distinguish it from the others",
            'why': "When multiple {role} landmarks exist without unique names, screen reader users cannot distinguish between them. Screen readers announce landmarks by type and name - without unique names, users hear the same announcement for each {role} landmark, making it impossible to know which one leads where.",
            'who': "Screen reader users who navigate by landmarks (a common navigation strategy), keyboard users who use landmark navigation shortcuts.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add unique aria-label attributes to each {role} landmark to distinguish them. For example, if you have multiple navigation landmarks, use aria-label=\"Main navigation\" for one and aria-label=\"Footer navigation\" for another. The labels should describe the purpose or location of each landmark so users can quickly identify which one they want."
        },
        'ErrDuplicateNavNames': {
            'title': "Multiple navigation elements have identical accessible names",
            'what': "Multiple navigation elements have identical accessible names",
            'why': "Users cannot distinguish between different navigation areas when they have the same name, causing confusion about page structure.",
            'who': "Screen reader users navigating by landmarks, users with cognitive disabilities who rely on clear labeling.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Provide unique accessible names for each navigation element using aria-label or aria-labelledby."
        },
        'ErrElementLangEmpty': {
            'title': "Element has empty lang attribute",
            'what': "Element has empty lang attribute",
            'why': "Empty lang on elements provides no language change information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.2'],
            'remediation': "Add valid language code or remove empty lang attribute"
        },
        'ErrElementNotContainedInALandmark': {
            'title': "Content exists outside of any landmark",
            'what': "Content exists outside of any landmark",
            'why': "Content may be missed when navigating by landmarks",
            'who': "Screen reader users using landmark navigation",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure all content is within appropriate landmarks"
        },
        'ErrElementPrimaryLangNotRecognized': {
            'title': "Element has unrecognized language code",
            'what': "Element has unrecognized language code",
            'why': "Language changes won\'t be announced properly",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1', '3.1.2'],
            'remediation': "Use valid language codes"
        },
        'ErrElementRegionQualifierNotRecognized': {
            'title': "Element lang attribute has unrecognized region qualifier",
            'what': "Element lang attribute has unrecognized region qualifier",
            'why': "Invalid region codes may affect pronunciation",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.2'],
            'remediation': "Use valid ISO 3166-1 region codes"
        },
        'ErrEmptyAriaLabelOnField': {
            'title': "Form field has empty aria-label attribute",
            'what': "Form field has empty aria-label attribute",
            'why': "Empty labels provide no information about the field",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Add descriptive text to aria-label or use visible label"
        },
        'ErrEmptyAriaLabelledByOnField': {
            'title': "Form field has empty aria-labelledby attribute",
            'what': "Form field has empty aria-labelledby attribute",
            'why': "Empty labelledby provides no field description",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Reference valid element IDs or use direct labeling"
        },
        'ErrEmptyHeading': {
            'title': "Heading element contains only whitespace or special characters: \"{text}\"",
            'what': "Heading element contains only whitespace or special characters: \"{text}\"",
            'why': "This heading contains only \"{text}\" which provides no meaningful content. Empty headings disrupt document structure and navigation. Screen reader users rely on headings to understand page organization and navigate efficiently using heading shortcuts. An empty heading creates a navigation point with no information, confusing users about the page structure.",
            'who': "Screen reader users who navigate by headings and find a heading containing only \"{text}\", users with cognitive disabilities who rely on clear structure to understand content organization, and users of assistive technologies that generate page outlines",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Either replace \"{text}\" with meaningful text content that describes the section, or remove the empty heading element entirely if it serves no structural purpose. Never use headings for visual spacing - use CSS margin/padding instead."
        },
        'ErrEmptyLabel': {
            'title': "Label element exists but contains no text",
            'what': "Label element exists but contains no text",
            'why': "Empty labels provide no information about the associated form control, making forms impossible to complete correctly.",
            'who': "Screen reader users who cannot identify form fields, users with cognitive disabilities who need clear labels.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Add descriptive text to all label elements that clearly identifies the purpose of the associated form control."
        },
        'ErrEmptyLangAttr': {
            'title': "Lang attribute is empty",
            'what': "Lang attribute is empty",
            'why': "Empty lang provides no language information",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Add valid language code to lang attribute"
        },
        'ErrEmptyLanguageAttribute': {
            'title': "HTML element has a lang attribute present but with no value (lang=\"\"), preventing screen readers from determining the page language",
            'what': "HTML element has a lang attribute present but with no value (lang=\"\"), preventing screen readers from determining the page language",
            'why': "An empty lang attribute is worse than no lang attribute because it explicitly tells assistive technologies there\'s no language specified, potentially causing screen readers to use incorrect pronunciation rules or fail to switch language synthesizers. This can make content completely unintelligible when read aloud.",
            'who': "Blind and low vision users using screen readers who need proper language identification for correct pronunciation, multilingual users who rely on automatic language switching in assistive technologies, users with dyslexia using reading tools that depend on language settings, and users of translation services",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Add a valid language code to the lang attribute (e.g., lang=\"en\" for English, lang=\"es\" for Spanish, lang=\"fr\" for French). Use the correct ISO 639-1 two-letter code or ISO 639-2 three-letter code. For the HTML element, always specify the primary document language. If the language is truly unknown, remove the lang attribute entirely rather than leaving it empty."
        },
        'ErrEmptyList': {
            'title': "List element (ul, ol, dl) contains no list items",
            'what': "List element (ul, ol, dl) contains no list items",
            'why': "Empty lists create confusion about document structure and may indicate missing content or markup errors.",
            'who': "Screen reader users who encounter empty list announcements, all users missing potentially important content.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Remove empty list elements or populate them with appropriate list items, ensure lists are only used for actual list content."
        },
        'ErrEmptyPageTitle': {
            'title': "Page title element is empty",
            'what': "The page has a <title> element but it contains no text",
            'why': "The page title is the first thing screen reader users hear when a page loads. An empty title provides no information about what page they're on - it's like opening a book with a blank cover. The title appears in browser tabs, bookmarks, search results, and browser history. An empty title means users see \"Untitled\" or nothing at all, making it impossible to distinguish this page from others or understand its purpose. This is especially problematic when users have multiple tabs open or are trying to return to a page from their history.",
            'who': "Screen reader users who rely on titles for immediate page identification, users with cognitive disabilities who need clear page identification, users managing multiple browser tabs, users with memory issues using browser history, and all users when bookmarking or sharing pages",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.2'],
            'remediation': "Add descriptive text to the <title> element. A good page title should be: (1) Unique - different from other pages on your site, (2) Descriptive - clearly identifies the page content, (3) Concise - ideally 20-60 characters, (4) Front-loaded - most important info first, (5) Contextual - includes site name for orientation. Use the pattern \"Page Topic - Section - Site Name\" or \"Specific Content - Site Name\". Examples: \"Shopping Cart - Acme Store\", \"Privacy Policy - Company Name\", \"Product Name - Category - Store\". Avoid generic titles like \"Home\", \"Page\", or \"Untitled\"."
        },
        'ErrEmptyTitleAttr': {
            'title': "Empty title attribute",
            'what': "Empty title attribute",
            'why': "Empty titles provide no information",
            'who': "Users expecting tooltip information",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2'],
            'remediation': "Remove empty title attributes"
        },
        'ErrEmptyXmlLangAttr': {
            'title': "xml:lang attribute is empty",
            'what': "xml:lang attribute is empty",
            'why': "Empty xml:lang provides no language information",
            'who': "Screen reader users using XML/XHTML parsers",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Add valid language code to xml:lang attribute"
        },
        'ErrFakeListImplementation': {
            'title': "Visual list created without proper list markup",
            'what': "Element contains {itemCount} list-like items using {pattern}, but does not use proper <ul>/<ol> and <li> markup",
            'why': "Fake lists don\'t convey proper structure to assistive technologies, preventing users from understanding relationships between items. Screen readers cannot announce the number of items, allow list navigation, or provide context about the list structure.",
            'who': "Screen reader users who cannot navigate lists properly, users who rely on structural navigation, keyboard users who cannot jump between list items.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Replace the visual list simulation with proper semantic HTML list markup. Use <ul> or <ol> elements with <li> children for each list item. Remove the {pattern} and let the browser handle list presentation through proper HTML semantics and CSS styling."
        },
        'ErrFielLabelledBySomethingNotALabel': {
            'title': "Field is labeled by an element that is not a proper label",
            'what': "Field is labeled by an element that is not a proper label",
            'why': "Non-label elements may not provide appropriate semantic relationships",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Use proper <label> elements or appropriate ARIA labeling"
        },
        'ErrFieldAriaRefDoesNotExist': {
            'title': "aria-labelledby references non-existent element ID \'{found}\'",
            'what': "aria-labelledby references non-existent element ID \'{found}\'",
            'why': "The aria-labelledby attribute references \'{found}\' but no element with id=\"{found}\" exists on the page. This broken reference means the field has no accessible label for screen readers.",
            'who': "Screen reader users who receive no label for this field",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Either create an element with id=\"{found}\" to serve as the label, fix the ID reference to point to an existing element, or use a different labeling method like a <label> element"
        },
        'ErrFieldLabelledUsinAriaLabel': {
            'title': "Field labeled using aria-label instead of visible label",
            'what': "Field labeled using aria-label instead of visible label",
            'why': "Visible labels benefit all users, not just screen reader users",
            'who': "Users with cognitive disabilities, all users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.3.2'],
            'remediation': "Use visible <label> elements instead of aria-label when possible"
        },
        'ErrFieldReferenceDoesNotExist': {
            'title': "Label for attribute references non-existent field",
            'what': "Label for attribute references non-existent field",
            'why': "Label is not associated with any form field",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Fix the for/id relationship"
        },
        'ErrFormAriaLabelledByIsBlank': {
            'title': "Form aria-labelledby references blank or empty element",
            'what': "Form aria-labelledby references blank or empty element",
            'why': "No accessible name is provided",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Reference element with actual text content"
        },
        'ErrFormAriaLabelledByReferenceDIsHidden': {
            'title': "Form aria-labelledby references hidden element",
            'what': "Form aria-labelledby references hidden element",
            'why': "Hidden elements may not provide accessible names",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Reference visible elements only"
        },
        'ErrFormAriaLabelledByReferenceDoesNotExist': {
            'title': "Form aria-labelledby references non-existent element",
            'what': "Form aria-labelledby references non-existent element",
            'why': "Broken reference provides no accessible name",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Fix ID reference or use different labeling method"
        },
        'ErrFormAriaLabelledByReferenceDoesNotReferenceAHeading': {
            'title': "Form aria-labelledby doesn\'t reference a heading element",
            'what': "Form aria-labelledby doesn\'t reference a heading element",
            'why': "Best practice is to reference headings for form landmarks",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Reference a heading element when possible"
        },
        'ErrFormEmptyHasNoChildNodes': {
            'title': "Form element is completely empty with no child nodes",
            'what': "Form element is completely empty with no child nodes",
            'why': "Empty forms serve no purpose and confuse assistive technology users",
            'who': "Screen reader users, keyboard users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Remove empty form elements or add appropriate form controls"
        },
        'ErrFormEmptyHasNoInteractiveElements': {
            'title': "Form has content but no interactive elements",
            'what': "Form has content but no interactive elements",
            'why': "Forms without inputs cannot be used for their intended purpose",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Add appropriate input fields, buttons, or other form controls"
        },
        'ErrFormLandmarkAccessibleNameIsBlank': {
            'title': "Form landmark has blank accessible name",
            'what': "Form landmark has blank accessible name",
            'why': "Forms need clear identification",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label describing form purpose"
        },
        'ErrFormLandmarkMustHaveAccessibleName': {
            'title': "Form element missing accessible name required to become a landmark",
            'what': "A <form> element or element with role=\"form\" lacks an accessible name via aria-label or aria-labelledby. Without an accessible name, <form> elements do not create form landmarks, making them harder for screen reader users to discover and navigate. Elements with explicit role=\"form\" always create landmarks and absolutely require accessible names.",
            'why': "Form landmarks are critical navigation points that allow screen reader users to quickly jump between different forms on a page using landmark navigation commands. A <form> element only becomes a landmark when it has an accessible name - without one, it remains a generic container that screen readers cannot easily locate. When a page has multiple forms (like a search form, newsletter signup, and contact form), users need these named landmarks to efficiently navigate to the form they want without tabbing through every field. Elements with explicit role=\"form\" create landmarks regardless of accessible name presence, but an unnamed form landmark announces as just \"form\" with no identifying information, forcing users to explore its contents to determine its purpose.",
            'who': "Screen reader users who rely on landmark navigation to efficiently move between page regions and locate forms, users with motor disabilities who use voice control and need to target forms by name, users with cognitive disabilities who benefit from clear form identification and predictable navigation structure, mobile screen reader users who need quick access to forms without exploring entire pages, and power users who navigate by landmarks to skip repetitive content and go directly to specific forms",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.3.2', '5.2.4'],
            'remediation': "Add aria-label with a descriptive name to the form element (e.g., <form aria-label=\"Newsletter signup\">), or use aria-labelledby to reference a visible heading that describes the form's purpose (e.g., <form aria-labelledby=\"contact-heading\"> with <h2 id=\"contact-heading\">Contact Us</h2>). Prefer aria-labelledby when there is a visible heading that describes the form, as this benefits all users. Use aria-label for secondary forms like search that may not have dedicated headings. Ensure each accessible name clearly distinguishes the form's purpose when multiple forms exist on the page."
        },
        'ErrFormLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Form landmark has both aria-label and aria-labelledby",
            'what': "Form landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrFormUsesAriaLabelInsteadOfVisibleElement': {
            'title': "Form uses aria-label instead of visible heading or label",
            'what': "Form uses aria-label instead of visible heading or label",
            'why': "Visible labels benefit all users",
            'who': "All users, especially those with cognitive disabilities",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3', '3.3.2'],
            'remediation': "Use visible heading with aria-labelledby"
        },
        'ErrFormUsesTitleAttribute': {
            'title': "Form uses title attribute for labeling",
            'what': "Form uses title attribute for labeling",
            'why': "Title attributes are not reliably accessible",
            'who': "Screen reader users, mobile users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use aria-label or aria-labelledby instead"
        },
        'ErrFoundAriaLevelButNoRoleAppliedAtAll': {
            'title': "aria-level attribute without role=\"heading\"",
            'what': "aria-level attribute without role=\"heading\"",
            'why': "aria-level only works with heading role",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Add role=\"heading\" or use native heading element"
        },
        'ErrFoundAriaLevelButRoleIsNotHeading': {
            'title': "aria-level on element without heading role",
            'what': "aria-level on element without heading role",
            'why': "aria-level requires heading role to work",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Add role=\"heading\" or remove aria-level"
        },
        'ErrHeaderMissingScope': {
            'title': "Table header (th) element missing scope attribute",
            'what': "Table header (th) element missing scope attribute",
            'why': "Without scope attributes, screen readers cannot properly associate headers with data cells, making tables difficult to understand.",
            'who': "Screen reader users navigating complex tables, users who rely on proper table semantics for comprehension.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add scope=\"col\" for column headers and scope=\"row\" for row headers to all th elements."
        },
        'ErrHreflangAttrEmpty': {
            'title': "hreflang attribute is empty on link",
            'what': "hreflang attribute is empty on link",
            'why': "Empty hreflang provides no language information for the linked resource",
            'who': "Screen reader users, search engines",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Add valid language code or remove empty hreflang attribute"
        },
        'ErrHreflangNotOnLink': {
            'title': "hreflang attribute on non-link element",
            'what': "hreflang attribute on non-link element",
            'why': "hreflang only works on links",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Move hreflang to anchor elements only"
        },
        'ErrIframeWithNoTitleAttr': {
            'title': "Iframe element is missing the required title attribute",
            'what': "Iframe element is missing the required title attribute",
            'why': "Iframes embed external content like videos, maps, or forms within your page. Without a title attribute, screen reader users hear only \"iframe\" with no indication of what content it contains. This is like having a door with no label - users don\'t know what\'s behind it. They must enter the iframe and explore its content to understand its purpose, which is time-consuming and may be confusing if the iframe content lacks context. For pages with multiple iframes, users cannot distinguish between them or decide which ones are worth exploring.",
            'who': "Screen reader users who need to understand what each iframe contains before deciding whether to interact with it, keyboard users navigating through iframes who need context about embedded content, users with cognitive disabilities who need clear labeling of all page regions, and users on slow connections who may experience delays loading iframe content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Add a title attribute to every iframe that concisely describes its content or purpose (e.g., title=\"YouTube video: Product demonstration\", title=\"Google Maps: Office location\", title=\"Payment form\"). The title should be unique if there are multiple iframes. Keep it brief but descriptive enough that users understand what the iframe contains without having to enter it. For decorative iframes (rare), you can use title=\"\" and add tabindex=\"-1\" to remove it from tab order."
        },
        'ErrImageAltContainsHTML': {
            'title': "Image\'s alternative text contains HTML markup tags",
            'what': "Image\'s alternative text contains HTML markup tags",
            'why': "HTML in alt text is not parsed, so screen readers will read the HTML markup as literal characters. Users will hear angle brackets announced as \"less than\" or \"greater than\" and tag names spelled out, creating a confusing experience. For example, alt=\"<b>Team Photo</b>\" would be read as \"less than b greater than Team Photo less than slash b greater than\".",
            'who': "Blind and low vision users using screen readers who will hear nonsense characters and words interspersed with the actual alt text, making it difficult or impossible to understand the image content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Remove all HTML markup from alt attributes and use only plain text. If formatting or structure is important to convey, describe it in words rather than using markup (e.g., instead of \"<em>Important</em>\" use \"Important, emphasized\")."
        },
        'ErrImageWithEmptyAlt': {
            'title': "Image alt attribute contains only whitespace characters (spaces, tabs, line breaks), providing no accessible name",
            'what': "Image alt attribute contains only whitespace characters (spaces, tabs, line breaks), providing no accessible name",
            'why': "Whitespace-only alt attributes fail to provide any accessible name for the image, causing screen readers to announce unhelpful fallback information like the image filename or \"unlabeled graphic\". Unlike properly empty alt=\"\" which signals decorative content, whitespace alt text creates ambiguity - users cannot determine if they\'re missing important information or if the image is decorative.",
            'who': "Blind and low vision users relying on screen readers who cannot determine the image\'s purpose or content, users with cognitive disabilities who depend on clear labeling to understand page content, and users of voice control software who cannot reference images without accessible names",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.1.1'],
            'remediation': "Determine the image\'s purpose and apply appropriate alt text - for informative images add descriptive alternative text that conveys the same information, for decorative images use alt=\"\" (no spaces) to properly mark them as decorative, for functional images describe the action or destination not the appearance, and remove any whitespace-only alt attributes that serve as ineffective placeholders"
        },
        'ErrImageWithImgFileExtensionAlt': {
            'title': "Alt text contains image filename with file extension (e",
            'what': "Alt text contains image filename with file extension (e.g., \"photo.jpg\", \"IMG_1234.png\", \"banner.gif\"), providing no meaningful description of the image content",
            'why': "Filenames rarely describe image content meaningfully and often contain technical identifiers, underscores, hyphens, or numbers that create a poor listening experience when announced by screen readers. Users hear cryptic strings like \"DSC underscore zero zero four two dot jay peg\" instead of learning what the image actually shows, forcing them to guess at important visual information or miss it entirely.",
            'who': "Blind and low vision users using screen readers who need meaningful descriptions to understand visual content, users with cognitive disabilities who rely on clear, descriptive text to process information, users in low-bandwidth situations where images don\'t load and only alt text is displayed, and search engine users who rely on descriptive alt text for finding relevant content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Replace the filename with descriptive text that conveys the image\'s information or purpose (change alt=\"hero-banner-2.jpg\" to alt=\"Students collaborating in the campus library\"), focus on what the image communicates rather than technical details, ensure the description makes sense when read in context with surrounding content, and avoid including file extensions or technical metadata in alt attributes"
        },
        'ErrImageWithNoAlt': {
            'title': "Images are missing alternative text attributes, preventing assistive technologies from conveying their content or purpose to users",
            'what': "Images are missing alternative text attributes, preventing assistive technologies from conveying their content or purpose to users",
            'why': "Screen readers cannot describe image content to users who are blind or have low vision, creating information barriers that may prevent understanding of essential content, navigation, or task completion. This also affects users with cognitive disabilities who benefit from text alternatives and users on slow connections where images fail to load.",
            'who': "Blind users using screen readers, users with low vision using screen readers with magnification, users with cognitive disabilities who rely on text alternatives, voice control users who need text labels to reference elements, and users on slow internet connections",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Add descriptive alt attributes for informative images (alt=\"Sales chart showing 40% increase\"), use empty alt attributes for decorative images (alt=\"\"), describe the function for interactive images (alt=\"Search\" not alt=\"magnifying glass icon\"), and provide detailed descriptions via aria-describedby for complex images like charts or diagrams."
        },
        'ErrImageWithURLAsAlt': {
            'title': "Alt attribute contains a URL (starting with http://, https://, www",
            'what': "Alt attribute contains a URL (starting with http://, https://, www., or file://) instead of descriptive text about the image content",
            'why': "URLs provide no meaningful information about what an image shows or its purpose on the page. Screen reader users hear lengthy, difficult-to-parse web addresses being spelled out character by character or in chunks like \"h-t-t-p-colon-slash-slash-w-w-w-dot\", creating a frustrating experience that conveys nothing about the actual image content. This often happens when image source URLs are mistakenly copied into alt attributes.",
            'who': "Blind and low vision users using screen readers who need meaningful descriptions instead of technical URLs, users with cognitive disabilities who cannot process or remember long URL strings to understand image content, users in low-bandwidth situations where only alt text displays when images fail to load, and voice control users who cannot effectively reference images labeled with URLs",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Replace the URL with descriptive text that conveys what the image shows or its function (change alt=\"https://example.com/images/team-photo.jpg\" to alt=\"Marketing team at annual conference\"), focus on describing the image content rather than its location or technical details, ensure the description makes sense in the page context, and never use the image\'s web address as its alternative text"
        },
        'ErrImproperTitleAttribute': {
            'title': "Title attribute used improperly as primary labeling mechanism",
            'what': "Title attribute used improperly as primary labeling mechanism",
            'why': "Title attributes are not reliably announced by all assistive technologies and should not be the only way to provide essential information.",
            'who': "Screen reader users who may not receive title attribute content, mobile users who cannot hover to see tooltips.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2'],
            'remediation': "Use proper labeling techniques (label elements, aria-label) instead of relying on title attributes for essential information."
        },
        'ErrInappropriateMenuRole': {
            'title': "Menu role used inappropriately for navigation links",
            'what': "Menu role used inappropriately for navigation links",
            'why': "Menu role is for application menus, not navigation. Misuse causes incorrect keyboard behavior and screen reader announcements.",
            'who': "Screen reader users expecting application menu behavior, keyboard users expecting arrow key navigation.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use nav element or role=\"navigation\" for site navigation, reserve role=\"menu\" for actual application menus with proper ARIA patterns."
        },
        'ErrIncorrectHeadingLevel': {
            'title': "Heading level used incorrectly based on visual appearance rather than document structure",
            'what': "Heading level used incorrectly based on visual appearance rather than document structure",
            'why': "Incorrect heading levels break the document outline and make it difficult to understand content hierarchy.",
            'who': "Screen reader users navigating by headings, users who rely on proper document structure.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use heading levels to convey document structure (h1 > h2 > h3), not for visual styling; use CSS for appearance."
        },
        'ErrIncorrectlyFormattedPrimaryLang': {
            'title': "Language code incorrectly formatted",
            'what': "Language code incorrectly formatted",
            'why': "Malformed codes may not work properly",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1'],
            'remediation': "Use correct format: \"en-US\" or \"en\""
        },
        'ErrInfiniteAnimation': {
            'title': "Animation '{animationName}' runs infinitely without pause controls",
            'what': "Animation '{animationName}' runs infinitely without pause controls",
            'why': "Continuous animations can trigger seizures, cause distraction, and make content unusable for many users. This animation is set to repeat indefinitely (animation-iteration-count: infinite).",
            'who': "Users with vestibular disorders, users with ADHD, users with photosensitive epilepsy, users with cognitive disabilities.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.2.2'],
            'remediation': "Provide pause/stop controls for all animations, respect prefers-reduced-motion settings, or limit animation-iteration-count to a finite number. Current CSS:\n{animationCSS}"
        },
        'ErrInsufficientContrast': {
            'title': "Text contrast ratio {ratio}:1 does not meet WCAG requirements (required: {required}:1)",
            'what': "Text contrast ratio {ratio}:1 does not meet WCAG requirements (required: {required}:1)",
            'why': "Insufficient contrast ({ratio}:1) makes text unreadable for users with low vision or in challenging lighting conditions. Text color {fg} on background {bg} does not provide enough distinction.",
            'who': "Users with low vision, users with color blindness, aging users, all users in bright sunlight or glare.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3'],
            'remediation': "Current contrast is {ratio}:1, but at least {required}:1 is required. Adjust foreground color {fg} or background color {bg} to meet requirements. For {fontSize}px text, ensure 4.5:1 for normal text or 3:1 for large text (18pt+)."
        },
        'ErrInvalidAriaLevel': {
            'title': "Invalid aria-level value (not 1-6)",
            'what': "Invalid aria-level value (not 1-6)",
            'why': "Invalid levels break heading hierarchy",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Use aria-level values 1 through 6 only"
        },
        'ErrInvalidGenericLinkName': {
            'title': "Link text is generic and provides no information about destination",
            'what': "Link text is generic and provides no information about destination",
            'why': "Generic link text like \"click here\" provides no context when links are reviewed out of context.",
            'who': "Screen reader users navigating by links, users with cognitive disabilities who need clear link purposes.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.4'],
            'remediation': "Use descriptive link text that explains the destination or action, avoid generic phrases like \"click here\" or \"read more\"."
        },
        'ErrInvalidLanguageCode': {
            'title': "Language attribute contains invalid code \'{found}\' that doesn\'t conform to ISO 639 standards",
            'what': "Language attribute contains invalid code \'{found}\' that doesn\'t conform to ISO 639 standards",
            'why': "The language code \'{found}\' is not recognized as a valid ISO 639 language code. This prevents assistive technologies from properly processing content, causing screen readers to mispronounce words, use incorrect inflection patterns, or fail to switch language engines. This can make content difficult or impossible to understand when read aloud, especially if the content is in a non-English language but gets read with English pronunciation rules.",
            'who': "Blind and low vision users relying on screen readers for accurate pronunciation, multilingual users who need proper language identification for comprehension, users with reading disabilities using text-to-speech tools, and international users accessing content in multiple languages",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1', '3.1.2'],
            'remediation': "Replace \'{found}\' with a valid ISO 639-1 or ISO 639-2 language code. If \'{found}\' appears to be English, use \"en\". Common corrections: \"english\" → \"en\", \"spanish\" → \"es\", \"french\" → \"fr\", \"deutsch\" → \"de\", \"eng\" → \"en\". For regional variants use BCP 47 format (e.g., \"en-US\", \"en-GB\", \"es-MX\"). Check the official ISO 639 registry for the correct code."
        },
        'ErrInvalidTabindex': {
            'title': "Element has a tabindex attribute with an invalid value (non-numeric or decimal)",
            'what': "Element has a tabindex attribute with an invalid value (non-numeric or decimal)",
            'why': "Invalid tabindex values are ignored by browsers, potentially making interactive elements unreachable by keyboard or creating unpredictable focus behavior. This can completely block keyboard users from accessing functionality. The element might be skipped during tabbing, receive focus unexpectedly, or behave differently across browsers.",
            'who': "Keyboard users who cannot reach or interact with the element, screen reader users who may miss important interactive controls, users with motor disabilities relying on keyboard navigation, and users who cannot use a mouse",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3'],
            'remediation': "Use only valid integer values for tabindex: \"0\" to include in natural tab order, \"-1\" to remove from tab order but allow programmatic focus, or remove the tabindex attribute entirely if the element shouldn\'t be focusable. Never use decimal values (1.5), text (\"first\"), or empty values (tabindex=\"\")."
        },
        'ErrLabelContainsMultipleFields': {
            'title': "Single label contains {count} form fields",
            'what': "Single label contains {count} form fields",
            'why': "A label containing {count} fields creates ambiguity about which field it describes. Screen readers will associate this label with all {count} fields, making it unclear which field is which.",
            'who': "Screen reader users who need clear field identification, users with cognitive disabilities who need simple relationships",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Split the label so each of the {count} fields has its own dedicated label. Use fieldset and legend for grouped fields if they\'re related."
        },
        'ErrLabelMismatchOfAccessibleNameAndLabelText': {
            'title': "Accessible name doesn\'t match visible label",
            'what': "Accessible name doesn\'t match visible label",
            'why': "Confusing for voice control users",
            'who': "Voice control users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3'],
            'remediation': "Make accessible name match visible text"
        },
        'ErrLargeTextContrastAA': {
            'title': "Large text ({fontSize}px) fails WCAG AA contrast: {ratio}:1 (required: 3:1)",
            'what': "Large text fails WCAG AA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This large text ({fontSize}px) with a contrast ratio of {ratio}:1 does not meet WCAG Level AA requirements. Large text (24px+ or 18.66px+ bold) requires a minimum contrast ratio of 3:1 to pass Level AA. The foreground color ({fg}) against background ({bg}) doesn\'t provide enough distinction.",
            'who': "Users with low vision, color blindness, or age-related vision changes who struggle to distinguish text with insufficient contrast, even when the text is larger",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AA requires at least 3:1 for large text ({fontSize}px). To fix, adjust the foreground color from {fg} or the background from {bg}. Consider using #949494 or darker on white background for large text."
        },
        'ErrLargeTextContrastAAA': {
            'title': "Large text ({fontSize}px) fails WCAG AAA contrast: {ratio}:1 (required: 4.5:1)",
            'what': "Large text fails WCAG AAA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This large text ({fontSize}px) with a contrast ratio of {ratio}:1 does not meet WCAG Level AAA enhanced requirements. Large text (24px+ or 18.66px+ bold) requires a minimum contrast ratio of 4.5:1 to pass Level AAA for enhanced accessibility.",
            'who': "Users with moderate visual impairments who benefit from enhanced contrast even for large text, ensuring optimal readability in all conditions",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.6'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AAA requires at least 4.5:1 for large text ({fontSize}px). To fix, adjust colors to achieve higher contrast, such as #767676 or darker on white background for large text at Level AAA."
        },
        'ErrLinkOpensNewWindowNoWarning': {
            'title': "Link opens in new window/tab without warning users",
            'what': "Link opens in new window/tab without warning users",
            'why': "Unexpectedly opening new windows can disorient users, especially those using screen readers or magnification. Users may not realize a new window opened and become confused when the back button doesn\'t work. This is particularly problematic for users with cognitive disabilities or those unfamiliar with browser behaviors.",
            'who': "Screen reader users who may not notice the context change, users with cognitive disabilities who may become disoriented, users with motor disabilities who have difficulty managing multiple windows, and novice computer users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.2.2'],
            'remediation': "Add visible text or an icon indicating the link opens in a new window. Include this information in the accessible name (e.g., \"Annual report (opens in new window)\"). Consider whether opening in a new window is necessary - often it\'s better to open in the same window and let users control this behavior."
        },
        'ErrLinkTextNotDescriptive': {
            'title': "Link text does not adequately describe the link\'s destination or purpose",
            'what': "Link text does not adequately describe the link\'s destination or purpose",
            'why': "Users need to understand where a link will take them before activating it. Vague link text like \"click here\" or \"read more\" provides no information about the destination. Screen reader users often navigate by pulling up a list of all links, where non-descriptive text becomes meaningless out of context.",
            'who': "Screen reader users navigating by links list, users with cognitive disabilities who need clear navigation cues, and users with motor disabilities who need to make informed decisions before activating links",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.4'],
            'remediation': "Write link text that describes the destination or action (e.g., \"Download 2024 annual report\" instead of \"Download\"). Avoid generic phrases. If design constraints require short link text, provide additional context through aria-label or aria-describedby, or ensure surrounding text provides context."
        },
        'ErrMainLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Main landmark has both aria-label and aria-labelledby attributes",
            'what': "Main landmark has both aria-label and aria-labelledby attributes",
            'why': "Conflicting labeling methods may cause confusion",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method - either aria-label or aria-labelledby"
        },
        'ErrMainLandmarkHasTabindexOfZeroCanOnlyHaveMinusOneAtMost': {
            'title': "Main landmark has tabindex=\"0\" which is inappropriate",
            'what': "Main landmark has tabindex=\"0\" which is inappropriate",
            'why': "Landmarks should not be in the tab order",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove tabindex or use tabindex=\"-1\" if programmatic focus is needed"
        },
        'ErrMainLandmarkIsHidden': {
            'title': "Main landmark is hidden from view",
            'what': "Main landmark is hidden from view",
            'why': "Hidden main content defeats the purpose of the landmark",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure main landmark is visible or remove if not needed"
        },
        'ErrMainLandmarkMayNotbeChildOfAnotherLandmark': {
            'title': "Main landmark nested inside another landmark",
            'what': "Main landmark nested inside another landmark",
            'why': "Invalid landmark nesting breaks structure",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Move main outside of other landmarks"
        },
        'ErrMapAriaHidden': {
            'title': "Map element hidden from assistive technologies with aria-hidden",
            'what': "Map element hidden from assistive technologies with aria-hidden",
            'why': "Hiding maps completely removes access to important geographic or spatial information for screen reader users.",
            'who': "Blind and low vision users who need text alternatives for map information.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Remove aria-hidden from maps, provide appropriate text alternatives and accessible controls instead."
        },
        'ErrMapMissingTitle': {
            'title': "Map iframe missing title attribute",
            'what': "Map iframe missing title attribute",
            'why': "Without titles, screen reader users don\'t know what the embedded map contains or represents.",
            'who': "Screen reader users who need to understand embedded content purpose.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.1.1'],
            'remediation': "Add descriptive title attribute to map iframes (e.g., title=\"Map showing office location\")."
        },
        'ErrMissingAccessibleName': {
            'title': "Interactive element has no accessible name",
            'what': "Interactive element has no accessible name",
            'why': "Without accessible names, screen reader users cannot identify or interact with controls.",
            'who': "Screen reader users who cannot identify unnamed controls, voice control users who cannot target elements.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-label, aria-labelledby, or visible text labels to all interactive elements."
        },
        'ErrMissingCloseButton': {
            'title': "Modal or dialog missing close button",
            'what': "Modal or dialog missing close button",
            'why': "Without a close button, users can become trapped in modals with no way to return to main content.",
            'who': "Keyboard users who cannot use escape key, screen reader users who need explicit close controls.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.2'],
            'remediation': "Add visible close button to all modals and dialogs, ensure it\'s keyboard accessible and properly labeled."
        },
        'ErrMissingDocumentType': {
            'title': "HTML document missing DOCTYPE declaration",
            'what': "HTML document missing DOCTYPE declaration",
            'why': "Missing DOCTYPE can cause browsers to render in quirks mode, leading to unpredictable behavior and accessibility issues.",
            'who': "All users due to potential rendering issues, assistive technology users affected by parsing errors.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.1'],
            'remediation': "Add <!DOCTYPE html> as the first line of all HTML documents."
        },
        'ErrMissingMainLandmark': {
            'title': "Page missing main landmark for primary content",
            'what': "Page missing main landmark for primary content",
            'why': "Without a main landmark, screen reader users cannot quickly navigate to the primary content area.",
            'who': "Screen reader users who navigate by landmarks, keyboard users using landmark navigation.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add <main> element or role=\"main\" to identify the primary content area of each page."
        },
        'ErrMissingTabindex': {
            'title': "<{elementTag}> with event handler not keyboard accessible - missing tabindex",
            'what': "This <{elementTag}> element has a mouse event handler (onclick, onmousedown, etc.) but lacks tabindex, making it completely inaccessible to keyboard users",
            'why': "Non-interactive elements like <div> and <span> are not focusable by default. Adding mouse event handlers without tabindex=\"0\" creates a complete barrier - keyboard users cannot focus the element, cannot activate it with Enter/Space, and screen readers may not announce it as interactive. This is a critical accessibility failure.",
            'who': "Keyboard users who cannot use a mouse, screen reader users navigating by Tab key, users with motor disabilities who rely on keyboard navigation, voice control users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1 Keyboard', '2.1.3 Keyboard (No Exception)'],
            'remediation': "Option 1 (Recommended): Replace the <{elementTag}> with a semantic <button> element, which is keyboard accessible by default and provides proper semantics. Option 2: Add tabindex=\"0\" to make it focusable, AND add a keyboard event handler (onkeydown/onkeyup) to handle Enter and Space keys. Option 3: Add role=\"button\" AND tabindex=\"0\" AND keyboard event handlers. Native HTML buttons are strongly preferred as they provide all accessibility features automatically."
        },
        'ErrModalMissingClose': {
            'title': "Modal dialog has no way to close it",
            'what': "Modal dialog has no way to close it",
            'why': "Users become trapped in the modal with no way to return to the main content.",
            'who': "All users, especially keyboard users who cannot click outside to close.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.2'],
            'remediation': "Provide at least one clear way to close modals (close button, escape key, cancel button)."
        },
        'ErrModalMissingHeading': {
            'title': "Modal has h{foundLevel} heading but should use h2 or h1",
            'what': "Modal has h{foundLevel} heading (\"{headingText}\") but should use h2 (or h1) for proper document structure",
            'why': "Without proper heading structure, users don\'t know the purpose or context of the modal content. Modals should start with h1 or h2 headings to maintain document structure and provide clear context.",
            'who': "Screen reader users who need to understand modal purpose and navigate by headings, users with cognitive disabilities who rely on clear document structure.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.6'],
            'remediation': "Change the modal heading from h{foundLevel} to h2 (or h1 if this is the page's main heading). Current heading: \"{headingText}\". Modals should use h2 to maintain proper document hierarchy and provide clear context for all users."
        },
        'ErrModalWithoutEscape': {
            'title': "Modal cannot be closed using the Escape key",
            'what': "Modal cannot be closed using the Escape key",
            'why': "Escape key is the expected keyboard shortcut for closing modals; without it, keyboard users may become trapped.",
            'who': "Keyboard users who expect standard modal behavior, power users who rely on keyboard shortcuts.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.2'],
            'remediation': "Implement Escape key handler to close modals, ensure it works even when focus is within modal content."
        },
        'ErrMouseOnlyHandler': {
            'title': "Interactive functionality only available through mouse events",
            'what': "Element has mouse event handler (onclick, onmouseover, etc.) but lacks keyboard event handlers, making it inaccessible to keyboard users",
            'why': "Mouse-only interactions exclude users who cannot use a pointing device. While adding role=\"button\" helps screen readers identify the element as interactive, it does not provide keyboard functionality - keyboard event handlers are still required.",
            'who': "Keyboard users, screen reader users, users with motor disabilities, mobile device users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1'],
            'remediation': "Best practice: Use a <button> element instead of <div> or <span>, which provides mouse and keyboard support automatically. If you must use a non-button element: (1) Add role=\"button\" for screen reader support, (2) Add tabindex=\"0\" to make it keyboard focusable, (3) Add onkeydown handler to respond to Enter and Space keys: onkeydown=\"if(event.key==='Enter'||event.key===' '){/* your action */}\". Note that role=\"button\" alone does NOT provide keyboard functionality."
        },
        'ErrMultipleBannerLandmarks': {
            'title': "Multiple banner landmarks found",
            'what': "Multiple banner landmarks found",
            'why': "Multiple headers confuse page structure",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use only one banner landmark"
        },
        'ErrMultipleContentinfoLandmarks': {
            'title': "Multiple contentinfo landmarks found",
            'what': "Multiple contentinfo landmarks found",
            'why': "Multiple footers confuse page structure",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use only one contentinfo landmark"
        },
        'ErrMultipleH1': {
            'title': "Page contains {count} h1 elements instead of just one",
            'what': "Page contains {count} h1 elements instead of just one",
            'why': "Having {count} h1 elements creates confusion about the page\'s main topic. Each h1 represents a primary heading, and multiple h1s suggest multiple main topics, breaking the document hierarchy. Screen readers users won\'t know which h1 represents the actual page topic.",
            'who': "Screen reader users who expect a single h1 to identify the page topic, users navigating by headings who see multiple \"top level\" items, SEO and search engines that look for a single main topic",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Keep only one h1 that represents the main page topic. Change the other h1 elements to h2 or appropriate lower levels based on their relationship to the main topic."
        },
        'ErrMultipleMainLandmarks': {
            'title': "Multiple main landmark regions found on the page",
            'what': "Multiple main landmark regions found on the page",
            'why': "The main landmark should contain THE primary content of the page - having multiple main landmarks is like having multiple \"Chapter 1\" sections in a book. It confuses the page structure and defeats the purpose of landmarks. Screen reader users expecting to jump to the main content won\'t know which landmark contains the actual primary content. They might land in the wrong section, miss important content, or have to check multiple \"main\" areas. This ambiguity makes the landmark system unreliable and forces users back to linear navigation.",
            'who': "Screen reader users relying on the main landmark to skip to primary content, keyboard users using landmark navigation extensions, users with cognitive disabilities who need clear, unambiguous page structure, and developers trying to understand the intended page structure",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Use only one <main> element or role=\"main\" per page. Identify which content is truly the primary, unique content for that page and wrap only that in the main landmark. If you have multiple important sections, use other appropriate landmarks (article, section) or headings to structure them within the single main landmark. The main should contain all unique page content but exclude repeated elements like headers, navigation, and footers."
        },
        'ErrMultiplePageTitles': {
            'title': "Multiple title elements found in document",
            'what': "Multiple title elements found in document",
            'why': "Multiple titles may confuse assistive technologies",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.2'],
            'remediation': "Use only one title element per page"
        },
        'ErrNativeVideoMissingControls': {
            'title': "Native HTML5 video element missing controls attribute",
            'what': "Native HTML5 video element missing controls attribute",
            'why': "Without controls, users cannot play, pause, or adjust video playback.",
            'who': "All users who need to control video playback, especially keyboard and screen reader users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1'],
            'remediation': "Add controls attribute to all video elements, or provide custom accessible controls."
        },
        'ErrNavLandmarkAccessibleNameIsBlank': {
            'title': "Navigation landmark has blank accessible name",
            'what': "Navigation landmark has blank accessible name",
            'why': "Multiple nav areas need labels",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add aria-label like \"Main navigation\" or \"Footer navigation\""
        },
        'ErrNavLandmarkContainsOnlyWhiteSpace': {
            'title': "Navigation landmark contains only whitespace",
            'what': "Navigation landmark contains only whitespace",
            'why': "Whitespace-only navigation is not functional",
            'who': "All users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Add navigation links or remove the landmark"
        },
        'ErrNavLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Navigation landmark has both aria-label and aria-labelledby",
            'what': "Navigation landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrNavMissingAccessibleName': {
            'title': "Navigation element lacks accessible name to distinguish it",
            'what': "Navigation element lacks accessible name to distinguish it",
            'why': "When pages have multiple navigation areas, users need to distinguish between them.",
            'who': "Screen reader users navigating by landmarks, users who need to understand page structure.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby to nav elements to identify their purpose (e.g., \"Main navigation\", \"Breadcrumb\")."
        },
        'ErrNegativeTabindex': {
            'title': "Negative tabindex on interactive element",
            'what': "Negative tabindex on interactive element",
            'why': "Element removed from tab order",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Use tabindex=\"0\" for interactive elements"
        },
        'ErrNestedNavLandmarks': {
            'title': "Navigation landmarks are nested",
            'what': "Navigation landmarks are nested",
            'why': "Confusing navigation structure",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Flatten navigation structure"
        },
        'ErrNoAlt': {
            'title': "Image missing alt attribute entirely",
            'what': "Image missing alt attribute entirely",
            'why': "Without alt attributes, screen readers cannot convey any information about images to users.",
            'who': "Blind and low vision users using screen readers, users with images disabled.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Add alt attribute to all img elements; use alt=\"\" for decorative images, descriptive text for informative images."
        },
        'ErrNoBannerLandmarkOnPage': {
            'title': "Page is missing a banner landmark to identify the site header region",
            'what': "Page is missing a banner landmark to identify the site header region",
            'why': "The banner landmark identifies the site header which typically contains the site logo, main navigation, and search functionality. This content appears consistently across pages and users expect to find it at the top. Without proper banner markup, screen reader users cannot quickly jump to the header area using landmark navigation shortcuts. They must instead navigate through all content linearly or guess where the header content begins and ends. This makes it difficult to access primary navigation or return to the site homepage via the logo link, tasks that sighted users can do instantly by looking at the top of the page.",
            'who': "Screen reader users who use landmark navigation to quickly access site navigation and branding, keyboard users who want to efficiently navigate to header elements, users with cognitive disabilities who rely on consistent page structure to orient themselves, and users with low vision using screen magnifiers who need to quickly locate navigation elements",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Use the HTML5 <header> element for your site header (it has an implicit role of banner when it\'s not nested inside article, aside, main, nav, or section elements). Alternatively, add role=\"banner\" to the container holding your header content. There should typically be only one banner landmark per page at the top level. Include site-wide content like logo, primary navigation, and site search within the banner landmark."
        },
        'ErrNoFocusIndicator': {
            'title': "Interactive element has no visible focus indicator when focused, making keyboard navigation impossible to track",
            'what': "Interactive element has no visible focus indicator when focused, making keyboard navigation impossible to track",
            'why': "Focus indicators show keyboard users where they are on the page - without them, it\'s like navigating in the dark. Users cannot see which element will be activated when they press Enter or Space, making it impossible to navigate confidently. They might activate the wrong control, skip important content, or become completely lost on the page. This is especially critical for forms where activating the wrong button could submit incomplete data or cancel an operation.",
            'who': "Keyboard users who need to see their current position, users with attention or memory disabilities who lose track of focus position, users with low vision who need clear visual indicators, users with motor disabilities who need to carefully track navigation, and any user who temporarily cannot use a mouse",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Ensure all interactive elements have a visible focus indicator using CSS :focus styles. Add outline, border, background color, or box-shadow changes. Make focus indicators clearly visible with sufficient color contrast (3:1 minimum). Never use outline: none without providing an alternative indicator. Consider using :focus-visible for keyboard-only focus styles. Test by tabbing through your entire page to ensure every interactive element shows focus clearly."
        },
        'ErrNoH1': {
            'title': "Page has no h1 heading",
            'what': "Page has no h1 heading",
            'why': "H1 headings identify the main topic of a page and are crucial for document structure.",
            'who': "Screen reader users who navigate by headings, users who rely on document outlines.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add exactly one h1 heading that describes the main content or purpose of the page."
        },
        'ErrNoHeadingsOnPage': {
            'title': "No heading elements (h1-h6) found anywhere on the page",
            'what': "No heading elements (h1-h6) found anywhere on the page",
            'why': "Headings create the structural outline of your content, like a table of contents. They allow users to understand how information is organized and navigate directly to sections of interest. Without any headings, screen reader users cannot use heading navigation shortcuts (one of their primary navigation methods) and must read through all content linearly. This is like forcing someone to read an entire book without chapter titles or section breaks. Users cannot skim content, jump to relevant sections, or understand the information hierarchy. For users with cognitive disabilities, the lack of visual structure makes content overwhelming and hard to process.",
            'who': "Screen reader users who lose a critical navigation method and cannot understand content structure, users with cognitive disabilities who need clear visual organization to process information, users with attention disorders who rely on headings to focus on relevant sections, and users with reading disabilities who use headings to break content into manageable chunks",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add semantic heading elements (h1-h6) to structure your content. Start with one h1 that describes the main page topic. Use h2 for major sections, h3 for subsections, and so on. Don\'t skip levels (e.g., h1 to h3). Ensure headings describe the content that follows them. Never use headings just for visual styling - they must represent actual content structure. If you need large text without semantic meaning, use CSS instead."
        },
        'ErrNoLabel': {
            'title': "Form input has no associated label",
            'what': "Form input has no associated label",
            'why': "Without labels, users don\'t know what information to enter in form fields.",
            'who': "Screen reader users who cannot identify form fields, users with cognitive disabilities.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Add label elements with for attribute, or use aria-label/aria-labelledby for each form input."
        },
        'ErrNoMainLandmark': {
            'title': "Page is missing a main landmark region to identify the primary content area",
            'what': "Page is missing a main landmark region to identify the primary content area",
            'why': "Screen reader users rely on landmarks to understand page layout and quickly navigate to important sections. The main landmark allows users to skip repeated content like headers and navigation to jump directly to the unique page content. Without it, users must navigate through all repeated elements on every page, which is time-consuming and frustrating. The main landmark should contain all content that is unique to the page, including the h1 heading.",
            'who': "Blind and low vision users using screen readers who navigate by landmarks, users with motor disabilities who need efficient keyboard navigation to skip repeated content, and users with cognitive disabilities who benefit from clear page structure",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Add a <main> element around the primary content area, or use role=\"main\" on an appropriate container element. Ensure there is only one main landmark per page, position it as a top-level landmark (not nested inside other landmarks), and include all unique page content within it, including the h1 heading. The main landmark should not include repeated content like site headers, navigation, or footers."
        },
        'ErrNoOutlineOffsetDefined': {
            'title': "No outline offset defined for focus",
            'what': "No outline offset defined for focus",
            'why': "Focus indicator may be hard to see",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7'],
            'remediation': "Add outline-offset for better visibility"
        },
        'ErrNoPageLanguage': {
            'title': "HTML element is missing the lang attribute, preventing assistive technologies from determining the primary language of the page",
            'what': "HTML element is missing the lang attribute, preventing assistive technologies from determining the primary language of the page",
            'why': "Without a declared language, screen readers cannot determine which pronunciation rules and voice synthesizer to use, often defaulting to the user\'s system language which may be incorrect. This causes mispronunciation, incorrect inflection, and can make content unintelligible, especially for pages in languages different from the user\'s default settings.",
            'who': "Blind and low vision users using screen readers who need correct pronunciation for comprehension, international users accessing content in different languages, users with dyslexia or reading disabilities using assistive reading tools, and users of automatic translation services",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Add the lang attribute to the <html> element with the appropriate language code (e.g., <html lang=\"en\"> for English, <html lang=\"fr\"> for French). Use ISO 639-1 two-letter codes for modern languages. For XHTML, also include xml:lang with the same value. Ensure the declared language matches the actual primary language of your content. For multilingual pages, use the language that represents the majority of the content."
        },
        'ErrNoPageTitle': {
            'title': "Page has no <title> element in the document head",
            'what': "Page has no <title> element in the document head",
            'why': "The page title is the first thing screen reader users hear when a page loads, and it appears in browser tabs, bookmarks, and search results. Without a title, users cannot identify the page in their browser history, distinguish between multiple open tabs, or understand what page they\'re on when arriving from a link. Screen reader users announcing \"Untitled document\" have no context about where they are. This is like opening a book with no title on the cover or spine - you don\'t know what you\'re reading until you dive into the content. The title is critical for orientation and navigation.",
            'who': "Screen reader users who rely on titles for page identification and orientation, users with cognitive disabilities who need clear page identification, users managing multiple browser tabs who need to distinguish between pages, users with memory issues using browser history to return to pages, and all users when bookmarking or sharing pages",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.2'],
            'remediation': "Add a <title> element within the <head> section of your HTML. Create descriptive, unique titles that identify both the page content and the site. Use a consistent pattern like \"Page Topic - Site Name\". Put the unique page information first since it\'s most important. Keep titles concise (under 60 characters) but descriptive. Avoid generic titles like \"Home\" or \"Page 1\". The title should make sense when read out of context in a list of bookmarks or search results."
        },
        'ErrNoPrimaryLangAttr': {
            'title': "HTML element is missing the required lang attribute to identify the page\'s primary language",
            'what': "HTML element is missing the required lang attribute to identify the page\'s primary language",
            'why': "Both assistive technologies and browsers render text more accurately when the language is identified. Screen readers need to know which language pronunciation rules to use - without this, they may mispronounce words, use wrong inflections, or attempt to read content in the wrong language entirely. This can make content completely incomprehensible. Visual browsers need language information to display characters and scripts correctly, and search engines use it for proper indexing.",
            'who': "Screen reader users who may hear garbled pronunciation if the page language doesn\'t match their assistive technology\'s default language, users relying on automatic translation tools, users of voice assistants, and users with dyslexia using reading assistance tools",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Add the lang attribute to the html element with the appropriate ISO 639-1 language code (e.g., lang=\"en\" for English, lang=\"es\" for Spanish, lang=\"fr\" for French). If the page uses multiple languages equally, use the language that appears first or is used for navigation."
        },
        'ErrNoReducedMotionSupport': {
            'title': "Animations do not respect prefers-reduced-motion setting",
            'what': "Animations do not respect prefers-reduced-motion setting",
            'why': "Users with vestibular disorders can experience nausea, dizziness, or seizures from motion.",
            'who': "Users with vestibular disorders, users with motion sensitivity, users with ADHD.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.3.3'],
            'remediation': "Use CSS @media (prefers-reduced-motion: reduce) to disable or reduce animations, provide animation toggle controls."
        },
        'ErrNonInteractiveZeroTabindex': {
            'title': "Non-interactive element has tabindex=\"0\" making it keyboard focusable",
            'what': "Non-interactive element has tabindex=\"0\" making it keyboard focusable",
            'why': "Adding keyboard focus to non-interactive elements confuses users and clutters keyboard navigation.",
            'who': "Keyboard users encountering unexpected tab stops, screen reader users hearing non-actionable elements.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.1.1'],
            'remediation': "Remove tabindex=\"0\" from non-interactive elements, only make elements focusable if they have functionality."
        },
        'ErrOrphanLabelWithNoId': {
            'title': "Label element exists but has no for attribute",
            'what': "Label element exists but has no for attribute",
            'why': "Label is not programmatically associated with any field",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add for attribute pointing to field ID"
        },
        'ErrOutlineIsNoneOnInteractiveElement': {
            'title': "Interactive element has CSS outline:none removing the default focus indicator",
            'what': "Interactive element has CSS outline:none removing the default focus indicator",
            'why': "People with mobility disabilities use keyboard or keyboard-alternate devices to navigate rather than a mouse. Visible focus indicators are essential as they perform the same function as a mouse cursor. Without focus indicators, users cannot tell where they are on the page or when interactive elements are focused. This makes keyboard navigation impossible and can completely prevent access to functionality.",
            'who': "Sighted users with motor disabilities navigating with keyboard or keyboard-alternate devices, users who prefer keyboard navigation for efficiency, users with temporary injuries preventing mouse use, and users of assistive technologies that rely on keyboard navigation",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Never use outline:none without providing an alternative visible focus indicator. The focus indicator must be clearly visible with at least 3:1 contrast ratio with the background, be at least 2 pixels thick, and ideally be offset from the element to maximize visibility. Consider using CSS :focus-visible for better control over when focus indicators appear."
        },
        'ErrPlaceholderAsLabel': {
            'title': "Placeholder attribute used as the only label for form field",
            'what': "Placeholder attribute used as the only label for form field",
            'why': "Placeholder text disappears when users start typing, leaving no persistent label for reference.",
            'who': "Users with cognitive disabilities, users who need to review form data, screen reader users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.3.2'],
            'remediation': "Add proper label elements or aria-label, use placeholder only for supplementary hints or examples."
        },
        'ErrPositiveTabindex': {
            'title': "Element uses a positive tabindex value (greater than 0)",
            'what': "Element uses a positive tabindex value (greater than 0)",
            'why': "Positive tabindex values override the natural tab order of the page, creating an unpredictable navigation experience. When you use tabindex=\"1\" or higher, that element jumps to the front of the tab order, regardless of where it appears visually. This breaks the expected top-to-bottom, left-to-right flow that keyboard users rely on. Users might tab from the header straight to a random form field in the middle of the page, then jump to the footer, then back to the navigation. This confusing order makes it easy to miss content, difficult to predict where focus will go next, and nearly impossible to maintain as the page evolves.",
            'who': "Keyboard users who expect logical, predictable navigation order, screen reader users who rely on consistent focus flow, users with motor disabilities who need efficient keyboard navigation, users with cognitive disabilities who are confused by unpredictable focus movement, and developers maintaining the code who must manage complex tabindex values",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove positive tabindex values and use only tabindex=\"0\" (adds element to natural tab order) or tabindex=\"-1\" (removes from tab order but allows programmatic focus). Let the DOM order determine tab order - if elements need to be reached in a different order, rearrange them in the HTML. If visual order must differ from DOM order for design reasons, consider using CSS Grid or Flexbox with the order property, but be cautious as this can still cause accessibility issues. NOTE: Positive tabindex may be acceptable within interactive SVG widgets (maps, diagrams, data visualizations) where custom navigation flows guide users through different content journeys - these cases generate warnings rather than errors."
        },
        'ErrPrimaryHrefLangNotRecognized': {
            'title': "hreflang language code not recognized",
            'what': "hreflang language code not recognized",
            'why': "Invalid hreflang codes provide incorrect information about linked resources",
            'who': "Screen reader users, search engines",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 639-1 language codes"
        },
        'ErrPrimaryLangAndXmlLangMismatch': {
            'title': "lang and xml:lang attributes don\'t match",
            'what': "lang and xml:lang attributes don\'t match",
            'why': "Conflicting language information",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Ensure both attributes have same value"
        },
        'ErrPrimaryLangUnrecognized': {
            'title': "Language code not recognized",
            'what': "Language code not recognized",
            'why': "Invalid language codes prevent proper pronunciation",
            'who': "Screen reader users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 639-1 language codes"
        },
        'ErrPrimaryXmlLangUnrecognized': {
            'title': "xml:lang language code not recognized",
            'what': "xml:lang language code not recognized",
            'why': "Invalid xml:lang codes prevent proper pronunciation",
            'who': "Screen reader users in XML/XHTML contexts",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 639-1 language codes"
        },
        'ErrRedundantAlt': {
            'title': "Alt text contains redundant words like \"image of\" or \"picture of\"",
            'what': "Alt text contains redundant words like \"image of\" or \"picture of\"",
            'why': "Screen readers already announce images as images, so these phrases create redundant announcements.",
            'who': "Screen reader users who hear repetitive \"image image of\" announcements.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.1.1'],
            'remediation': "Remove \"image of\", \"picture of\", \"graphic of\" from alt text; describe the content directly."
        },
        'ErrRegionLandmarkHasAriaLabelAndAriaLabelledByAttrs': {
            'title': "Region landmark has both aria-label and aria-labelledby",
            'what': "Region landmark has both aria-label and aria-labelledby",
            'why': "Conflicting labeling methods",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Use only one labeling method"
        },
        'ErrRegionQualifierForHreflangUnrecognized': {
            'title': "hreflang region qualifier not recognized",
            'what': "hreflang region qualifier not recognized",
            'why': "Invalid region codes in hreflang attributes",
            'who': "Screen reader users, search engines",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 3166-1 region codes"
        },
        'ErrRegionQualifierForPrimaryLangNotRecognized': {
            'title': "Region qualifier in primary language code not recognized (e",
            'what': "Region qualifier in primary language code not recognized (e.g., \"en-XY\")",
            'why': "Invalid region codes may cause incorrect pronunciation",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 3166-1 region codes like \"en-US\", \"en-GB\""
        },
        'ErrRegionQualifierForPrimaryXmlLangNotRecognized': {
            'title': "Region qualifier in xml:lang not recognized",
            'what': "Region qualifier in xml:lang not recognized",
            'why': "Invalid region codes in xml:lang may cause issues",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1'],
            'remediation': "Use valid ISO 3166-1 region codes"
        },
        'ErrRoleOfHeadingButNoLevelGiven': {
            'title': "role=\"heading\" without aria-level",
            'what': "role=\"heading\" without aria-level",
            'why': "Heading level is undefined",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '4.1.2'],
            'remediation': "Add aria-level attribute with value 1-6"
        },
        'ErrSVGNoAccessibleName': {
            'title': "SVG image lacks accessible name through title, aria-label, or aria-labelledby",
            'what': "SVG image lacks accessible name through title, aria-label, or aria-labelledby",
            'why': "Without accessible names, SVG content is invisible to screen reader users.",
            'who': "Blind and low vision users using screen readers.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "Add <title> element with aria-labelledby, or use role=\"img\" with aria-label for simple SVGs."
        },
        'ErrSkippedHeadingLevel': {
            'title': "Heading levels are not in sequential order - jumped from h{skippedFrom} to h{skippedTo}, skipping intermediate level(s)",
            'what': "Heading levels are not in sequential order - jumped from h{skippedFrom} to h{skippedTo}, skipping intermediate level(s)",
            'why': "Heading levels create a hierarchical outline of your content, like nested bullet points. Jumping from h{skippedFrom} to h{skippedTo} breaks this logical structure. It\'s like having chapter {skippedFrom}, then jumping to section {skippedTo} without the intermediate section. Screen reader users navigating by headings will be confused about the relationship between sections - is the h{skippedTo} a subsection of something that\'s missing? This broken hierarchy makes it hard to understand how content is organized and can cause users to think content is missing or that they\'ve accidentally skipped something.",
            'who': "Screen reader users navigating by heading structure who rely on levels to understand content relationships, users with cognitive disabilities who need logical, predictable content organization, users of assistive technology that generates document outlines, and developers or content authors maintaining the page who need to understand the intended structure",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Insert an h{expectedLevel} heading between the h{skippedFrom} and h{skippedTo}, or change the h{skippedTo} to h{expectedLevel} to maintain sequential order. After h{skippedFrom}, use h{expectedLevel} for the next level. Don\'t skip levels when going down the hierarchy. If you need a heading to look smaller visually, use CSS to style it rather than choosing a lower heading level. The heading level should reflect the content\'s logical structure, not its visual appearance."
        },
        'ErrSmallText': {
            'title': "Text is too small ({fontSize}px) - minimum 16px recommended",
            'what': "Text size is {fontSize}px, which is below the recommended minimum of 16px for comfortable reading",
            'why': "Small text is difficult to read, especially for users with low vision or on mobile devices.",
            'who': "Users with low vision, aging users, mobile device users, users with reading disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.4'],
            'remediation': "Increase font size to minimum 16px for body text (14px absolute minimum). Ensure text can be zoomed to 200% without loss of functionality. Current size: {fontSize}px."
        },
        'ErrSvgImageNoLabel': {
            'title': "SVG image element lacks accessible text alternatives, making it invisible to screen reader users",
            'what': "SVG image element lacks accessible text alternatives, making it invisible to screen reader users",
            'why': "SVG images without proper labeling are completely inaccessible to screen reader users - they are either skipped entirely or announced as \"graphic\" with no indication of what they represent. Unlike HTML img elements that can use alt attributes, SVGs require different techniques for accessibility. Without proper labeling, users miss important visual information, icons, charts, logos, or interactive graphics that may be essential for understanding or using the page.",
            'who': "Blind and low vision users using screen readers who cannot perceive any information about unlabeled SVG content, users with cognitive disabilities who benefit from text descriptions of complex graphics, keyboard users who may encounter interactive SVGs without understanding their purpose, and users of assistive technologies that need text alternatives for all visual content",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1'],
            'remediation': "For simple SVGs, add role=\"img\" and aria-label with descriptive text. For complex SVGs, use <title> as the first child element and reference it with aria-labelledby. For decorative SVGs, use aria-hidden=\"true\" to hide from assistive technologies. For inline SVGs containing text, ensure text is in actual text elements not paths. For interactive SVGs, provide appropriate ARIA labels for all interactive elements. Always test with screen readers to verify SVGs are properly announced."
        },
        'ErrTTabindexOnNonInteractiveElement': {
            'title': "Tabindex attribute on non-interactive element",
            'what': "Tabindex attribute on non-interactive element",
            'why': "Non-interactive elements should not be in tab order unless they serve a specific purpose",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove tabindex from non-interactive elements or make them properly interactive"
        },
        'ErrTabOrderViolation': {
            'title': "Tab order diverges: <{currentElement.tag}> visually left of previous element but tabs after it",
            'what': "The <{currentElement.tag}> at position ({currentElement.position.x}, {currentElement.position.y}) appears visually to the LEFT of the previous element <{previousElement.tag}> at ({previousElement.position.x}, {previousElement.position.y}), but it comes AFTER it in the tab order (tab stop #{currentElement.tabIndex} vs #{previousElement.tabIndex}). These elements are on the same row ({verticalDiff}px vertical difference), so tab order should follow left-to-right reading order.",
            'why': "When tab order doesn't match visual layout, keyboard users experience disorienting navigation. They expect to tab left-to-right and top-to-bottom following the visual layout, but instead find themselves jumping backwards or in unexpected directions. This cognitive load makes the interface much harder to use and can cause users to miss important content or controls.",
            'who': "Keyboard users navigating with Tab key, screen reader users who rely on tab order to understand layout, users with cognitive disabilities who need predictable navigation patterns, users with motor disabilities using switch controls.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3 Focus Order'],
            'remediation': "Fix the DOM order to match the visual layout. The HTML source order should place <{currentElement.tag}> BEFORE <{previousElement.tag}> in the document. Use CSS for visual positioning (flexbox, grid, float, position) rather than relying on tabindex to fix navigation. Avoid positive tabindex values entirely - they're a sign that DOM order doesn't match visual order."
        },
        'WarnAmbiguousTabOrder': {
            'title': "Possible tab order issue: <{currentElement.tag}> may be positioned before <{previousElement.tag}> visually",
            'what': "The <{currentElement.tag}> at position ({currentElement.position.x}, {currentElement.position.y}) appears to the LEFT of <{previousElement.tag}> at ({previousElement.position.x}, {previousElement.position.y}), but comes AFTER it in tab order (tab stop #{currentElement.tabIndex} vs #{previousElement.tabIndex}). However, these elements have overlapping vertical positions ({verticalDiff}px difference), making it ambiguous whether they're on the same row or different rows.",
            'why': "If these elements are visually on the same row, the tab order should follow left-to-right reading order. However, with vertical overlap, they might be on different rows (e.g., one in a header, one in main content), in which case the current tab order could be correct. This needs manual verification to determine if it's actually a problem.",
            'who': "Keyboard users who expect predictable left-to-right, top-to-bottom navigation patterns.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3 Focus Order'],
            'remediation': "Manually verify the visual layout: 1) If these elements appear on the same horizontal row, fix the DOM order to match visual left-to-right order. 2) If they're on clearly different rows (e.g., header navigation vs main content), the current order may be correct and you can ignore this warning. Consider adding more vertical spacing between rows to avoid ambiguous overlap."
        },
        'ErrTabindexOfZeroOnNonInteractiveElement': {
            'title': "tabindex=\"0\" on non-interactive element",
            'what': "tabindex=\"0\" on non-interactive element",
            'why': "Non-interactive elements in tab order",
            'who': "Keyboard users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove tabindex from non-interactive elements"
        },
        'ErrTableMissingCaption': {
            'title': "Data table lacks caption element to describe its content",
            'what': "Data table lacks caption element to describe its content",
            'why': "Without captions, users may not understand the table\'s purpose or content before navigating through it.",
            'who': "Screen reader users who need table context, users with cognitive disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add <caption> element as first child of table describing what data the table contains."
        },
        'ErrTableNoColumnHeaders': {
            'title': "Data table has no column headers (th elements)",
            'what': "Data table has no column headers (th elements)",
            'why': "Without headers, screen reader users cannot understand what each column represents when navigating cells.",
            'who': "Screen reader users navigating tables, users who need to understand data relationships.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1'],
            'remediation': "Use <th> elements for column headers in first row, add scope=\"col\" to clarify header relationships."
        },
        'ErrTextContrastAA': {
            'title': "Normal text ({fontSize}px) fails WCAG AA contrast: {ratio}:1 (required: 4.5:1)",
            'what': "Normal text fails WCAG AA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This normal-sized text ({fontSize}px) with a contrast ratio of {ratio}:1 does not meet WCAG Level AA requirements. Normal text requires a minimum contrast ratio of 4.5:1 to pass Level AA. The foreground color ({fg}) against the background ({bg}) doesn\'t provide enough distinction for users with visual impairments.",
            'who': "Users with low vision who need higher contrast to distinguish text, users with color blindness, older users experiencing age-related vision changes, and users viewing content in bright sunlight or on low-quality displays",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AA requires at least 4.5:1 for normal text ({fontSize}px). To fix, darken the foreground color from {fg} or lighten the background from {bg}. Consider using #595959 or darker on white background, or #FFFFFF on backgrounds darker than #767676."
        },
        'ErrTextContrastAAA': {
            'title': "Normal text ({fontSize}px) fails WCAG AAA contrast: {ratio}:1 (required: 7:1)",
            'what': "Normal text fails WCAG AAA with contrast ratio of {ratio}:1 (foreground: {fg}, background: {bg})",
            'why': "This normal-sized text ({fontSize}px) with a contrast ratio of {ratio}:1 does not meet WCAG Level AAA enhanced requirements. Normal text requires a minimum contrast ratio of 7:1 to pass Level AAA. The foreground color ({fg}) against the background ({bg}) doesn\'t provide optimal distinction for maximum accessibility.",
            'who': "Users with moderate visual impairments, including those with low vision, color blindness, or contrast sensitivity who benefit from enhanced contrast for optimal readability",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.6'],
            'remediation': "Current contrast is {ratio}:1, but WCAG Level AAA requires at least 7:1 for normal text ({fontSize}px). To fix, use high contrast combinations like #333333 or darker on white background, or white text on backgrounds darker than #565656."
        },
        'ErrTimersWithoutControls': {
            'title': "Time-based content lacks user controls",
            'what': "Time-based content lacks user controls",
            'why': "Users need control over timed content to have enough time to read and interact with it.",
            'who': "Users with cognitive disabilities, users with reading disabilities, screen reader users.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.2.1'],
            'remediation': "Provide controls to pause, stop, or extend time limits; avoid unnecessary time constraints."
        },
        'ErrTitleAsOnlyLabel': {
            'title': "Form element is using title attribute as its only accessible label, which is insufficient for accessibility",
            'what': "Form element is using title attribute as its only accessible label, which is insufficient for accessibility",
            'why': "When title is the only labeling mechanism for a form field, many users cannot determine what information to enter. Title attributes are not announced by screen readers when navigating forms in normal mode, don\'t appear on mobile devices, cannot be accessed by keyboard users, and disappear too quickly for many users to read. This makes the form field essentially unlabeled for a large portion of users, preventing them from completing forms successfully.",
            'who': "Screen reader users who won\'t hear the field\'s purpose when navigating the form, mobile users who cannot see title tooltips at all, keyboard users who cannot hover to see the tooltip, users with motor disabilities who struggle with precise hovering, users with cognitive disabilities who need persistent labels as memory aids, and voice control users who cannot reference fields without visible labels",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.1.1', '1.3.1', '4.1.2'],
            'remediation': "Add a proper visible <label> element associated with the form field using the \'for\' attribute. If space is limited, use placeholder text in addition to (not instead of) a label. For complex layouts, consider using aria-labelledby to reference existing visible text. If you must use aria-label, ensure it\'s descriptive and consider adding visible text for sighted users. Never rely solely on title attributes for labeling form fields - they should only supplement proper labels, not replace them."
        },
        'ErrTitleAttrFound': {
            'title': "Title attribute used for important information",
            'what': "Title attribute used for important information",
            'why': "Title attributes are not reliably accessible",
            'who': "Mobile users, keyboard users, some screen readers",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2', '4.1.2'],
            'remediation': "Use visible text or proper labels instead"
        },
        'ErrTransparentFocusIndicator': {
            'title': "Focus indicator uses transparent or nearly transparent color, making it effectively invisible",
            'what': "Focus indicator uses transparent or nearly transparent color, making it effectively invisible",
            'why': "A transparent focus indicator is functionally the same as no focus indicator - users cannot see where keyboard focus is located. This might occur from using rgba with 0 or very low alpha values, setting outline-color to transparent, or using colors that match the background. The focus indicator exists technically but provides no practical benefit to users trying to navigate.",
            'who': "Keyboard users who need visible focus indicators to navigate, users with low vision who need clear visual cues, users with color blindness who may already struggle with certain color combinations, and users with cognitive disabilities who need obvious focus indicators",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.7'],
            'remediation': "Use opaque colors with sufficient contrast for focus indicators. Replace transparent outlines with visible colors, ensure at least 3:1 contrast ratio between focus indicator and background, use solid colors or high alpha values (0.7 or higher) for rgba colors. Test focus indicators on different backgrounds across your site. Consider using box-shadow or background changes as additional focus indicators."
        },
        'ErrUnlabelledField': {
            'title': "Form input element lacks an accessible name through <label>, aria-label, aria-labelledby, or other labeling methods, leaving the field\'s purpose undefined for assistive technologies",
            'what': "Form input element lacks an accessible name through <label>, aria-label, aria-labelledby, or other labeling methods, leaving the field\'s purpose undefined for assistive technologies",
            'why': "Without labels, users cannot determine what information to enter, leading to form errors, abandoned transactions, and inability to complete critical tasks. Screen readers announce only the field type like \"edit\" or \"combo box\" without context, forcing users to guess based on surrounding content that may not be programmatically associated. This creates barriers for independent form completion and may result in users submitting incorrect information or being unable to proceed.",
            'who': "Blind and low vision users using screen readers who hear no field description when navigating forms, users with cognitive disabilities who need clear labels to understand what information is required, users with motor disabilities using voice control who cannot reference unlabeled fields by name, mobile users where placeholder text may disappear on focus, and users who rely on browser autofill features that depend on proper field labeling",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.3.2', '4.1.2'],
            'remediation': "Add explicit <label> elements with for attribute matching the input\'s id (preferred method), use aria-label for simple labels when visual text isn\'t needed, implement aria-labelledby to reference existing visible text, ensure placeholder text is not the only labeling method as it disappears on input, wrap inputs and label text together for implicit association, and verify all form controls including select elements, textareas, and custom widgets have accessible names"
        },
        'ErrVideoIframeMissingTitle': {
            'title': "Video iframe lacks title attribute",
            'what': "Video iframe lacks title attribute",
            'why': "Without titles, screen reader users don\'t know what video content is embedded.",
            'who': "Screen reader users who need to understand embedded content.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Add descriptive title attribute to video iframes describing the video content."
        },
        'ErrWrongTabindexForInteractiveElement': {
            'title': "Inappropriate tabindex on interactive element",
            'what': "Inappropriate tabindex on interactive element",
            'why': "Tab order doesn\'t match visual order",
            'who': "Keyboard users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Let natural tab order work, avoid tabindex"
        },
        'InfoFieldLabelledUsingAriaLabel': {
            'title': "Field is labeled using aria-label=\"{found}\", which is valid but may have usability considerations",
            'what': "Field is labeled using aria-label=\"{found}\", which is valid but may have usability considerations",
            'why': "While aria-label=\"{found}\" is a valid way to label this form field, it has limitations: the label \"{found}\" is not visible on screen which can confuse sighted users, voice control users cannot reference the field by the visible text \"{found}\", the label won\'t be automatically translated by browser translation tools, and users with cognitive disabilities benefit from visible labels as memory aids.",
            'who': "Sighted users who can\'t see \"{found}\" as a label, voice control users who can\'t say \"click {found}\", users relying on browser translation, users with cognitive disabilities who benefit from persistent visible labels",
            'impact': ImpactScale.INFO.value,
            'wcag': ['3.3.2'],
            'remediation': "Consider if a visible label showing \"{found}\" would better serve all users. If space permits, use a visible <label> element with the text \"{found}\". If aria-label must be used, ensure \"{found}\" is clear and descriptive. Consider adding visible helper text or placeholder text to provide visual context."
        },
        'InfoHeadingNearLengthLimit': {
            'title': "Heading is {length} characters, approaching recommended limit of {limit}",
            'what': "Heading is {length} characters long, approaching the recommended limit of {limit} characters",
            'why': "Long headings (currently {length} characters) are more difficult to scan and understand quickly. While not yet exceeding the {limit} character limit, shorter headings improve readability and comprehension.",
            'who': "Users with cognitive disabilities who benefit from concise headings, users scanning content quickly, screen reader users who must listen to full heading text.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Consider shortening the heading from {length} to under {nearLimit} characters for optimal readability while maintaining clarity. Current text: \"{text}\""
        },
        'InfoNoColorSchemeSupport': {
            'title': "Site doesn\'t support OS color scheme preferences",
            'what': "Site doesn\'t support OS color scheme preferences",
            'why': "Supporting user color preferences improves readability and reduces eye strain.",
            'who': "Users who prefer dark mode, users with light sensitivity.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3'],
            'remediation': "Implement CSS prefers-color-scheme media query to support dark/light mode preferences."
        },
        'InfoNoContrastSupport': {
            'title': "Site doesn\'t support high contrast mode",
            'what': "Site doesn\'t support high contrast mode",
            'why': "High contrast mode helps users with low vision read content more easily.",
            'who': "Users with low vision, users in bright lighting conditions.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3'],
            'remediation': "Test site in high contrast mode, ensure it remains usable, consider high contrast stylesheet option."
        },
        'RegionLandmarkAccessibleNameIsBlank': {
            'title': "Region landmark has blank accessible name",
            'what': "Region landmark has blank accessible name",
            'why': "Blank labels provide no information",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add meaningful label text"
        },
        'VisibleHeadingDoesNotMatchA11yName': {
            'title': "Visible heading text doesn\'t match its accessible name",
            'what': "Visible heading text doesn\'t match its accessible name",
            'why': "Voice control users may not be able to reference the heading by its visible text",
            'who': "Voice control users, screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.5.3'],
            'remediation': "Ensure visible text matches or is contained within the accessible name"
        },
        'WarnAnchorTargetTabindex': {
            'title': "Anchor target element has unnecessary tabindex",
            'what': "Anchor target element has unnecessary tabindex",
            'why': "Elements that are link targets don\'t need tabindex; adding it may create confusion.",
            'who': "Keyboard users encountering unexpected tab stops.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.1.1'],
            'remediation': "Remove tabindex from elements that are only link targets, not interactive controls."
        },
        'WarnBannerLandmarkAccessibleNameUsesBanner': {
            'title': "Banner landmark uses generic term \"banner\" in label",
            'what': "Banner landmark uses generic term \"banner\" in label",
            'why': "Redundant labeling",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive label or rely on implicit role"
        },
        'WarnButtonGenericText': {
            'title': "Button uses generic text like \"Click here\", \"Submit\", or \"OK\" without context",
            'what': "Button uses generic text like \"Click here\", \"Submit\", or \"OK\" without context",
            'why': "Screen reader users often navigate by pulling up a list of all buttons on a page. Generic button text provides no information about what the button does when heard out of context. Users cannot determine the button\'s purpose without additional exploration, slowing navigation and potentially causing errors.",
            'who': "Screen reader users navigating by buttons list, users with cognitive disabilities who need clear labels, and screen magnifier users who may not see surrounding context",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive button text that explains the action (e.g., \"Submit registration form\" instead of \"Submit\", \"Download PDF report\" instead of \"Download\"). The button text should make sense when read in isolation. If visual design constraints require short text, use aria-label to provide a more descriptive accessible name."
        },
        'WarnColorOnlyLink': {
            'title': "Link distinguished only by color without underline or other indicator",
            'what': "Link distinguished only by color without underline or other indicator",
            'why': "Users who cannot perceive color differences cannot identify links in text.",
            'who': "Colorblind users, users with low vision, users of monochrome displays.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.1'],
            'remediation': "Add underlines to links, use other visual indicators beyond color, ensure 3:1 contrast with surrounding text."
        },
        'WarnColorRelatedStyleDefinedExplicitlyInElement': {
            'title': "Color-related CSS properties found in inline style attributes on HTML elements",
            'what': "Color-related CSS properties found in inline style attributes on HTML elements",
            'why': "Inline color styles bypass user stylesheets and browser extensions that help users with visual disabilities customize colors for better readability. Users who need high contrast, inverted colors, or specific color schemes cannot easily override inline styles. This also makes it difficult to implement dark mode, maintain consistent theming, or allow user color preferences.",
            'who': "Users with low vision who need high contrast or specific color combinations, users with color blindness who need to adjust problematic color pairs, users with dyslexia who benefit from specific background colors, users with light sensitivity who need dark themes, and users who rely on browser extensions for color customization",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3', '1.4.8'],
            'remediation': "Move color-related styles (color, background-color, border-color, etc.) to external CSS files using classes. This allows users to override styles with their own stylesheets, enables easier theme switching, improves maintainability, and supports user preference media queries like prefers-color-scheme. Use CSS custom properties (variables) for colors to make customization even easier."
        },
        'WarnColorRelatedStyleDefinedExplicitlyInStyleTag': {
            'title': "Color-related CSS found in <style> tags within the HTML document instead of external stylesheets",
            'what': "Color-related CSS found in <style> tags within the HTML document instead of external stylesheets",
            'why': "Embedded styles in <style> tags are harder for users to override than external stylesheets and may not be cached efficiently. Users with visual disabilities who need custom color schemes must use more aggressive CSS overrides. This approach also makes it difficult to maintain consistent theming across pages and prevents users from disabling styles entirely if needed.",
            'who': "Users with low vision requiring custom color schemes, users with photosensitivity needing to modify bright colors, users with color blindness who need to adjust color combinations, and users who benefit from consistent, predictable styling across pages",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.3', '1.4.8'],
            'remediation': "Move color styles to external CSS files linked with <link> tags. Organize colors using CSS custom properties for easy theming. Implement user preference support with @media (prefers-color-scheme) and similar queries. Consider providing theme switcher functionality. Ensure your external stylesheets are properly cached for performance."
        },
        'WarnComplementaryLandmarkAccessibleNameUsesComplementary': {
            'title': "Complementary landmark label uses generic term \"complementary\"",
            'what': "Complementary landmark label uses generic term \"complementary\"",
            'why': "Generic labels don\'t describe specific content",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive labels like \"Related articles\" or \"Sidebar\""
        },
        'WarnComplementaryLandmarkHasNoLabel': {
            'title': "Complementary landmark lacks a label",
            'what': "Complementary landmark lacks a label",
            'why': "Hard to distinguish multiple complementary sections",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add aria-label or aria-labelledby to identify the purpose"
        },
        'WarnContentInfoLandmarkHasNoLabel': {
            'title': "Contentinfo landmark lacks a label",
            'what': "Contentinfo landmark lacks a label",
            'why': "May be harder to identify purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add descriptive label if multiple contentinfo exist"
        },
        'WarnContentOutsideLandmarks': {
            'title': "Content exists outside of landmark regions",
            'what': "Content exists outside of landmark regions",
            'why': "Content outside landmarks is harder to find and navigate for screen reader users.",
            'who': "Screen reader users who navigate by landmarks.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure all content is within appropriate landmarks (header, nav, main, footer, aside)."
        },
        'WarnContentinfoLandmarkAccessibleNameUsesContentinfo': {
            'title': "Contentinfo landmark uses generic term \"contentinfo\" in label",
            'what': "Contentinfo landmark uses generic term \"contentinfo\" in label",
            'why': "Redundant labeling",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive label or rely on implicit role"
        },
        'WarnCustomBulletStyling': {
            'title': "List uses custom bullet styling that may not be accessible",
            'what': "List item uses {customType} for bullets instead of standard list-style-type. Details: {customDetails}",
            'why': "Custom bullets using CSS ::before pseudo-elements, background images, or embedded images may not be announced correctly by screen readers. While the list structure is preserved, custom visual bullets might not provide the same semantic cues or be available to assistive technologies. This can reduce the clarity of list navigation for screen reader users.",
            'who': "Screen reader users who may miss visual bullet cues, users with custom stylesheets who override author styles, users relying on list semantics for navigation.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Consider using standard list-style-type values (disc, circle, square, decimal, etc.) which are better supported by assistive technologies. If custom bullets are required, use the CSS ::marker pseudo-element instead of ::before, as ::marker is specifically designed for this purpose and has better accessibility support. Ensure the list-style-type property is not set to 'none'. Test with screen readers to verify list navigation works correctly."
        },
        'WarnDeepListNesting': {
            'title': "Lists nested more than 3 levels deep",
            'what': "Lists nested more than 3 levels deep",
            'why': "Deeply nested lists are difficult to understand and navigate.",
            'who': "Screen reader users, users with cognitive disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Simplify list structure, consider alternative presentations for complex hierarchies."
        },
        'WarnElementNotInLandmark': {
            'title': "Important content found outside of any landmark region, making it harder for screen reader users to find and navigate to",
            'what': "Important content found outside of any landmark region, making it harder for screen reader users to find and navigate to",
            'why': "Landmarks create a navigable structure for your page, like a table of contents. Content outside landmarks is like having chapters missing from the table of contents - users may never find it when navigating by landmarks. Screen reader users often jump between landmarks to quickly scan page structure, and content outside landmarks requires them to read through the entire page linearly to discover it. This particularly affects users who are familiar with your site and want to quickly navigate to specific content areas.",
            'who': "Screen reader users who navigate by landmarks to efficiently explore pages, keyboard users using browser extensions for landmark navigation, users with cognitive disabilities who rely on consistent page structure, and power users who use landmarks for quick navigation",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure all meaningful content is contained within appropriate landmark regions. Typically: use <header> or role=\"banner\" for site headers, <nav> or role=\"navigation\" for navigation menus, <main> or role=\"main\" for primary content, <aside> or role=\"complementary\" for sidebar content, <footer> or role=\"contentinfo\" for footers. Decorative content or spacers can remain outside landmarks. Review your page structure to ensure no important content is orphaned outside the landmark structure."
        },
        'WarnEmptyLangAttribute': {
            'title': "Language attribute exists but appears to be empty or contains only whitespace",
            'what': "Language attribute exists but appears to be empty or contains only whitespace",
            'why': "An empty or whitespace-only lang attribute is ambiguous - it\'s unclear if the language is truly unknown or if this is an error. Screen readers may use fallback behavior that doesn\'t match the actual content language. This is less severe than a completely empty lang=\"\" but still prevents proper language identification. Browsers and assistive technologies cannot determine the intended language for pronunciation and processing.",
            'who': "Screen reader users who need proper language identification for correct pronunciation, multilingual users relying on language switching, users of translation tools, and users with reading disabilities using text-to-speech",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.1.1'],
            'remediation': "Either add a valid language code to the attribute (e.g., lang=\"en\") or remove the attribute entirely if the language is unknown. Check for common causes like template variables that didn\'t populate, CMS configuration issues, or JavaScript that clears lang attributes. Ensure any whitespace is removed and a valid ISO 639 language code is provided."
        },
        'WarnFastInterval': {
            'title': "JavaScript interval running faster than once per second",
            'what': "JavaScript interval running faster than once per second",
            'why': "Rapid updates can be distracting and difficult to process.",
            'who': "Users with cognitive disabilities, users with attention disorders.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.2.2'],
            'remediation': "Slow down update intervals, provide pause controls for rapid updates."
        },
        'WarnFieldLabelledByElementThatIsNotALabel': {
            'title': "Field labeled by element \'{found}\' that is not semantically a label",
            'what': "Field labeled by element \'{found}\' that is not semantically a label",
            'why': "The element with ID \'{found}\' is being used as a label but is not a <label> element. While this can work, non-label elements may not convey proper semantic meaning or behave as users expect.",
            'who': "Screen reader users who may not receive proper label semantics",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Consider using a proper <label> element, or ensure the element \'{found}\' contains appropriate descriptive text for the field"
        },
        'WarnFieldLabelledByMultipleElements': {
            'title': "Field is labeled by {count} elements via aria-labelledby",
            'what': "Field is labeled by {count} elements via aria-labelledby",
            'why': "When {count} elements label a field, they will be concatenated together. The order and combination may not make sense or could be confusing when read as a single label.",
            'who': "Screen reader users who hear all {count} labels concatenated together",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2'],
            'remediation': "Review the {count} labeling elements to ensure they make sense when read together in order. Consider if a single, clear label would be better."
        },
        'WarnFontNotInRecommenedListForA11y': {
            'title': "Font not in recommended accessibility list",
            'what': "Font not in recommended accessibility list",
            'why': "Some fonts are harder to read",
            'who': "Users with dyslexia, low vision",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8'],
            'remediation': "Use clear, simple fonts like Arial, Verdana"
        },
        'WarnFontsizeIsBelow16px': {
            'title': "Font size is {fontSize}px, below recommended 16px minimum",
            'what': "Font size is {fontSize}px, below recommended 16px minimum",
            'why': "Text at {fontSize}px is harder to read than the recommended minimum of 16px. Small text requires more effort to read and can cause eye strain, especially for extended reading.",
            'who': "Users with low vision, older users experiencing age-related vision changes, users with reading disabilities, and anyone viewing content on small screens",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.4'],
            'remediation': "Increase font size from {fontSize}px to at least 16px for body text. Consider using relative units (rem, em) for better scalability."
        },
        'WarnFormHasNoLabel': {
            'title': "Form element has no accessible name to describe its purpose",
            'what': "Form element has no accessible name to describe its purpose",
            'why': "When a form lacks an accessible name, screen reader users hear only \"form\" without knowing what the form does - is it a search form, login form, contact form, or something else? Users navigating by landmarks or forms need to understand each form\'s purpose to decide whether to interact with it. This is especially important on pages with multiple forms. Without proper labeling, users might fill out the wrong form, skip important forms, or waste time exploring forms to understand their purpose.",
            'who': "Screen reader users navigating by forms or landmarks who need to identify form purposes, users with cognitive disabilities who need clear labels to understand what each form does, and keyboard users who tab through forms and need context about what they\'re interacting with",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add an accessible name to the form element using aria-label (e.g., aria-label=\"Contact form\") or aria-labelledby to reference a visible heading. If the form has a visible heading immediately before it, use aria-labelledby to point to that heading\'s ID. For search forms, \"Search\" is usually sufficient. The label should clearly indicate the form\'s purpose and be unique if there are multiple forms on the page."
        },
        'WarnFormHasNoLabelSoIsNotLandmark': {
            'title': "Form element lacks label so is not exposed as landmark",
            'what': "Form element lacks label so is not exposed as landmark",
            'why': "Forms without accessible names are not landmarks",
            'who': "Screen reader users navigating by landmarks",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby to make it a landmark"
        },
        'WarnFormLandmarkAccessibleNameUsesForm': {
            'title': "Form landmark uses generic term \"form\" in label",
            'what': "Form landmark uses generic term \"form\" in label",
            'why': "Generic labels don\'t describe purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use descriptive labels like \"Contact form\" or \"Search form\""
        },
        'WarnGenericAccessibleName': {
            'title': "Element has generic accessible name that doesn\'t describe its purpose",
            'what': "Element has generic accessible name that doesn\'t describe its purpose",
            'why': "Generic names like \"button\" or \"link\" don\'t help users understand element purpose.",
            'who': "Screen reader users, voice control users.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.6'],
            'remediation': "Provide descriptive accessible names that explain the element\'s specific purpose."
        },
        'WarnGenericDocumentLinkText': {
            'title': "Document link uses generic text like \"PDF\" without describing content",
            'what': "Document link uses generic text like \"PDF\" without describing content",
            'why': "Users need to know what document they\'re downloading, not just its format.",
            'who': "All users, especially screen reader users reviewing links.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.4'],
            'remediation': "Include document title and format in link text (e.g., \"Annual Report 2023 (PDF, 2MB)\")."
        },
        'WarnGenericLinkNoImprovement': {
            'title': "Generic link text with no surrounding context to clarify purpose",
            'what': "Generic link text with no surrounding context to clarify purpose",
            'why': "Generic links without context force users to explore further to understand destinations.",
            'who': "Screen reader users navigating by links, users with cognitive disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.4'],
            'remediation': "Rewrite link text to be descriptive, or ensure surrounding text provides clear context."
        },
        'WarnHeadingFoundInLandmarkButIsLabelledByAnAriaLabelledBy': {
            'title': "Landmark has heading but uses different element for label",
            'what': "Landmark has heading but uses different element for label",
            'why': "Confusing when heading doesn\'t match landmark label",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use the heading as the landmark label"
        },
        'WarnHeadingFoundInsideLandmarkButDoesntLabelLandmark': {
            'title': "Heading inside landmark doesn\'t label the landmark",
            'what': "Heading inside landmark doesn\'t label the landmark",
            'why': "Missed opportunity for clear landmark labeling",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Consider using heading as landmark label via aria-labelledby"
        },
        'WarnHeadingInsideDisplayNone': {
            'title': "Heading is hidden with display:none",
            'what': "Heading is hidden with display:none",
            'why': "Hidden headings may affect document structure",
            'who': "Screen reader users (varies by implementation)",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Remove unused headings or make them visible"
        },
        'WarnHeadingOver60CharsLong': {
            'title': "Heading text is {length} characters long, exceeding the recommended {limit} character limit",
            'what': "Heading text is {length} characters long, exceeding the recommended {limit} character limit",
            'why': "This heading has {length} characters which exceeds the {limit} character recommendation. Long headings are harder to scan quickly, more difficult to understand at a glance, and can overwhelm users. Screen reader users hearing the full heading text may struggle to grasp the main point. Long headings also cause layout issues on mobile devices and in navigation menus.",
            'who': "Users with cognitive disabilities who benefit from concise, clear headings, screen reader users who must listen to the entire heading, users scanning the page quickly for information, and mobile users with limited screen space",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Shorten the heading from {length} to under {limit} characters while preserving its meaning. Current text: \"{text}\" - Consider breaking into a shorter heading with explanatory text below, or focus on the key message. Use descriptive but concise language."
        },
        'WarnHighTabindex': {
            'title': "Very high tabindex value used (over 10)",
            'what': "Very high tabindex value used (over 10)",
            'why': "High tabindex values indicate attempts to control tab order that likely create confusing navigation.",
            'who': "Keyboard users experiencing unexpected tab order.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Remove positive tabindex values, restructure DOM for natural tab order."
        },
        'WarnIframeTitleNotDescriptive': {
            'title': "Iframe has a title attribute but it\'s generic or not descriptive (e",
            'what': "Iframe has a title attribute but it\'s generic or not descriptive (e.g., \"iframe\", \"frame\", \"embedded content\")",
            'why': "Generic iframe titles like \"iframe\" or \"embedded\" provide no useful information about the embedded content. Screen reader users hear these unhelpful titles and must enter the iframe to understand what it contains. With multiple iframes, users cannot distinguish between them or determine which ones are worth exploring. This wastes time and creates confusion, especially if iframes contain important functionality like payment forms or videos.",
            'who': "Screen reader users trying to understand and navigate between multiple iframes, keyboard users who encounter iframes in tab order, users with cognitive disabilities who need clear labeling of all content regions, and users trying to navigate efficiently through complex pages",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.1', '4.1.2'],
            'remediation': "Replace generic titles with descriptive ones that explain the iframe\'s content or purpose. Use specific descriptions like title=\"YouTube video: Product demo\", title=\"Customer feedback form\", title=\"Live chat support\", or title=\"Interactive map of office locations\". Each iframe title should be unique if there are multiple iframes. Avoid redundant words like \"iframe\" in the title since the element type is already announced."
        },
        'ErrInvalidLangChange': {
            'title': "Invalid or unrecognized language code",
            'what': "Element has lang=\"{found}\" which is not a valid ISO 639 language code",
            'why': "Invalid language codes on content sections prevent screen readers from switching language processors correctly. This can cause content in foreign languages to be pronounced using the wrong language rules, making it incomprehensible. For example, French text might be read with English pronunciation rules. Users expect language changes to be handled smoothly, and invalid codes break this functionality.",
            'who': "Multilingual screen reader users who need proper language switching, users reading content in multiple languages, users with reading disabilities using assistive tools, and users relying on proper pronunciation for comprehension",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.2'],
            'remediation': "Replace lang=\"{found}\" with a valid ISO 639 language code. Valid formats are two-letter codes (\"en\", \"fr\", \"es\") or two-letter codes with region subtags (\"en-US\", \"fr-CA\", \"es-MX\"). Common corrections: \"fre\" → \"fr\", \"French\" → \"fr\", \"en-us\" → \"en-US\", \"EN-CA\" → \"en-CA\". Test with screen readers to ensure language changes are announced and pronounced correctly."
        },
        'WarnInvalidLangChange': {
            'title': "Invalid or unrecognized language code (deprecated - use ErrInvalidLangChange)",
            'what': "Element has lang=\"{found}\" which is not a valid ISO 639 language code",
            'why': "Invalid language codes on content sections prevent screen readers from switching language processors correctly. This can cause content in foreign languages to be pronounced using the wrong language rules, making it incomprehensible. For example, French text might be read with English pronunciation rules. Users expect language changes to be handled smoothly, and invalid codes break this functionality.",
            'who': "Multilingual screen reader users who need proper language switching, users reading content in multiple languages, users with reading disabilities using assistive tools, and users relying on proper pronunciation for comprehension",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['3.1.2'],
            'remediation': "Replace lang=\"{found}\" with a valid ISO 639 language code. Valid formats are two-letter codes (\"en\", \"fr\", \"es\") or two-letter codes with region subtags (\"en-US\", \"fr-CA\", \"es-MX\"). Common corrections: \"fre\" → \"fr\", \"French\" → \"fr\", \"en-us\" → \"en-US\", \"EN-CA\" → \"en-CA\". Test with screen readers to ensure language changes are announced and pronounced correctly."
        },
        'WarnItalicText': {
            'title': "Italic text used extensively which can reduce readability",
            'what': "Italic text used extensively which can reduce readability",
            'why': "Italic text is harder to read, especially for users with dyslexia.",
            'who': "Users with dyslexia, users with low vision.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8'],
            'remediation': "Limit italic text to short emphasis, use bold for stronger emphasis."
        },
        'WarnJustifiedText': {
            'title': "Text uses full justification affecting readability",
            'what': "Text uses full justification affecting readability",
            'why': "Justified text creates uneven spacing that makes reading difficult.",
            'who': "Users with dyslexia, users with cognitive disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.8'],
            'remediation': "Use left-aligned text for body content, avoid full justification."
        },
        'WarnLinkLooksLikeButton': {
            'title': "Link is styled to look like a button but uses anchor element",
            'what': "Link is styled to look like a button but uses anchor element",
            'why': "Links and buttons have different behaviors - links navigate to new locations while buttons trigger actions. When links look like buttons, users may have incorrect expectations about what will happen. Keyboard users expect Space key to activate buttons but it doesn\'t work on links.",
            'who': "Keyboard users who expect button behavior, screen reader users who hear it announced as a link but see it as a button, and users with cognitive disabilities who rely on consistent interactions",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "If the element performs an action (submit form, open dialog), use a button element. If it navigates to a new URL, keep it as a link but consider whether button styling is appropriate. Ensure keyboard behavior matches the element type."
        },
        'WarnLongAnimation': {
            'title': "Animation duration ({duration}) exceeds 5 seconds",
            'what': "Animation duration ({duration}) exceeds 5 seconds",
            'why': "Long animations can be distracting and may need user controls. Extended animation durations make it harder for users to focus on content and can be overwhelming for users with cognitive disabilities.",
            'who': "Users with attention disorders (ADHD), users with cognitive disabilities, users with vestibular disorders.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.2.2'],
            'remediation': "Shorten animation-duration to 5 seconds or less, or provide pause/stop controls. Consider respecting prefers-reduced-motion media query. Current CSS:\n{animationCSS}"
        },
        'WarnMissingAriaLabelledby': {
            'title': "Form field could benefit from aria-labelledby for complex labeling",
            'what': "Form field could benefit from aria-labelledby for complex labeling",
            'why': "Complex forms may need multiple labels or descriptions for clarity.",
            'who': "Screen reader users needing additional context.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Use aria-labelledby to associate multiple labels or aria-describedby for help text."
        },
        'WarnMissingAriaModal': {
            'title': "Modal dialog missing aria-modal=\"true\"",
            'what': "Modal dialog missing aria-modal=\"true\"",
            'why': "Without aria-modal, screen readers may not properly constrain navigation to the modal.",
            'who': "Screen reader users who may navigate outside the modal accidentally.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-modal=\"true\" to modal containers along with proper focus management."
        },
        'WarnMissingBannerLandmark': {
            'title': "Page missing banner landmark for header content",
            'what': "Page missing banner landmark for header content",
            'why': "Banner landmark helps users quickly navigate to page header/branding.",
            'who': "Screen reader users navigating by landmarks.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Use <header> element or role=\"banner\" for page header content."
        },
        'WarnMissingContentinfoLandmark': {
            'title': "Page missing contentinfo landmark for footer",
            'what': "Page missing contentinfo landmark for footer",
            'why': "Contentinfo landmark helps users find footer information like copyright and links.",
            'who': "Screen reader users navigating by landmarks.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Use <footer> element or role=\"contentinfo\" for page footer."
        },
        'WarnMissingDocumentMetadata': {
            'title': "Document links missing metadata about file type or size",
            'what': "Document links missing metadata about file type or size",
            'why': "Users need to know document details before downloading.",
            'who': "Users on slow connections, mobile users with data limits.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.2'],
            'remediation': "Include file type and size in link text or adjacent text."
        },
        'ErrInPageTargetWrongTabindex': {
            'title': "In-page link target <{element}> has tabindex=\"{currentTabindex}\" but should be tabindex=\"-1\"",
            'what': "This <{element}> element is the target of in-page links (like skip links) and has tabindex=\"{currentTabindex}\", but it should have tabindex=\"-1\" instead. The element is programmatically focusable when users activate the link, but with tabindex=\"{currentTabindex}\" it also appears in the natural tab order, creating an unnecessary and confusing tab stop.",
            'why': "In-page link targets (especially skip link targets) need tabindex=\"-1\" to be focusable programmatically when users activate the link, WITHOUT being in the regular tab order. Using tabindex=\"0\" or positive values adds the element to the tab sequence, creating confusing extra tab stops. Users would tab to a heading or container that isn't normally interactive, wondering why they're focused there.",
            'who': "Keyboard users who encounter unexpected tab stops on non-interactive elements, screen reader users who may get confused by focus landing on content elements, users with cognitive disabilities who need predictable navigation.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.3 Focus Order', '2.1.1 Keyboard'],
            'remediation': "Change tabindex=\"{currentTabindex}\" to tabindex=\"-1\" on this element. This allows skip links to focus it programmatically when activated, but keeps it OUT of the natural keyboard tab order. The element will still receive focus when the skip link is clicked, but won't be a tab stop during normal navigation."
        },
        'WarnMissingNegativeTabindex': {
            'title': "In-page link target <{element}> should have tabindex=\"-1\"",
            'what': "This <{element}> element is the target of in-page links but lacks tabindex=\"-1\". Without it, when users activate the link, focus may not move properly to the target content.",
            'why': "In-page link targets (especially skip link targets) should have tabindex=\"-1\" to ensure they can receive programmatic focus when the link is activated. Without this, some browsers may not properly move focus to the target, defeating the purpose of the skip link.",
            'who': "Keyboard users relying on skip links to bypass repetitive content, screen reader users who need focus to move to the target section.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.1 Bypass Blocks'],
            'remediation': "Add tabindex=\"-1\" to this element so it can receive programmatic focus when the in-page link is activated. This ensures skip links work properly across all browsers."
        },
        'WarnMissingRequiredIndication': {
            'title': "Required form fields not clearly indicated",
            'what': "Required form fields not clearly indicated",
            'why': "Users need to know which fields are required before submitting forms.",
            'who': "All users, especially those using screen readers.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.3.2'],
            'remediation': "Mark required fields with aria-required=\"true\" and visual indicators."
        },
        'WarnModalMissingAriaLabelledby': {
            'title': "Modal lacks aria-labelledby pointing to its heading",
            'what': "Modal lacks aria-labelledby pointing to its heading",
            'why': "Screen readers need to announce the modal\'s title when it opens.",
            'who': "Screen reader users who need modal context.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-labelledby pointing to the modal\'s heading element."
        },
        'WarnModalMissingAriaModal': {
            'title': "Modal dialog missing aria-modal attribute",
            'what': "Modal dialog missing aria-modal attribute",
            'why': "aria-modal helps assistive technologies understand modal boundaries.",
            'who': "Screen reader users navigating modal content.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-modal=\"true\" to modal containers."
        },
        'WarnModalNoFocusableElements': {
            'title': "Modal has no focusable elements",
            'what': "Modal has no focusable elements",
            'why': "Modals without focusable elements trap keyboard focus with no actions available.",
            'who': "Keyboard users unable to interact with modal.",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.1.1'],
            'remediation': "Ensure modals contain at least one focusable element (close button, form fields, etc.)."
        },
        'WarnMultipleBannerLandmarksButNotAllHaveLabels': {
            'title': "Multiple banner landmarks exist but not all have labels",
            'what': "Multiple banner landmarks exist but not all have labels",
            'why': "Inconsistent labeling makes navigation difficult",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all banner landmarks have labels or reduce to single banner"
        },
        'WarnMultipleComplementaryLandmarksButNotAllHaveLabels': {
            'title': "Multiple complementary landmarks but not all labeled",
            'what': "Multiple complementary landmarks but not all labeled",
            'why': "Inconsistent labeling makes navigation difficult",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all complementary landmarks have unique labels"
        },
        'WarnMultipleContentInfoLandmarksButNotAllHaveLabels': {
            'title': "Multiple contentinfo landmarks exist but not all have labels",
            'what': "Multiple contentinfo landmarks exist but not all have labels",
            'why': "Inconsistent labeling makes navigation difficult",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all contentinfo landmarks have labels or reduce to single contentinfo"
        },
        'WarnMultipleNavLandmarksButNotAllHaveLabels': {
            'title': "Multiple navigation landmarks but not all labeled",
            'what': "Multiple navigation landmarks but not all labeled",
            'why': "Users cannot distinguish between navigation areas",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Label all navigation landmarks uniquely"
        },
        'WarnMultipleNavNeedsLabel': {
            'title': "Multiple navigation landmarks found without distinguishing labels",
            'what': "Multiple navigation landmarks found without distinguishing labels",
            'why': "When a page has multiple navigation areas (main menu, footer links, breadcrumbs, sidebar navigation), users need to distinguish between them. Without unique labels, screen reader users hear \"navigation\" multiple times with no indication of which navigation area they\'re entering. This creates confusion about which menu contains the desired links and requires users to explore each navigation to understand its purpose.",
            'who': "Screen reader users who need to distinguish between different navigation areas, keyboard users navigating between multiple menus, users with cognitive disabilities who need clear labeling, and frequent users who want to quickly access specific navigation areas",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add unique aria-label attributes to each <nav> element or role=\"navigation\" container. Use descriptive labels like aria-label=\"Main menu\", aria-label=\"Footer links\", aria-label=\"Breadcrumb\", aria-label=\"Related articles\". The labels should clearly indicate the purpose or location of each navigation. Test with screen readers to ensure each navigation is announced with its unique label."
        },
        'WarnMultipleRegionLandmarksButNotAllHaveLabels': {
            'title': "Multiple region landmarks but not all labeled",
            'what': "Multiple region landmarks but not all labeled",
            'why': "Regions without labels are not exposed as landmarks",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Ensure all regions have labels or use different elements"
        },
        'WarnMultipleTitleElements': {
            'title': "{count} <title> elements found in the document head, which may cause unpredictable behavior",
            'what': "{count} <title> elements found in the document head, which may cause unpredictable behavior",
            'why': "Having {count} title elements causes browsers to choose unpredictably between them, creating inconsistent page identification. Different browsers and assistive technologies may choose different titles from the {count} available, creating an inconsistent experience. SEO is negatively affected as search engines may index the wrong title.",
            'who': "All users seeing inconsistent titles in browser tabs, screen reader users who may hear different titles than what\'s visually displayed, users bookmarking pages with incorrect titles",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.2'],
            'remediation': "Remove {count-1} duplicate <title> elements, keeping only one in the document head. Check for scripts that might be adding titles dynamically. Ensure your CMS or framework isn\'t creating duplicate titles."
        },
        'WarnNavLandmarkAccessibleNameUsesNavigation': {
            'title': "Navigation landmark uses generic term \"navigation\" in label",
            'what': "Navigation landmark uses generic term \"navigation\" in label",
            'why': "Generic labels don\'t describe specific purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use more descriptive labels like \"Product categories\" or \"User account menu\""
        },
        'WarnNavLandmarkHasNoLabel': {
            'title': "Navigation landmark lacks label",
            'what': "Navigation landmark lacks label",
            'why': "Hard to distinguish multiple navigation areas",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add descriptive aria-label"
        },
        'WarnNegativeTabindex': {
            'title': "Interactive element has negative tabindex",
            'what': "Interactive element has negative tabindex",
            'why': "Negative tabindex removes elements from keyboard navigation, potentially making them inaccessible.",
            'who': "Keyboard users who cannot reach the element.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.1.1'],
            'remediation': "Use tabindex=\"0\" for keyboard-accessible elements, only use -1 for programmatic focus."
        },
        'WarnNoBannerLandmark': {
            'title': "Page is missing a banner landmark to identify the header/masthead region",
            'what': "Page is missing a banner landmark to identify the header/masthead region",
            'why': "The banner landmark identifies the site header containing the logo, primary navigation, and other site-wide content. Without it, screen reader users cannot quickly jump to the header area using landmark navigation. They must read through content linearly to find navigation and branding elements. This is especially frustrating when users want to access the main navigation or return to the homepage via the logo.",
            'who': "Screen reader users who navigate by landmarks to quickly access header content, keyboard users with assistive technology looking for navigation, users with cognitive disabilities who rely on consistent page structure, and users who frequently need to access header elements like search or main navigation",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Use the HTML5 <header> element at the page level (not within article, aside, main, nav, or section) as it has an implicit banner role. Alternatively, add role=\"banner\" to your header container. Include site-wide elements like logo, primary navigation, site search, and utility navigation within the banner. Ensure only one banner landmark exists per page at the top level."
        },
        'WarnNoContentinfoLandmark': {
            'title': "Page is missing a contentinfo landmark to identify the footer region",
            'what': "Page is missing a contentinfo landmark to identify the footer region",
            'why': "The contentinfo landmark (typically a footer) contains important information about the page or site such as copyright notices, privacy policies, contact information, and site maps. Screen reader users rely on landmarks to quickly navigate to these common elements without having to read through the entire page. When the footer lacks proper landmark markup, users must search manually through the content to find this information, which is inefficient and may cause them to miss important legal notices or helpful links. The contentinfo landmark provides a consistent, predictable way to access this supplementary information across all pages.",
            'who': "Screen reader users who navigate by landmarks to quickly find footer information, keyboard users who want to efficiently skip to footer content, users with cognitive disabilities who rely on consistent page structure, and users who need to frequently access footer links like privacy policies or contact information",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Use the HTML5 <footer> element for your page footer (it has an implicit role of contentinfo when it\'s not nested inside article, aside, main, nav, or section elements). Alternatively, add role=\"contentinfo\" to the container holding your footer content. Ensure there\'s only one contentinfo landmark per page at the top level. The footer should contain information about the page or site, not primary content."
        },
        'WarnNoCurrentPageIndicator': {
            'title': "Navigation doesn\'t indicate current page",
            'what': "Navigation doesn\'t indicate current page",
            'why': "Users need to know their current location within the site navigation.",
            'who': "Users with cognitive disabilities, screen reader users.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.8'],
            'remediation': "Use aria-current=\"page\" and visual styling to indicate current page in navigation."
        },
        'WarnNoCursorPointer': {
            'title': "Clickable element doesn\'t show pointer cursor",
            'what': "Clickable element doesn\'t show pointer cursor",
            'why': "Cursor changes help users identify interactive elements.",
            'who': "Mouse users who rely on cursor changes.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.1.1'],
            'remediation': "Add cursor: pointer CSS to all clickable elements."
        },
        'WarnNoFieldset': {
            'title': "Related form fields not grouped with fieldset",
            'what': "Related form fields not grouped with fieldset",
            'why': "Fieldsets help users understand relationships between form controls.",
            'who': "Screen reader users, users with cognitive disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Use fieldset and legend elements to group related form fields like radio buttons."
        },
        'WarnNoH1': {
            'title': "Page is missing an h1 element to identify the main topic",
            'what': "Page is missing an h1 element to identify the main topic",
            'why': "The h1 is the most important heading on a page - it tells users what the page is about, similar to a chapter title in a book. Screen reader users often navigate directly to the h1 first to understand the page purpose. Without it, users must guess the page topic from other cues like the title or URL. The h1 also establishes the starting point for the heading hierarchy. Search engines use the h1 to understand page content, and browser extensions that generate page outlines will be missing the top level. Think of the h1 as answering \"What is this page about?\" - without it, users lack this fundamental context.",
            'who': "Screen reader users who jump to the h1 to understand page purpose, users with cognitive disabilities who need clear indication of page topic, SEO and users finding your content through search engines, users of browser tools that generate page outlines or tables of contents",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '2.4.6'],
            'remediation': "Add exactly one h1 element that describes the main topic or purpose of the page. It should be unique to that page (not the same site-wide). Place it at the beginning of your main content, typically inside the main landmark. The h1 text should make sense if read in isolation and match user expectations based on how they arrived at the page. Don\'t use the site name as the h1 - use the specific page topic."
        },
        'WarnNoLegend': {
            'title': "Fieldset missing legend element",
            'what': "Fieldset missing legend element",
            'why': "Legends provide context for grouped form fields.",
            'who': "Screen reader users who need group labels.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add legend as first child of fieldset to label the group."
        },
        'WarnNoNavigationLandmark': {
            'title': "Page has no navigation landmarks to identify navigation regions",
            'what': "Page has no navigation landmarks to identify navigation regions",
            'why': "Navigation landmarks identify areas containing navigation links, allowing users to quickly jump to menus without reading through other content. Most web pages have multiple navigation areas (main menu, footer links, sidebar navigation, breadcrumbs) but without proper markup, these are just lists of links mixed with other content. Screen reader users must hunt for navigation areas or listen to all links to find what they need. Navigation landmarks make these areas immediately discoverable and allow users to skip between different navigation regions efficiently.",
            'who': "Screen reader users who use landmarks to find navigation menus quickly, keyboard users navigating complex sites with multiple menus, users with cognitive disabilities who need clear identification of navigation areas, and users with motor disabilities who need to minimize unnecessary navigation",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1', '2.4.1'],
            'remediation': "Wrap navigation areas in <nav> elements or add role=\"navigation\" to containers with navigation links. If you have multiple navigation areas, label each one with aria-label to distinguish them (e.g., aria-label=\"Main navigation\", aria-label=\"Footer links\", aria-label=\"Breadcrumb\"). Not every group of links needs to be a navigation landmark - use it for major navigation blocks that users would want to find quickly."
        },
        'WarnPageTitleTooLong': {
            'title': "Page title is {length} characters long, exceeding the recommended {limit} character limit",
            'what': "Page title is {length} characters long, exceeding the recommended {limit} character limit",
            'why': "The title \"{found}\" with {length} characters will get cut off in browser tabs (typically around 30 characters) and search engine results (typically 50-60 characters), losing important information. The most important information might be at the end and never seen. Screen reader users have to listen to lengthy titles repeatedly.",
            'who': "Users with multiple tabs open who see truncated titles, users searching for content who can\'t see full titles in results, screen reader users who must listen to long titles repeatedly, mobile users with even less space for title display",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.2'],
            'remediation': "Shorten the title from {length} to under {limit} characters. Place the most important, unique information first. Remove unnecessary words like \"Welcome to\" or \"This page contains\". Test how titles appear in browser tabs and search results to ensure key information is visible."
        },
        'WarnPageTitleTooShort': {
            'title': "Page title \"{found}\" is only {length} characters, potentially not descriptive enough",
            'what': "Page title \"{found}\" is only {length} characters, potentially not descriptive enough",
            'why': "The title \"{found}\" with only {length} characters doesn\'t provide enough context, especially when users have multiple tabs open or are browsing history. Users can\'t distinguish between different sites with the same generic titles. Screen reader users hearing page titles announced need more descriptive information to understand where they are.",
            'who': "Users with multiple browser tabs who need to distinguish between pages, screen reader users who rely on descriptive titles for context, users browsing history or bookmarks, users with cognitive disabilities who need clear page identification",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.2'],
            'remediation': "Expand \"{found}\" to be more descriptive by including the site name and page purpose. Aim for 20-60 characters that clearly describe the page content. Ensure each page has a unique, descriptive title that makes sense out of context."
        },
        'WarnRegionLandmarkAccessibleNameUsesNavigation': {
            'title': "Region landmark incorrectly uses \"navigation\" in its label",
            'what': "Region landmark incorrectly uses \"navigation\" in its label",
            'why': "Confusing landmark type and purpose",
            'who': "Screen reader users",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Use appropriate label or change to nav landmark"
        },
        'WarnRegionLandmarkHasNoLabelSoIsNotConsideredALandmark': {
            'title': "Region landmark lacks required label to be considered a landmark",
            'what': "Region landmark lacks required label to be considered a landmark",
            'why': "Regions without labels are not exposed as landmarks",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby, or use a different landmark type"
        },
        'WarnRightAlignedText': {
            'title': "Body text is right-aligned affecting readability",
            'what': "Body text is right-aligned affecting readability",
            'why': "Right-aligned text is difficult to read for extended content.",
            'who': "Users with dyslexia, users with reading disabilities.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8'],
            'remediation': "Use left alignment for body text in left-to-right languages."
        },
        'WarnSVGNoRole': {
            'title': "SVG missing appropriate role attribute",
            'what': "SVG missing appropriate role attribute",
            'why': "SVGs need proper roles to be correctly interpreted by assistive technologies.",
            'who': "Screen reader users.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.1.1'],
            'remediation': "Add role=\"img\" for informative SVGs, use aria-hidden=\"true\" for decorative ones."
        },
        'WarnSmallLineHeight': {
            'title': "Line height less than 1.5x font size",
            'what': "Line height is {lineHeight}px with a ratio of {ratio} for font size {fontSize}px. Line height should be at least 1.5 times the font size.",
            'why': "Tight line spacing makes text difficult to read and track. Adequate line spacing helps users with dyslexia distinguish lines and improves reading comprehension for all users.",
            'who': "Users with dyslexia who need clear line separation, users with low vision who track lines of text, older users, users with reading disabilities.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.12'],
            'remediation': "Set line-height to at least 1.5. For this element with font size {fontSize}px, the line height should be at least {minLineHeight}px (currently {lineHeight}px)."
        },
        'WarnSvgPositiveTabindex': {
            'title': "SVG element uses positive tabindex - verify this is intentional for interactive widget",
            'what': "SVG element uses positive tabindex value (greater than 0), potentially creating custom tab order",
            'why': "While positive tabindex is generally problematic, it can be appropriate within interactive SVG widgets like maps, diagrams, or data visualizations where you need to guide users through different \"journeys\" or metadata. For example, an interactive map might use custom tab order to navigate between different types of geographic features, or a diagram might guide users through different conceptual layers. However, this should only be used when creating a genuinely beneficial navigation experience within a self-contained interactive widget, not for general page layout.",
            'who': "Keyboard users who may benefit from guided navigation within complex interactive graphics, but could be confused if the custom tab order is poorly designed or unnecessary",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.3'],
            'remediation': "Review whether this positive tabindex serves a clear purpose for keyboard navigation within an interactive SVG widget (map, diagram, data visualization). If the SVG is interactive and the tab order creates a logical navigation flow for different content \"journeys\", this usage may be acceptable. If the SVG is decorative or the custom tab order doesn't provide clear value, remove the positive tabindex and use tabindex=\"0\" to add to natural tab order or tabindex=\"-1\" to remove from tab order but allow programmatic focus. Ensure any custom tab order is thoroughly tested with keyboard-only users."
        },
        'WarnTableMissingThead': {
            'title': "Table missing thead element for headers",
            'what': "Table missing thead element for headers",
            'why': "Thead helps screen readers distinguish headers from data rows.",
            'who': "Screen reader users navigating tables.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Wrap header rows in thead element, data rows in tbody."
        },
        'WarnRedundantTitleAttr': {
            'title': "Title attribute duplicates visible text, creating inaccessible tooltip",
            'what': "Element has a title attribute that duplicates or overlaps with visible text content: \"{visibleText}\" with title=\"{title}\"",
            'why': "When the title attribute duplicates visible text, it creates a redundant tooltip that provides no additional value but causes significant accessibility problems. The tooltip cannot be dismissed and disappears when users move their mouse toward it - a critical issue for screen magnifier users who need to move their viewport to read the tooltip text. The tooltip also doesn't appear on touch devices, isn't accessible to keyboard users, and creates a poor experience for users with motor impairments who trigger tooltips accidentally. This redundancy adds no value while creating barriers for many users. The general rule is: never use title attributes except on iframes (where they serve as accessible names) and in the <head> element (where \"title\" has a completely different meaning as the page title element).",
            'who': "Screen magnifier users who cannot read tooltips that disappear when moving the mouse, mobile and touch screen users who never see tooltips, keyboard users who cannot access hover-dependent content, users with motor disabilities who accidentally trigger or cannot maintain hover, users with cognitive disabilities confused by redundant information",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2'],
            'remediation': "Remove the title attribute entirely since the visible text already provides the necessary information. Title attributes should only be used: (1) on <iframe> elements to provide accessible names, or (2) in the <head> element as the page title. For all other use cases, use visible, persistent text that all users can access. If you need supplementary information, use visible helper text, aria-describedby, or clickable info icons instead of title attributes."
        },
        'WarnTitleAttrFound': {
            'title': "Title attribute is being used on an element, which has significant accessibility limitations",
            'what': "Title attribute is being used on an element, which has significant accessibility limitations",
            'why': "Title attributes are problematic for accessibility: they don\'t appear on mobile devices or touch screens, keyboard users cannot access them without a mouse, screen readers handle them inconsistently (some ignore them, some read them), they disappear quickly making them hard to read for users with motor or cognitive disabilities, they cannot be styled or resized for users with low vision, and they\'re not translated by browser translation tools. The general rule is: never use title attributes except on iframes (where they serve as accessible names) and in the <head> element (where \"title\" has a completely different meaning as the page title element).",
            'who': "Mobile and touch screen users who never see title tooltips, keyboard-only users who cannot hover to trigger tooltips, screen reader users who may not hear title content reliably, users with motor disabilities who cannot hover precisely, users with cognitive disabilities who need more time to read, users with low vision who cannot resize tooltip text, and users relying on translation tools",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2', '4.1.2'],
            'remediation': "Remove title attributes and replace with visible, persistent text that all users can access. Title attributes should only be used: (1) on <iframe> elements to provide accessible names, or (2) in the <head> element as the page title. For form fields, use visible <label> elements or aria-label. For links and buttons, ensure the visible text is descriptive. For abbreviations, provide the full text on first use. For supplementary information, use visible helper text, details/summary elements, aria-describedby, or clickable info icons. Never rely on title attributes for important information."
        },
        'WarnUnlabelledForm': {
            'title': "Form element lacks accessible name",
            'what': "Form element lacks accessible name",
            'why': "Forms need names to help users understand their purpose.",
            'who': "Screen reader users.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['4.1.2'],
            'remediation': "Add aria-label or aria-labelledby to form elements."
        },
        'WarnUnlabelledRegion': {
            'title': "Region landmark lacks accessible name",
            'what': "Region landmark lacks accessible name",
            'why': "Named regions help users understand content structure.",
            'who': "Screen reader users navigating by landmarks.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Add aria-label or aria-labelledby to region landmarks."
        },
        'WarnVagueTitleAttribute': {
            'title': "Title attribute contains vague or redundant information",
            'what': "Title attribute contains vague or redundant information",
            'why': "Vague titles don\'t provide useful supplementary information.",
            'who': "Users who rely on tooltips for additional context.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['3.3.2'],
            'remediation': "Make title attributes informative or remove if redundant with visible text."
        },
        'WarnVideoAutoplay': {
            'title': "Video set to autoplay which may distract users",
            'what': "Video set to autoplay which may distract users",
            'why': "Autoplay video can be disruptive and use bandwidth unexpectedly.",
            'who': "Users with cognitive disabilities, users on limited data plans.",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.4.2'],
            'remediation': "Remove autoplay or mute autoplaying videos, provide clear play controls."
        },
        'WarnVisualHierarchy': {
            'title': "Visual hierarchy doesn\'t match semantic structure",
            'what': "Visual hierarchy doesn\'t match semantic structure",
            'why': "Mismatch between visual and semantic structure confuses understanding.",
            'who': "Screen reader users, users with cognitive disabilities.",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.3.1'],
            'remediation': "Ensure visual presentation matches HTML semantic structure."
        },
        'WarnZeroOutlineOffset': {
            'title': "Outline offset is set to zero",
            'what': "Outline offset is set to zero",
            'why': "Focus indicator touches element edge",
            'who': "Keyboard users with low vision",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['2.4.7'],
            'remediation': "Use positive outline-offset value"
        },
        '[unique_identifier]': {
            'title': "[what the issue is]",
            'what': "[what the issue is]",
            'why': "[accessibility impact]",
            'who': "[affected user groups]",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': [],
            'remediation': "[remediation steps]"
        },
        'forms_DiscoNoSubmitButton': {
            'title': "Form may lack clear submit button",
            'what': "Form may lack clear submit button",
            'why': "Users may not know how to submit the form",
            'who': "Users with cognitive disabilities, keyboard users",
            'impact': ImpactScale.INFO.value,
            'wcag': ['3.3.2'],
            'remediation': "Ensure form has clear submit mechanism"
        },
        'forms_DiscoPlaceholderAsLabel': {
            'title': "Placeholder may be used instead of label",
            'what': "Placeholder may be used instead of label",
            'why': "Placeholder text disappears when typing",
            'who': "Users with memory/cognitive issues, screen reader users",
            'impact': ImpactScale.INFO.value,
            'wcag': ['3.3.2'],
            'remediation': "Use proper labels, placeholder for examples only"
        },
        'forms_ErrInputMissingLabel': {
            'title': "Form input element is missing an associated label",
            'what': "Form input element is missing an associated label",
            'why': "Users cannot determine the purpose of the input field",
            'who': "Screen reader users, voice control users, users with cognitive disabilities",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.3.1', '3.3.2', '4.1.2'],
            'remediation': "Add a <label> element with matching for/id attributes"
        },
        'forms_ErrNoButtonText': {
            'title': "Button has no accessible text",
            'what': "Button has no accessible text",
            'why': "Users cannot determine button purpose",
            'who': "Screen reader users, voice control users",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['2.4.6', '4.1.2'],
            'remediation': "Add text content, aria-label, or aria-labelledby to button"
        },
        'forms_WarnGenericButtonText': {
            'title': "Button has generic text \"{text}\"",
            'what': "Button has generic text \"{text}\"",
            'why': "The button text \"{text}\" doesn\'t describe what the button does. When screen reader users navigate by buttons or hear buttons out of context, \"{text}\" provides no information about the button\'s purpose or action.",
            'who': "Screen reader users navigating by buttons who hear \"{text}\" without context, users with cognitive disabilities who need clear action labels",
            'impact': ImpactScale.LOW.value,
            'wcag': ['2.4.6'],
            'remediation': "Change \"{text}\" to describe the specific action, like \"Submit registration\", \"Save changes\", or \"Search products\" instead of just \"{text}\""
        },
        'forms_WarnNoFieldset': {
            'title': "Radio/checkbox group lacks fieldset and legend",
            'what': "Radio/checkbox group lacks fieldset and legend",
            'why': "Group relationship is not clear",
            'who': "Screen reader users",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['1.3.1', '3.3.2'],
            'remediation': "Wrap related inputs in fieldset with legend"
        },
        'forms_WarnRequiredNotIndicated': {
            'title': "Required field not clearly indicated",
            'what': "Required field not clearly indicated",
            'why': "Users don\'t know which fields are mandatory",
            'who': "All users, especially those with cognitive disabilities",
            'impact': ImpactScale.MEDIUM.value,
            'wcag': ['3.3.2'],
            'remediation': "Add required attribute and visual indication"
        },
        'ErrStyleAttrColorFont': {
            'title': "Inline style attributes define color or font properties, preventing user customization",
            'what': "Inline style attributes define color or font properties directly on HTML elements, overriding user stylesheets and preventing users from customizing visual presentation",
            'why': "When colors and fonts are hard-coded in inline style attributes, CSS specificity rules make them extremely difficult for users to override with their own stylesheets. Users with low vision who need specific color schemes (high contrast, inverted colors, custom color combinations), users with dyslexia who need particular fonts, and users who need custom text spacing cannot apply their accessibility preferences. Inline styles essentially lock visual presentation, forcing all users to view content exactly as designed regardless of their needs.",
            'who': "Users with low vision who require custom color schemes or high contrast settings, users with dyslexia or reading disabilities who need specific fonts like OpenDyslexic or Comic Sans, users with light sensitivity who need dark mode or specific color combinations, users with cognitive disabilities who need customized text presentation, elderly users who need larger text with specific spacing, and users with color blindness who need adjusted color palettes",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3', '1.4.8', '1.4.12'],
            'remediation': "Move all color and font declarations from inline style attributes to external CSS files or <style> blocks with lower specificity, use CSS classes instead of inline styles (replace style=\"color: red; font-size: 18px;\" with class=\"error-text\"), ensure user stylesheets can override your styles by avoiding !important declarations, test that users can apply custom stylesheets successfully, and reserve inline styles only for layout properties like positioning or dimensions when absolutely necessary"
        },
        'WarnStyleAttrOther': {
            'title': "Inline style attributes define layout properties instead of using CSS classes",
            'what': "Inline style attributes define layout properties (margin, padding, width, display) directly on HTML elements instead of using CSS classes",
            'why': "While layout-related inline styles are less problematic for accessibility than color/font styles, they still reduce maintainability, make responsive design harder to implement, and can interfere with user zoom and customization. Inline layout styles scatter presentation logic throughout HTML making it difficult to create consistent designs or implement site-wide changes. They also make it harder for users with custom stylesheets to adjust spacing or layout for their needs.",
            'who': "Users who need custom stylesheets to adjust layout for readability, users who zoom content and need flexible layouts that adapt properly, developers maintaining the codebase who cannot easily update or debug scattered inline styles, and users with cognitive disabilities who benefit from consistent, predictable layouts",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8'],
            'remediation': "Move layout properties to CSS classes or external stylesheets for better maintainability (replace style=\"margin: 20px; padding: 10px;\" with appropriate CSS classes), use semantic HTML with CSS for layout rather than inline positioning, create reusable utility classes for common spacing patterns, ensure responsive design works properly without inline dimension declarations, and document any truly necessary inline layout styles with comments explaining why they cannot be moved to stylesheets"
        },
        'ErrStyleTagColorFont': {
            'title': "Style tags define color or font properties, making user stylesheet overrides difficult",
            'what': "Style tags in HTML document define color or font properties, making it harder for users to override with custom stylesheets due to specificity and source order",
            'why': "Embedded <style> tags create specificity and cascade issues that can prevent users from successfully applying their own stylesheets for accessibility needs. Colors and fonts defined in <style> tags appear later in the cascade than external stylesheets, often requiring users to add !important to every custom rule or fight complex specificity battles. This creates significant barriers for users who depend on custom styling - those with low vision needing high contrast, users with dyslexia needing specific fonts, or users with light sensitivity needing dark themes. External CSS files load first and are easier to override with user stylesheets.",
            'who': "Users with low vision who need custom color schemes that may be overridden by embedded styles, users with dyslexia or reading disabilities who cannot reliably apply their preferred fonts, users with photosensitivity who need consistent dark mode implementations, users with cognitive disabilities requiring specific visual customizations, and users relying on browser extensions or assistive technology that inject custom CSS which may be defeated by embedded styles",
            'impact': ImpactScale.HIGH.value,
            'wcag': ['1.4.3', '1.4.8', '1.4.12'],
            'remediation': "Move all color and font definitions from <style> tags to external CSS files that load early in the document head, use external stylesheets with link elements instead of embedded styles (replace <style> with <link rel=\"stylesheet\" href=\"styles.css\">), ensure external stylesheets are loaded before any embedded styles if you must use both, avoid using overly specific selectors or !important that make user overrides difficult, test that user stylesheets successfully override your color and font choices, and reserve <style> tags for critical layout CSS only when external files would cause flash of unstyled content"
        },
        'WarnStyleTagOther': {
            'title': "Style tags define layout properties, which should be in external CSS files",
            'what': "Style tags in HTML document define layout properties, which should preferably be in external CSS files for better maintainability and performance",
            'why': "While layout CSS in <style> tags is less problematic than inline styles, using external CSS files provides better caching, allows CSS to be shared across pages, makes maintenance easier, enables better testing, and improves page load performance. Embedded <style> blocks increase HTML file size, prevent browser caching of styles, make it harder to implement site-wide design changes, and can create flash of unstyled content issues. External CSS also makes it easier to implement responsive design and media queries consistently.",
            'who': "All users benefit from faster page loads through CSS caching, users on slow connections who download unnecessary CSS with every page, users who zoom or need responsive layouts that should be managed centrally, developers maintaining scattered style blocks across multiple pages, and users whose custom stylesheets work more predictably when site styles are in external files",
            'impact': ImpactScale.LOW.value,
            'wcag': ['1.4.8'],
            'remediation': "Move layout CSS from <style> tags to external CSS files loaded via <link> elements, combine styles from multiple pages into shared stylesheets to improve caching, use CSS modules or build tools to manage styles systematically, keep <style> tags only for critical above-the-fold CSS if optimizing initial paint time, document any remaining embedded styles with comments explaining why external CSS isn\'t suitable, and ensure responsive design and media queries are managed in external files where they can be easily updated"
        },
    }
    
    # Get the specific description for this error type
    if error_type in descriptions:
        desc = descriptions[error_type].copy()
        
        # Replace metadata placeholders in the description
        for key in ['title', 'what', 'why', 'who', 'remediation']:
            if key in desc and isinstance(desc[key], str):
                # Replace {found} with actual font name for font issues (legacy support)
                if '{found}' in desc[key] and 'found' in metadata:
                    desc[key] = desc[key].replace('{found}', str(metadata.get('found', 'unknown')))

                # Special handling for font size list
                if '{fontSizes_list}' in desc[key] and 'fontSizes' in metadata:
                    sizes = metadata.get('fontSizes', [])
                    desc[key] = desc[key].replace('{fontSizes_list}', ', '.join(sizes) if isinstance(sizes, list) else str(sizes))

                # Special handling for field types summary
                if '{fieldTypes_summary}' in desc[key] and 'fieldTypes' in metadata:
                    field_types = metadata.get('fieldTypes', {})
                    if isinstance(field_types, dict):
                        summary = ', '.join([f"{count} {ftype}" for ftype, count in field_types.items()])
                        desc[key] = desc[key].replace('{fieldTypes_summary}', summary or 'unknown fields')
                    else:
                        desc[key] = desc[key].replace('{fieldTypes_summary}', str(field_types))

                # Special handling for search context in forms
                if '{searchContext_title}' in desc[key]:
                    is_search = metadata.get('isSearchForm', False)
                    if is_search:
                        desc[key] = desc[key].replace('{searchContext_title}', ' [SEARCH FORM]')
                    else:
                        desc[key] = desc[key].replace('{searchContext_title}', '')

                if '{searchContext_description}' in desc[key]:
                    search_ctx = metadata.get('searchContext', '')
                    if 'search' in search_ctx.lower():
                        desc[key] = desc[key].replace('{searchContext_description}',
                            f'This form is identified as a search form ({search_ctx}).')
                    else:
                        desc[key] = desc[key].replace('{searchContext_description}', '')

                if '{searchContext_remediation}' in desc[key]:
                    is_search = metadata.get('isSearchForm', False)
                    if is_search:
                        desc[key] = desc[key].replace('{searchContext_remediation}',
                            'For search forms specifically: verify the form or its container has role="search" so screen reader users can navigate directly to it using landmark navigation, ensure the search input has an appropriate label (visible or aria-label="Search"), and test that search results are announced to screen readers.')
                    else:
                        desc[key] = desc[key].replace('{searchContext_remediation}', '')

                # Special handling for plurals
                if '{sizeCount_plural}' in desc[key] and 'sizeCount' in metadata:
                    count = metadata.get('sizeCount', 0)
                    desc[key] = desc[key].replace('{sizeCount_plural}', 's' if count != 1 else '')

                if '{fieldCount_plural}' in desc[key] and 'fieldCount' in metadata:
                    count = metadata.get('fieldCount', 0)
                    desc[key] = desc[key].replace('{fieldCount_plural}', 's' if count != 1 else '')

                # Special handling for calculated line height minimum
                if '{minLineHeight}' in desc[key] and 'fontSize' in metadata:
                    font_size = float(metadata.get('fontSize', 16))
                    min_line_height = font_size * 1.5
                    desc[key] = desc[key].replace('{minLineHeight}', f"{min_line_height:.2f}")

                # Replace nested metadata placeholders (e.g., {currentElement.tag})
                import re
                nested_pattern = r'\{([^}]+)\}'

                def replace_nested(match):
                    path = match.group(1)

                    # Skip special placeholders already handled
                    if path in ['fontSizes_list', 'sizeCount_plural', 'fieldCount_plural', 'fieldTypes_summary',
                                'searchContext_title', 'searchContext_description', 'searchContext_remediation', 'minLineHeight']:
                        return match.group(0)

                    parts = path.split('.')

                    # Navigate through nested dict/objects
                    value = metadata
                    for part in parts:
                        if isinstance(value, dict) and part in value:
                            value = value[part]
                        else:
                            return match.group(0)  # Return original if path not found

                    return str(value) if value is not None else match.group(0)

                desc[key] = re.sub(nested_pattern, replace_nested, desc[key])
        
        return desc
    
    # Default fallback
    return {
        'title': f"Accessibility issue: {error_type}",
        'what': f"An accessibility issue of type '{error_type}' was detected.",
        'why': "This issue may create barriers for users with disabilities.",
        'who': "Users with disabilities",
        'impact': ImpactScale.MEDIUM.value,
        'wcag': [],
        'remediation': "Review the specific issue and apply appropriate accessibility fixes."
    }


def format_issue_for_display(issue_code: str, violation_data: Dict[str, Any]) -> Dict[str, str]:
    """
    Format an issue with all its metadata for display
    """
    # Get the detailed description using the metadata
    description = get_detailed_issue_description(issue_code, violation_data)
    
    # Add any additional runtime data
    description['issue_id'] = issue_code
    description['location'] = violation_data.get('xpath', 'Not specified')
    description['element'] = violation_data.get('element', 'Not specified')
    description['url'] = violation_data.get('url', 'Not specified')
    
    return description


# Export total issue count for verification
TOTAL_ISSUES = 287